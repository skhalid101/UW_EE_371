
inter.elf:     file format elf32-littlenios2
inter.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00001020

Program Header:
    LOAD off    0x00001000 vaddr 0x00001000 paddr 0x00001000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00001020 paddr 0x00001020 align 2**12
         filesz 0x000006fc memsz 0x000006fc flags r-x
    LOAD off    0x0000171c vaddr 0x0000171c paddr 0x0000178c align 2**12
         filesz 0x00000070 memsz 0x00000070 flags rw-
    LOAD off    0x000017fc vaddr 0x000017fc paddr 0x000017fc align 2**12
         filesz 0x00000000 memsz 0x0000000c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00001000  00001000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00001020  00001020  0000178c  2**0
                  CONTENTS
  2 .text         00000624  00001020  00001020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000000d8  00001644  00001644  00001644  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000070  0000171c  0000178c  0000171c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000000c  000017fc  000017fc  000017fc  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory 00000000  00001808  00001808  0000178c  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  0000178c  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000248  00000000  00000000  000017b0  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00001a4a  00000000  00000000  000019f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000c49  00000000  00000000  00003442  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00000d05  00000000  00000000  0000408b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000002fc  00000000  00000000  00004d90  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00000999  00000000  00000000  0000508c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000005c7  00000000  00000000  00005a25  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  00005fec  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000000a8  00000000  00000000  00006030  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00007108  2**0
                  CONTENTS, READONLY
 18 .cpu          00000005  00000000  00000000  0000710b  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00007110  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00007111  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000009  00000000  00000000  00007112  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000009  00000000  00000000  0000711b  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000009  00000000  00000000  00007124  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000e  00000000  00000000  0000712d  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 0000001a  00000000  00000000  0000713b  2**0
                  CONTENTS, READONLY
 26 .jdi          00003ee4  00000000  00000000  00007155  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     00044b12  00000000  00000000  0000b039  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00001000 l    d  .entry	00000000 .entry
00001020 l    d  .exceptions	00000000 .exceptions
00001020 l    d  .text	00000000 .text
00001644 l    d  .rodata	00000000 .rodata
0000171c l    d  .rwdata	00000000 .rwdata
000017fc l    d  .bss	00000000 .bss
00001808 l    d  .onchip_memory	00000000 .onchip_memory
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../inter_bsp//obj/HAL/src/crt0.o
00001058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 alt_getchar.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
000014c0 l     F .text	00000008 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
000014f0 l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00001318 g     F .text	0000002c alt_main
0000178c g       *ABS*	00000000 __flash_rwdata_start
00001344 g     F .text	00000038 alt_putstr
00001774 g     O .rwdata	00000004 jtag_uart
000014cc g     F .text	00000008 altera_nios2_gen2_irq_init
00001000 g     F .entry	0000000c __reset
00001020 g       *ABS*	00000000 __flash_exceptions_start
00001800 g     O .bss	00000004 alt_argv
00009774 g       *ABS*	00000000 _gp
0000137c g     F .text	00000004 usleep
0000171c g     O .rwdata	00000030 alt_fd_list
000013a4 g     F .text	0000005c altera_avalon_jtag_uart_read
0000160c g     F .text	00000008 .hidden __udivsi3
00001778 g     O .rwdata	00000004 alt_max_fd
00001808 g       *ABS*	00000000 __bss_end
000011dc g     F .text	00000044 alt_getchar
0000174c g     O .rwdata	00000028 alt_dev_null
000014bc g     F .text	00000004 alt_dcache_flush_all
0000178c g       *ABS*	00000000 __ram_rwdata_end
00001000 g       *ABS*	00000000 __alt_mem_onchip_memory
0000177c g     O .rwdata	00000008 alt_dev_list
0000171c g       *ABS*	00000000 __ram_rodata_end
00001614 g     F .text	00000008 .hidden __umodsi3
00001808 g       *ABS*	00000000 end
00002000 g       *ABS*	00000000 __alt_stack_pointer
00001400 g     F .text	00000034 altera_avalon_jtag_uart_write
00001020 g     F .text	0000003c _start
000013a0 g     F .text	00000004 alt_sys_init
0000161c g     F .text	00000028 .hidden __mulsi3
0000171c g       *ABS*	00000000 __ram_rwdata_start
00001644 g       *ABS*	00000000 __ram_rodata_start
00001434 g     F .text	00000088 alt_busy_sleep
00001808 g       *ABS*	00000000 __alt_stack_base
000017fc g       *ABS*	00000000 __bss_start
0000105c g     F .text	00000180 main
000017fc g     O .bss	00000004 alt_envp
0000155c g     F .text	00000054 .hidden __divsi3
00001644 g       *ABS*	00000000 __flash_rodata_start
00001380 g     F .text	00000020 alt_irq_init
00001804 g     O .bss	00000004 alt_argc
00001784 g     O .rwdata	00000008 alt_fs_list
00001020 g       *ABS*	00000000 __ram_exceptions_start
0000178c g       *ABS*	00000000 _edata
00001808 g       *ABS*	00000000 _end
00001020 g       *ABS*	00000000 __ram_exceptions_end
000015b0 g     F .text	0000005c .hidden __modsi3
00002000 g       *ABS*	00000000 __alt_data_end
0000100c g       .entry	00000000 _exit
000014d4 g     F .text	0000001c strlen
000014c8 g     F .text	00000004 alt_icache_flush_all
00001220 g     F .text	000000f8 alt_load



Disassembly of section .entry:

00001000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    1000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    1004:	08440814 	ori	at,at,4128
    jmp r1
    1008:	0800683a 	jmp	at

0000100c <_exit>:
	...

Disassembly of section .text:

00001020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    1020:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    1024:	dec80014 	ori	sp,sp,8192
    movhi gp, %hi(_gp)
    1028:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
    102c:	d6a5dd14 	ori	gp,gp,38772
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    1030:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    1034:	1085ff14 	ori	r2,r2,6140

    movhi r3, %hi(__bss_end)
    1038:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    103c:	18c60214 	ori	r3,r3,6152

    beq r2, r3, 1f
    1040:	10c00326 	beq	r2,r3,1050 <_start+0x30>

0:
    stw zero, (r2)
    1044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    1048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    104c:	10fffd36 	bltu	r2,r3,1044 <_gp+0xffff78d0>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    1050:	00012200 	call	1220 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    1054:	00013180 	call	1318 <alt_main>

00001058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    1058:	003fff06 	br	1058 <_gp+0xffff78e4>

0000105c <main>:
#define pressurize (volatile char *) 0x3010
#define depressurize (volatile char *) 0x3000

int main()
{ 
  alt_putstr("Hello from Nios II!\n");
    105c:	01000034 	movhi	r4,0
#define arrivalSignals (volatile char *) 0x3030
#define pressurize (volatile char *) 0x3010
#define depressurize (volatile char *) 0x3000

int main()
{ 
    1060:	defffc04 	addi	sp,sp,-16
  alt_putstr("Hello from Nios II!\n");
    1064:	21059104 	addi	r4,r4,5700
#define arrivalSignals (volatile char *) 0x3030
#define pressurize (volatile char *) 0x3010
#define depressurize (volatile char *) 0x3000

int main()
{ 
    1068:	dfc00315 	stw	ra,12(sp)
    106c:	dc800215 	stw	r18,8(sp)
    1070:	dc400115 	stw	r17,4(sp)
    1074:	dc000015 	stw	r16,0(sp)
  alt_putstr("Hello from Nios II!\n");
    1078:	00013440 	call	1344 <alt_putstr>

	  *(arrivalSignals) = 0x0;
    107c:	008c0c04 	movi	r2,12336
    1080:	10000005 	stb	zero,0(r2)
	  *(doors) = 0x0;
    1084:	008c0804 	movi	r2,12320
    1088:	10000005 	stb	zero,0(r2)
	  *(pressurize) = 0x1;
    108c:	00cc0404 	movi	r3,12304
    1090:	00800044 	movi	r2,1
    1094:	18800005 	stb	r2,0(r3)
	  *(depressurize) = 0x1;
	  usleep(100000);
    1098:	010000b4 	movhi	r4,2
  alt_putstr("Hello from Nios II!\n");

	  *(arrivalSignals) = 0x0;
	  *(doors) = 0x0;
	  *(pressurize) = 0x1;
	  *(depressurize) = 0x1;
    109c:	00cc0004 	movi	r3,12288
    10a0:	18800005 	stb	r2,0(r3)
	  usleep(100000);
    10a4:	2121a804 	addi	r4,r4,-31072
    10a8:	000137c0 	call	137c <usleep>

	  int input;

	  while (1) {
		  input = alt_getchar();
		  switch (input) {
    10ac:	04000d04 	movi	r16,52
    10b0:	04400c44 	movi	r17,49
    10b4:	04800284 	movi	r18,10


	  int input;

	  while (1) {
		  input = alt_getchar();
    10b8:	00011dc0 	call	11dc <alt_getchar>
		  switch (input) {
    10bc:	14003226 	beq	r2,r16,1188 <main+0x12c>
    10c0:	80800d16 	blt	r16,r2,10f8 <main+0x9c>
    10c4:	14402626 	beq	r2,r17,1160 <main+0x104>
    10c8:	88800216 	blt	r17,r2,10d4 <main+0x78>
    10cc:	14bffa26 	beq	r2,r18,10b8 <_gp+0xffff7944>
    10d0:	00003e06 	br	11cc <main+0x170>
    10d4:	00c00c84 	movi	r3,50
    10d8:	10c02626 	beq	r2,r3,1174 <main+0x118>
    10dc:	00c00cc4 	movi	r3,51
    10e0:	10c03a1e 	bne	r2,r3,11cc <main+0x170>
			  case '2' :
				  alt_putstr("Close inner door\n");
				  *(doors) = 0x0;
				  break;
			  case '3' :
				  alt_putstr("Open outer door\n");
    10e4:	01000034 	movhi	r4,0
    10e8:	2105af04 	addi	r4,r4,5820
    10ec:	00013440 	call	1344 <alt_putstr>
				  *(doors) = 0x2;
    10f0:	00c00084 	movi	r3,2
    10f4:	00002206 	br	1180 <main+0x124>

	  int input;

	  while (1) {
		  input = alt_getchar();
		  switch (input) {
    10f8:	00c01884 	movi	r3,98
    10fc:	10c01126 	beq	r2,r3,1144 <main+0xe8>
    1100:	18800716 	blt	r3,r2,1120 <main+0xc4>
    1104:	00c01844 	movi	r3,97
    1108:	10c0301e 	bne	r2,r3,11cc <main+0x170>
			  case 'a' :
				  alt_putstr("Arrival Signal Triggered\n");
    110c:	01000034 	movhi	r4,0
    1110:	21059704 	addi	r4,r4,5724
    1114:	00013440 	call	1344 <alt_putstr>
				  *(arrivalSignals) = 0x1;
    1118:	00c00044 	movi	r3,1
    111c:	00000d06 	br	1154 <main+0xf8>

	  int input;

	  while (1) {
		  input = alt_getchar();
		  switch (input) {
    1120:	00c01904 	movi	r3,100
    1124:	10c01e26 	beq	r2,r3,11a0 <main+0x144>
    1128:	00c01c04 	movi	r3,112
    112c:	10c0271e 	bne	r2,r3,11cc <main+0x170>
			  case '4' :
				  alt_putstr("Close outer door\n");
				  *(doors) = 0x0;
				  break;
			  case 'p' :
				  alt_putstr("Pressurize\n");
    1130:	01000034 	movhi	r4,0
    1134:	2105b904 	addi	r4,r4,5860
    1138:	00013440 	call	1344 <alt_putstr>
				  *(pressurize) = 0x0;
    113c:	040c0404 	movi	r16,12304
    1140:	00001b06 	br	11b0 <main+0x154>
			  case 'a' :
				  alt_putstr("Arrival Signal Triggered\n");
				  *(arrivalSignals) = 0x1;
				  break;
			  case 'b' :
				  alt_putstr("Departure Signal Triggered\n");
    1144:	01000034 	movhi	r4,0
    1148:	21059e04 	addi	r4,r4,5752
    114c:	00013440 	call	1344 <alt_putstr>
				  *(arrivalSignals) = 0x2;
    1150:	00c00084 	movi	r3,2
    1154:	008c0c04 	movi	r2,12336
    1158:	10c00005 	stb	r3,0(r2)
				  break;
    115c:	003fd306 	br	10ac <_gp+0xffff7938>
			  case '1' :
				  alt_putstr("Open inner door\n");
    1160:	01000034 	movhi	r4,0
    1164:	2105a504 	addi	r4,r4,5780
    1168:	00013440 	call	1344 <alt_putstr>
				  *(doors) = 0x1;
    116c:	00c00044 	movi	r3,1
    1170:	00000306 	br	1180 <main+0x124>
				  break;
			  case '2' :
				  alt_putstr("Close inner door\n");
    1174:	01000034 	movhi	r4,0
    1178:	2105aa04 	addi	r4,r4,5800
    117c:	00000406 	br	1190 <main+0x134>
				  *(doors) = 0x0;
				  break;
			  case '3' :
				  alt_putstr("Open outer door\n");
				  *(doors) = 0x2;
    1180:	008c0804 	movi	r2,12320
    1184:	003ff406 	br	1158 <_gp+0xffff79e4>
				  break;
			  case '4' :
				  alt_putstr("Close outer door\n");
    1188:	01000034 	movhi	r4,0
    118c:	2105b404 	addi	r4,r4,5840
    1190:	00013440 	call	1344 <alt_putstr>
				  *(doors) = 0x0;
    1194:	008c0804 	movi	r2,12320
    1198:	10000005 	stb	zero,0(r2)
				  break;
    119c:	003fc306 	br	10ac <_gp+0xffff7938>
				  *(pressurize) = 0x0;
				  usleep(5000000);
				  *(pressurize) = 0x1;
				  break;
			  case 'd' :
				  alt_putstr("Depressurize\n");
    11a0:	01000034 	movhi	r4,0
    11a4:	2105bc04 	addi	r4,r4,5872
    11a8:	00013440 	call	1344 <alt_putstr>
				  *(depressurize) = 0x0;
    11ac:	040c0004 	movi	r16,12288
				  usleep(5000000);
    11b0:	01001334 	movhi	r4,76
				  usleep(5000000);
				  *(pressurize) = 0x1;
				  break;
			  case 'd' :
				  alt_putstr("Depressurize\n");
				  *(depressurize) = 0x0;
    11b4:	80000005 	stb	zero,0(r16)
				  usleep(5000000);
    11b8:	2112d004 	addi	r4,r4,19264
    11bc:	000137c0 	call	137c <usleep>
				  *(depressurize) = 0x1;
    11c0:	00800044 	movi	r2,1
    11c4:	80800005 	stb	r2,0(r16)
				  break;
    11c8:	003fb806 	br	10ac <_gp+0xffff7938>
			  case '\n' :
				  break;
			  default :
				  alt_putstr("Invalid input");
    11cc:	01000034 	movhi	r4,0
    11d0:	2105c004 	addi	r4,r4,5888
    11d4:	00013440 	call	1344 <alt_putstr>
    11d8:	003fb406 	br	10ac <_gp+0xffff7938>

000011dc <alt_getchar>:
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
    11dc:	00800034 	movhi	r2,0
    11e0:	1085c704 	addi	r2,r2,5916
    11e4:	11c00217 	ldw	r7,8(r2)
 * Uses the ALT_DRIVER_READ() macro to call directly to driver if available.
 * Otherwise, uses newlib provided getchar() routine.
 */
int 
alt_getchar(void)
{
    11e8:	defffe04 	addi	sp,sp,-8
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
    11ec:	01000034 	movhi	r4,0
    11f0:	2105dd04 	addi	r4,r4,6004
    11f4:	d80b883a 	mov	r5,sp
    11f8:	01800044 	movi	r6,1
 * Uses the ALT_DRIVER_READ() macro to call directly to driver if available.
 * Otherwise, uses newlib provided getchar() routine.
 */
int 
alt_getchar(void)
{
    11fc:	dfc00115 	stw	ra,4(sp)
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
    1200:	00013a40 	call	13a4 <altera_avalon_jtag_uart_read>
    1204:	0080020e 	bge	zero,r2,1210 <alt_getchar+0x34>
        return -1;
    }
    return c;
    1208:	d8800007 	ldb	r2,0(sp)
    120c:	00000106 	br	1214 <alt_getchar+0x38>
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
        return -1;
    1210:	00bfffc4 	movi	r2,-1
    return c;
#else
    return getchar();
#endif
#endif
}
    1214:	dfc00117 	ldw	ra,4(sp)
    1218:	dec00204 	addi	sp,sp,8
    121c:	f800283a 	ret

00001220 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    1220:	deffff04 	addi	sp,sp,-4
    1224:	01000034 	movhi	r4,0
    1228:	01400034 	movhi	r5,0
    122c:	dfc00015 	stw	ra,0(sp)
    1230:	2105c704 	addi	r4,r4,5916
    1234:	2945e304 	addi	r5,r5,6028

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    1238:	2140061e 	bne	r4,r5,1254 <alt_load+0x34>
    123c:	01000034 	movhi	r4,0
    1240:	01400034 	movhi	r5,0
    1244:	21040804 	addi	r4,r4,4128
    1248:	29440804 	addi	r5,r5,4128
    124c:	2140141e 	bne	r4,r5,12a0 <alt_load+0x80>
    1250:	00000d06 	br	1288 <alt_load+0x68>
    1254:	00c00034 	movhi	r3,0
    1258:	18c5e304 	addi	r3,r3,6028
    125c:	00bfff04 	movi	r2,-4
    1260:	1907c83a 	sub	r3,r3,r4
    1264:	1886703a 	and	r3,r3,r2
    1268:	0005883a 	mov	r2,zero
  {
    while( to != end )
    126c:	10fff326 	beq	r2,r3,123c <_gp+0xffff7ac8>
    1270:	114f883a 	add	r7,r2,r5
    {
      *to++ = *from++;
    1274:	39c00017 	ldw	r7,0(r7)
    1278:	110d883a 	add	r6,r2,r4
    127c:	10800104 	addi	r2,r2,4
    1280:	31c00015 	stw	r7,0(r6)
    1284:	003ff906 	br	126c <_gp+0xffff7af8>
    1288:	01000034 	movhi	r4,0
    128c:	01400034 	movhi	r5,0
    1290:	21059104 	addi	r4,r4,5700
    1294:	29459104 	addi	r5,r5,5700

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    1298:	2140121e 	bne	r4,r5,12e4 <alt_load+0xc4>
    129c:	00000d06 	br	12d4 <alt_load+0xb4>
    12a0:	00c00034 	movhi	r3,0
    12a4:	18c40804 	addi	r3,r3,4128
    12a8:	00bfff04 	movi	r2,-4
    12ac:	1907c83a 	sub	r3,r3,r4
    12b0:	1886703a 	and	r3,r3,r2
    12b4:	0005883a 	mov	r2,zero
  {
    while( to != end )
    12b8:	10fff326 	beq	r2,r3,1288 <_gp+0xffff7b14>
    12bc:	114f883a 	add	r7,r2,r5
    {
      *to++ = *from++;
    12c0:	39c00017 	ldw	r7,0(r7)
    12c4:	110d883a 	add	r6,r2,r4
    12c8:	10800104 	addi	r2,r2,4
    12cc:	31c00015 	stw	r7,0(r6)
    12d0:	003ff906 	br	12b8 <_gp+0xffff7b44>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    12d4:	00014bc0 	call	14bc <alt_dcache_flush_all>
  alt_icache_flush_all();
}
    12d8:	dfc00017 	ldw	ra,0(sp)
    12dc:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
    12e0:	00014c81 	jmpi	14c8 <alt_icache_flush_all>
    12e4:	00c00034 	movhi	r3,0
    12e8:	18c5c704 	addi	r3,r3,5916
    12ec:	00bfff04 	movi	r2,-4
    12f0:	1907c83a 	sub	r3,r3,r4
    12f4:	1886703a 	and	r3,r3,r2

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    12f8:	0005883a 	mov	r2,zero
  {
    while( to != end )
    12fc:	10fff526 	beq	r2,r3,12d4 <_gp+0xffff7b60>
    1300:	114f883a 	add	r7,r2,r5
    {
      *to++ = *from++;
    1304:	39c00017 	ldw	r7,0(r7)
    1308:	110d883a 	add	r6,r2,r4
    130c:	10800104 	addi	r2,r2,4
    1310:	31c00015 	stw	r7,0(r6)
    1314:	003ff906 	br	12fc <_gp+0xffff7b88>

00001318 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    1318:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    131c:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    1320:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    1324:	00013800 	call	1380 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    1328:	00013a00 	call	13a0 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    132c:	d1202417 	ldw	r4,-32624(gp)
    1330:	d1602317 	ldw	r5,-32628(gp)
    1334:	d1a02217 	ldw	r6,-32632(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
    1338:	dfc00017 	ldw	ra,0(sp)
    133c:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    1340:	000105c1 	jmpi	105c <main>

00001344 <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
    1344:	defffe04 	addi	sp,sp,-8
    1348:	dc000015 	stw	r16,0(sp)
    134c:	dfc00115 	stw	ra,4(sp)
    1350:	2021883a 	mov	r16,r4
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
    1354:	00014d40 	call	14d4 <strlen>
    1358:	01000034 	movhi	r4,0
    135c:	2105dd04 	addi	r4,r4,6004
    1360:	800b883a 	mov	r5,r16
    1364:	100d883a 	mov	r6,r2
    1368:	000f883a 	mov	r7,zero
#else
    return fputs(str, stdout);
#endif
#endif
}
    136c:	dfc00117 	ldw	ra,4(sp)
    1370:	dc000017 	ldw	r16,0(sp)
    1374:	dec00204 	addi	sp,sp,8
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
    1378:	00014001 	jmpi	1400 <altera_avalon_jtag_uart_write>

0000137c <usleep>:
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  return alt_busy_sleep(us);
    137c:	00014341 	jmpi	1434 <alt_busy_sleep>

00001380 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    1380:	deffff04 	addi	sp,sp,-4
    1384:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2, nios2);
    1388:	00014cc0 	call	14cc <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    138c:	00800044 	movi	r2,1
    1390:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    1394:	dfc00017 	ldw	ra,0(sp)
    1398:	dec00104 	addi	sp,sp,4
    139c:	f800283a 	ret

000013a0 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    13a0:	f800283a 	ret

000013a4 <altera_avalon_jtag_uart_read>:

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
  unsigned int base = sp->base;
    13a4:	21000017 	ldw	r4,0(r4)

  char * ptr = buffer;
  char * end = buffer + space;
    13a8:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    13ac:	2805883a 	mov	r2,r5

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
    else if(flags & O_NONBLOCK)
    13b0:	3a10000c 	andi	r8,r7,16384
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
    13b4:	11800b2e 	bgeu	r2,r6,13e4 <altera_avalon_jtag_uart_read+0x40>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    13b8:	20c00037 	ldwio	r3,0(r4)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
    13bc:	1a60000c 	andi	r9,r3,32768
    13c0:	48000326 	beq	r9,zero,13d0 <altera_avalon_jtag_uart_read+0x2c>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    13c4:	10c00005 	stb	r3,0(r2)
    13c8:	10800044 	addi	r2,r2,1
    13cc:	003ff906 	br	13b4 <_gp+0xffff7c40>
    else if (ptr != buffer)
    13d0:	11400226 	beq	r2,r5,13dc <altera_avalon_jtag_uart_read+0x38>
      break;   
    
  }

  if (ptr != buffer)
    return ptr - buffer;
    13d4:	1145c83a 	sub	r2,r2,r5
    13d8:	f800283a 	ret

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
    else if(flags & O_NONBLOCK)
    13dc:	403ff526 	beq	r8,zero,13b4 <_gp+0xffff7c40>
    13e0:	00000106 	br	13e8 <altera_avalon_jtag_uart_read+0x44>
      break;   
    
  }

  if (ptr != buffer)
    13e4:	117ffb1e 	bne	r2,r5,13d4 <_gp+0xffff7c60>
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
    13e8:	39d0000c 	andi	r7,r7,16384
    13ec:	3800021e 	bne	r7,zero,13f8 <altera_avalon_jtag_uart_read+0x54>
    return -EWOULDBLOCK;
  else
    return -EIO;
    13f0:	00bffec4 	movi	r2,-5
    13f4:	f800283a 	ret
  }

  if (ptr != buffer)
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
    13f8:	00bffd44 	movi	r2,-11
  else
    return -EIO;
}
    13fc:	f800283a 	ret

00001400 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
    1400:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    1404:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
    1408:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    140c:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    1410:	2980072e 	bgeu	r5,r6,1430 <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    1414:	38c00037 	ldwio	r3,0(r7)
    1418:	18ffffec 	andhi	r3,r3,65535
    141c:	183ffc26 	beq	r3,zero,1410 <_gp+0xffff7c9c>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    1420:	28c00007 	ldb	r3,0(r5)
    1424:	20c00035 	stwio	r3,0(r4)
    1428:	29400044 	addi	r5,r5,1
    142c:	003ff806 	br	1410 <_gp+0xffff7c9c>

  return count;
}
    1430:	f800283a 	ret

00001434 <alt_busy_sleep>:
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    1434:	014666b4 	movhi	r5,6554
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    1438:	defffe04 	addi	sp,sp,-8
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    143c:	29666644 	addi	r5,r5,-26215
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    1440:	dc000015 	stw	r16,0(sp)
    1444:	dfc00115 	stw	ra,4(sp)
    1448:	2021883a 	mov	r16,r4
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    144c:	000160c0 	call	160c <__udivsi3>
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
    1450:	10001026 	beq	r2,zero,1494 <alt_busy_sleep+0x60>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    1454:	01600034 	movhi	r5,32768
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    1458:	013999b4 	movhi	r4,58982
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
    145c:	0007883a 	mov	r3,zero
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    1460:	297fffc4 	addi	r5,r5,-1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    1464:	211999c4 	addi	r4,r4,26215
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    1468:	297fffc4 	addi	r5,r5,-1
    146c:	283ffe1e 	bne	r5,zero,1468 <_gp+0xffff7cf4>
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    1470:	18c00044 	addi	r3,r3,1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    1474:	8121883a 	add	r16,r16,r4
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    1478:	18bffb16 	blt	r3,r2,1468 <_gp+0xffff7cf4>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
    147c:	8009883a 	mov	r4,r16
    1480:	01400144 	movi	r5,5
    1484:	000161c0 	call	161c <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    1488:	10bfffc4 	addi	r2,r2,-1
    148c:	103ffe1e 	bne	r2,zero,1488 <_gp+0xffff7d14>
    1490:	00000506 	br	14a8 <alt_busy_sleep+0x74>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
    1494:	8009883a 	mov	r4,r16
    1498:	01400144 	movi	r5,5
    149c:	000161c0 	call	161c <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    14a0:	10bfffc4 	addi	r2,r2,-1
    14a4:	00bffe16 	blt	zero,r2,14a0 <_gp+0xffff7d2c>
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
}
    14a8:	0005883a 	mov	r2,zero
    14ac:	dfc00117 	ldw	ra,4(sp)
    14b0:	dc000017 	ldw	r16,0(sp)
    14b4:	dec00204 	addi	sp,sp,8
    14b8:	f800283a 	ret

000014bc <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    14bc:	f800283a 	ret

000014c0 <alt_dev_null_write>:
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  return len;
}
    14c0:	3005883a 	mov	r2,r6
    14c4:	f800283a 	ret

000014c8 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    14c8:	f800283a 	ret

000014cc <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    14cc:	000170fa 	wrctl	ienable,zero
    14d0:	f800283a 	ret

000014d4 <strlen>:
    14d4:	2005883a 	mov	r2,r4
    14d8:	10c00007 	ldb	r3,0(r2)
    14dc:	18000226 	beq	r3,zero,14e8 <strlen+0x14>
    14e0:	10800044 	addi	r2,r2,1
    14e4:	003ffc06 	br	14d8 <_gp+0xffff7d64>
    14e8:	1105c83a 	sub	r2,r2,r4
    14ec:	f800283a 	ret

000014f0 <udivmodsi4>:
    14f0:	2900182e 	bgeu	r5,r4,1554 <udivmodsi4+0x64>
    14f4:	28001716 	blt	r5,zero,1554 <udivmodsi4+0x64>
    14f8:	00800804 	movi	r2,32
    14fc:	00c00044 	movi	r3,1
    1500:	00000206 	br	150c <udivmodsi4+0x1c>
    1504:	10001126 	beq	r2,zero,154c <udivmodsi4+0x5c>
    1508:	28000516 	blt	r5,zero,1520 <udivmodsi4+0x30>
    150c:	294b883a 	add	r5,r5,r5
    1510:	10bfffc4 	addi	r2,r2,-1
    1514:	18c7883a 	add	r3,r3,r3
    1518:	293ffa36 	bltu	r5,r4,1504 <_gp+0xffff7d90>
    151c:	18000b26 	beq	r3,zero,154c <udivmodsi4+0x5c>
    1520:	0005883a 	mov	r2,zero
    1524:	21400236 	bltu	r4,r5,1530 <udivmodsi4+0x40>
    1528:	2149c83a 	sub	r4,r4,r5
    152c:	10c4b03a 	or	r2,r2,r3
    1530:	1806d07a 	srli	r3,r3,1
    1534:	280ad07a 	srli	r5,r5,1
    1538:	183ffa1e 	bne	r3,zero,1524 <_gp+0xffff7db0>
    153c:	3000011e 	bne	r6,zero,1544 <udivmodsi4+0x54>
    1540:	f800283a 	ret
    1544:	2005883a 	mov	r2,r4
    1548:	f800283a 	ret
    154c:	0005883a 	mov	r2,zero
    1550:	003ffa06 	br	153c <_gp+0xffff7dc8>
    1554:	00c00044 	movi	r3,1
    1558:	003ff106 	br	1520 <_gp+0xffff7dac>

0000155c <__divsi3>:
    155c:	defffe04 	addi	sp,sp,-8
    1560:	dfc00115 	stw	ra,4(sp)
    1564:	dc000015 	stw	r16,0(sp)
    1568:	20000b16 	blt	r4,zero,1598 <__divsi3+0x3c>
    156c:	0021883a 	mov	r16,zero
    1570:	28000c16 	blt	r5,zero,15a4 <__divsi3+0x48>
    1574:	000d883a 	mov	r6,zero
    1578:	00014f00 	call	14f0 <udivmodsi4>
    157c:	0407c83a 	sub	r3,zero,r16
    1580:	1884f03a 	xor	r2,r3,r2
    1584:	1405883a 	add	r2,r2,r16
    1588:	dfc00117 	ldw	ra,4(sp)
    158c:	dc000017 	ldw	r16,0(sp)
    1590:	dec00204 	addi	sp,sp,8
    1594:	f800283a 	ret
    1598:	0109c83a 	sub	r4,zero,r4
    159c:	04000044 	movi	r16,1
    15a0:	283ff40e 	bge	r5,zero,1574 <_gp+0xffff7e00>
    15a4:	014bc83a 	sub	r5,zero,r5
    15a8:	8400005c 	xori	r16,r16,1
    15ac:	003ff106 	br	1574 <_gp+0xffff7e00>

000015b0 <__modsi3>:
    15b0:	defffd04 	addi	sp,sp,-12
    15b4:	dfc00215 	stw	ra,8(sp)
    15b8:	dc400115 	stw	r17,4(sp)
    15bc:	dc000015 	stw	r16,0(sp)
    15c0:	20000c16 	blt	r4,zero,15f4 <__modsi3+0x44>
    15c4:	0023883a 	mov	r17,zero
    15c8:	0021883a 	mov	r16,zero
    15cc:	28000d16 	blt	r5,zero,1604 <__modsi3+0x54>
    15d0:	01800044 	movi	r6,1
    15d4:	00014f00 	call	14f0 <udivmodsi4>
    15d8:	1404f03a 	xor	r2,r2,r16
    15dc:	8885883a 	add	r2,r17,r2
    15e0:	dfc00217 	ldw	ra,8(sp)
    15e4:	dc400117 	ldw	r17,4(sp)
    15e8:	dc000017 	ldw	r16,0(sp)
    15ec:	dec00304 	addi	sp,sp,12
    15f0:	f800283a 	ret
    15f4:	0109c83a 	sub	r4,zero,r4
    15f8:	04400044 	movi	r17,1
    15fc:	043fffc4 	movi	r16,-1
    1600:	283ff30e 	bge	r5,zero,15d0 <_gp+0xffff7e5c>
    1604:	014bc83a 	sub	r5,zero,r5
    1608:	003ff106 	br	15d0 <_gp+0xffff7e5c>

0000160c <__udivsi3>:
    160c:	000d883a 	mov	r6,zero
    1610:	00014f01 	jmpi	14f0 <udivmodsi4>

00001614 <__umodsi3>:
    1614:	01800044 	movi	r6,1
    1618:	00014f01 	jmpi	14f0 <udivmodsi4>

0000161c <__mulsi3>:
    161c:	0005883a 	mov	r2,zero
    1620:	20000726 	beq	r4,zero,1640 <__mulsi3+0x24>
    1624:	20c0004c 	andi	r3,r4,1
    1628:	2008d07a 	srli	r4,r4,1
    162c:	18000126 	beq	r3,zero,1634 <__mulsi3+0x18>
    1630:	1145883a 	add	r2,r2,r5
    1634:	294b883a 	add	r5,r5,r5
    1638:	203ffa1e 	bne	r4,zero,1624 <_gp+0xffff7eb0>
    163c:	f800283a 	ret
    1640:	f800283a 	ret
