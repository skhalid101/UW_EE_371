// microprocessor_mm_interconnect_0.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 15.1 189

`timescale 1 ps / 1 ps
module microprocessor_mm_interconnect_0 (
		input  wire        clk_0_clk_clk,                                     //                                   clk_0_clk.clk
		input  wire        nios2_processor_reset_reset_bridge_in_reset_reset, // nios2_processor_reset_reset_bridge_in_reset.reset
		input  wire [13:0] nios2_processor_data_master_address,               //                 nios2_processor_data_master.address
		output wire        nios2_processor_data_master_waitrequest,           //                                            .waitrequest
		input  wire [3:0]  nios2_processor_data_master_byteenable,            //                                            .byteenable
		input  wire        nios2_processor_data_master_read,                  //                                            .read
		output wire [31:0] nios2_processor_data_master_readdata,              //                                            .readdata
		input  wire        nios2_processor_data_master_write,                 //                                            .write
		input  wire [31:0] nios2_processor_data_master_writedata,             //                                            .writedata
		input  wire        nios2_processor_data_master_debugaccess,           //                                            .debugaccess
		input  wire [13:0] nios2_processor_instruction_master_address,        //          nios2_processor_instruction_master.address
		output wire        nios2_processor_instruction_master_waitrequest,    //                                            .waitrequest
		input  wire        nios2_processor_instruction_master_read,           //                                            .read
		output wire [31:0] nios2_processor_instruction_master_readdata,       //                                            .readdata
		output wire [1:0]  bathArriving_s1_address,                           //                             bathArriving_s1.address
		output wire        bathArriving_s1_write,                             //                                            .write
		input  wire [31:0] bathArriving_s1_readdata,                          //                                            .readdata
		output wire [31:0] bathArriving_s1_writedata,                         //                                            .writedata
		output wire        bathArriving_s1_chipselect,                        //                                            .chipselect
		output wire [1:0]  bathLeaving_s1_address,                            //                              bathLeaving_s1.address
		output wire        bathLeaving_s1_write,                              //                                            .write
		input  wire [31:0] bathLeaving_s1_readdata,                           //                                            .readdata
		output wire [31:0] bathLeaving_s1_writedata,                          //                                            .writedata
		output wire        bathLeaving_s1_chipselect,                         //                                            .chipselect
		output wire [1:0]  drainFinished_s1_address,                          //                            drainFinished_s1.address
		output wire        drainFinished_s1_write,                            //                                            .write
		input  wire [31:0] drainFinished_s1_readdata,                         //                                            .readdata
		output wire [31:0] drainFinished_s1_writedata,                        //                                            .writedata
		output wire        drainFinished_s1_chipselect,                       //                                            .chipselect
		output wire [1:0]  Draining_s1_address,                               //                                 Draining_s1.address
		input  wire [31:0] Draining_s1_readdata,                              //                                            .readdata
		output wire [1:0]  fillFinished_s1_address,                           //                             fillFinished_s1.address
		output wire        fillFinished_s1_write,                             //                                            .write
		input  wire [31:0] fillFinished_s1_readdata,                          //                                            .readdata
		output wire [31:0] fillFinished_s1_writedata,                         //                                            .writedata
		output wire        fillFinished_s1_chipselect,                        //                                            .chipselect
		output wire [1:0]  Filling_s1_address,                                //                                  Filling_s1.address
		input  wire [31:0] Filling_s1_readdata,                               //                                            .readdata
		output wire [1:0]  innerDoor_s1_address,                              //                                innerDoor_s1.address
		input  wire [31:0] innerDoor_s1_readdata,                             //                                            .readdata
		output wire [1:0]  innerDoorSwitch_s1_address,                        //                          innerDoorSwitch_s1.address
		output wire        innerDoorSwitch_s1_write,                          //                                            .write
		input  wire [31:0] innerDoorSwitch_s1_readdata,                       //                                            .readdata
		output wire [31:0] innerDoorSwitch_s1_writedata,                      //                                            .writedata
		output wire        innerDoorSwitch_s1_chipselect,                     //                                            .chipselect
		output wire [0:0]  jtag_uart_avalon_jtag_slave_address,               //                 jtag_uart_avalon_jtag_slave.address
		output wire        jtag_uart_avalon_jtag_slave_write,                 //                                            .write
		output wire        jtag_uart_avalon_jtag_slave_read,                  //                                            .read
		input  wire [31:0] jtag_uart_avalon_jtag_slave_readdata,              //                                            .readdata
		output wire [31:0] jtag_uart_avalon_jtag_slave_writedata,             //                                            .writedata
		input  wire        jtag_uart_avalon_jtag_slave_waitrequest,           //                                            .waitrequest
		output wire        jtag_uart_avalon_jtag_slave_chipselect,            //                                            .chipselect
		output wire [8:0]  nios2_processor_debug_mem_slave_address,           //             nios2_processor_debug_mem_slave.address
		output wire        nios2_processor_debug_mem_slave_write,             //                                            .write
		output wire        nios2_processor_debug_mem_slave_read,              //                                            .read
		input  wire [31:0] nios2_processor_debug_mem_slave_readdata,          //                                            .readdata
		output wire [31:0] nios2_processor_debug_mem_slave_writedata,         //                                            .writedata
		output wire [3:0]  nios2_processor_debug_mem_slave_byteenable,        //                                            .byteenable
		input  wire        nios2_processor_debug_mem_slave_waitrequest,       //                                            .waitrequest
		output wire        nios2_processor_debug_mem_slave_debugaccess,       //                                            .debugaccess
		output wire [9:0]  onchip_memory_s1_address,                          //                            onchip_memory_s1.address
		output wire        onchip_memory_s1_write,                            //                                            .write
		input  wire [31:0] onchip_memory_s1_readdata,                         //                                            .readdata
		output wire [31:0] onchip_memory_s1_writedata,                        //                                            .writedata
		output wire [3:0]  onchip_memory_s1_byteenable,                       //                                            .byteenable
		output wire        onchip_memory_s1_chipselect,                       //                                            .chipselect
		output wire        onchip_memory_s1_clken,                            //                                            .clken
		output wire [1:0]  outerDoor_s1_address,                              //                                outerDoor_s1.address
		input  wire [31:0] outerDoor_s1_readdata,                             //                                            .readdata
		output wire [1:0]  outerDoorSwitch_s1_address,                        //                          outerDoorSwitch_s1.address
		output wire        outerDoorSwitch_s1_write,                          //                                            .write
		input  wire [31:0] outerDoorSwitch_s1_readdata,                       //                                            .readdata
		output wire [31:0] outerDoorSwitch_s1_writedata,                      //                                            .writedata
		output wire        outerDoorSwitch_s1_chipselect,                     //                                            .chipselect
		output wire [1:0]  personCheck_s1_address,                            //                              personCheck_s1.address
		output wire        personCheck_s1_write,                              //                                            .write
		input  wire [31:0] personCheck_s1_readdata,                           //                                            .readdata
		output wire [31:0] personCheck_s1_writedata,                          //                                            .writedata
		output wire        personCheck_s1_chipselect,                         //                                            .chipselect
		output wire [1:0]  pressureCheck_s1_address,                          //                            pressureCheck_s1.address
		output wire        pressureCheck_s1_write,                            //                                            .write
		input  wire [31:0] pressureCheck_s1_readdata,                         //                                            .readdata
		output wire [31:0] pressureCheck_s1_writedata,                        //                                            .writedata
		output wire        pressureCheck_s1_chipselect,                       //                                            .chipselect
		output wire [1:0]  resetLeds_s1_address,                              //                                resetLeds_s1.address
		input  wire [31:0] resetLeds_s1_readdata,                             //                                            .readdata
		output wire [1:0]  waitFinished_s1_address,                           //                             waitFinished_s1.address
		output wire        waitFinished_s1_write,                             //                                            .write
		input  wire [31:0] waitFinished_s1_readdata,                          //                                            .readdata
		output wire [31:0] waitFinished_s1_writedata,                         //                                            .writedata
		output wire        waitFinished_s1_chipselect,                        //                                            .chipselect
		output wire [1:0]  waiting_s1_address,                                //                                  waiting_s1.address
		input  wire [31:0] waiting_s1_readdata                                //                                            .readdata
	);

	wire         nios2_processor_data_master_translator_avalon_universal_master_0_waitrequest;          // nios2_processor_data_master_agent:av_waitrequest -> nios2_processor_data_master_translator:uav_waitrequest
	wire  [31:0] nios2_processor_data_master_translator_avalon_universal_master_0_readdata;             // nios2_processor_data_master_agent:av_readdata -> nios2_processor_data_master_translator:uav_readdata
	wire         nios2_processor_data_master_translator_avalon_universal_master_0_debugaccess;          // nios2_processor_data_master_translator:uav_debugaccess -> nios2_processor_data_master_agent:av_debugaccess
	wire  [13:0] nios2_processor_data_master_translator_avalon_universal_master_0_address;              // nios2_processor_data_master_translator:uav_address -> nios2_processor_data_master_agent:av_address
	wire         nios2_processor_data_master_translator_avalon_universal_master_0_read;                 // nios2_processor_data_master_translator:uav_read -> nios2_processor_data_master_agent:av_read
	wire   [3:0] nios2_processor_data_master_translator_avalon_universal_master_0_byteenable;           // nios2_processor_data_master_translator:uav_byteenable -> nios2_processor_data_master_agent:av_byteenable
	wire         nios2_processor_data_master_translator_avalon_universal_master_0_readdatavalid;        // nios2_processor_data_master_agent:av_readdatavalid -> nios2_processor_data_master_translator:uav_readdatavalid
	wire         nios2_processor_data_master_translator_avalon_universal_master_0_lock;                 // nios2_processor_data_master_translator:uav_lock -> nios2_processor_data_master_agent:av_lock
	wire         nios2_processor_data_master_translator_avalon_universal_master_0_write;                // nios2_processor_data_master_translator:uav_write -> nios2_processor_data_master_agent:av_write
	wire  [31:0] nios2_processor_data_master_translator_avalon_universal_master_0_writedata;            // nios2_processor_data_master_translator:uav_writedata -> nios2_processor_data_master_agent:av_writedata
	wire   [2:0] nios2_processor_data_master_translator_avalon_universal_master_0_burstcount;           // nios2_processor_data_master_translator:uav_burstcount -> nios2_processor_data_master_agent:av_burstcount
	wire         rsp_mux_src_valid;                                                                     // rsp_mux:src_valid -> nios2_processor_data_master_agent:rp_valid
	wire  [93:0] rsp_mux_src_data;                                                                      // rsp_mux:src_data -> nios2_processor_data_master_agent:rp_data
	wire         rsp_mux_src_ready;                                                                     // nios2_processor_data_master_agent:rp_ready -> rsp_mux:src_ready
	wire  [17:0] rsp_mux_src_channel;                                                                   // rsp_mux:src_channel -> nios2_processor_data_master_agent:rp_channel
	wire         rsp_mux_src_startofpacket;                                                             // rsp_mux:src_startofpacket -> nios2_processor_data_master_agent:rp_startofpacket
	wire         rsp_mux_src_endofpacket;                                                               // rsp_mux:src_endofpacket -> nios2_processor_data_master_agent:rp_endofpacket
	wire         nios2_processor_instruction_master_translator_avalon_universal_master_0_waitrequest;   // nios2_processor_instruction_master_agent:av_waitrequest -> nios2_processor_instruction_master_translator:uav_waitrequest
	wire  [31:0] nios2_processor_instruction_master_translator_avalon_universal_master_0_readdata;      // nios2_processor_instruction_master_agent:av_readdata -> nios2_processor_instruction_master_translator:uav_readdata
	wire         nios2_processor_instruction_master_translator_avalon_universal_master_0_debugaccess;   // nios2_processor_instruction_master_translator:uav_debugaccess -> nios2_processor_instruction_master_agent:av_debugaccess
	wire  [13:0] nios2_processor_instruction_master_translator_avalon_universal_master_0_address;       // nios2_processor_instruction_master_translator:uav_address -> nios2_processor_instruction_master_agent:av_address
	wire         nios2_processor_instruction_master_translator_avalon_universal_master_0_read;          // nios2_processor_instruction_master_translator:uav_read -> nios2_processor_instruction_master_agent:av_read
	wire   [3:0] nios2_processor_instruction_master_translator_avalon_universal_master_0_byteenable;    // nios2_processor_instruction_master_translator:uav_byteenable -> nios2_processor_instruction_master_agent:av_byteenable
	wire         nios2_processor_instruction_master_translator_avalon_universal_master_0_readdatavalid; // nios2_processor_instruction_master_agent:av_readdatavalid -> nios2_processor_instruction_master_translator:uav_readdatavalid
	wire         nios2_processor_instruction_master_translator_avalon_universal_master_0_lock;          // nios2_processor_instruction_master_translator:uav_lock -> nios2_processor_instruction_master_agent:av_lock
	wire         nios2_processor_instruction_master_translator_avalon_universal_master_0_write;         // nios2_processor_instruction_master_translator:uav_write -> nios2_processor_instruction_master_agent:av_write
	wire  [31:0] nios2_processor_instruction_master_translator_avalon_universal_master_0_writedata;     // nios2_processor_instruction_master_translator:uav_writedata -> nios2_processor_instruction_master_agent:av_writedata
	wire   [2:0] nios2_processor_instruction_master_translator_avalon_universal_master_0_burstcount;    // nios2_processor_instruction_master_translator:uav_burstcount -> nios2_processor_instruction_master_agent:av_burstcount
	wire         rsp_mux_001_src_valid;                                                                 // rsp_mux_001:src_valid -> nios2_processor_instruction_master_agent:rp_valid
	wire  [93:0] rsp_mux_001_src_data;                                                                  // rsp_mux_001:src_data -> nios2_processor_instruction_master_agent:rp_data
	wire         rsp_mux_001_src_ready;                                                                 // nios2_processor_instruction_master_agent:rp_ready -> rsp_mux_001:src_ready
	wire  [17:0] rsp_mux_001_src_channel;                                                               // rsp_mux_001:src_channel -> nios2_processor_instruction_master_agent:rp_channel
	wire         rsp_mux_001_src_startofpacket;                                                         // rsp_mux_001:src_startofpacket -> nios2_processor_instruction_master_agent:rp_startofpacket
	wire         rsp_mux_001_src_endofpacket;                                                           // rsp_mux_001:src_endofpacket -> nios2_processor_instruction_master_agent:rp_endofpacket
	wire  [31:0] jtag_uart_avalon_jtag_slave_agent_m0_readdata;                                         // jtag_uart_avalon_jtag_slave_translator:uav_readdata -> jtag_uart_avalon_jtag_slave_agent:m0_readdata
	wire         jtag_uart_avalon_jtag_slave_agent_m0_waitrequest;                                      // jtag_uart_avalon_jtag_slave_translator:uav_waitrequest -> jtag_uart_avalon_jtag_slave_agent:m0_waitrequest
	wire         jtag_uart_avalon_jtag_slave_agent_m0_debugaccess;                                      // jtag_uart_avalon_jtag_slave_agent:m0_debugaccess -> jtag_uart_avalon_jtag_slave_translator:uav_debugaccess
	wire  [13:0] jtag_uart_avalon_jtag_slave_agent_m0_address;                                          // jtag_uart_avalon_jtag_slave_agent:m0_address -> jtag_uart_avalon_jtag_slave_translator:uav_address
	wire   [3:0] jtag_uart_avalon_jtag_slave_agent_m0_byteenable;                                       // jtag_uart_avalon_jtag_slave_agent:m0_byteenable -> jtag_uart_avalon_jtag_slave_translator:uav_byteenable
	wire         jtag_uart_avalon_jtag_slave_agent_m0_read;                                             // jtag_uart_avalon_jtag_slave_agent:m0_read -> jtag_uart_avalon_jtag_slave_translator:uav_read
	wire         jtag_uart_avalon_jtag_slave_agent_m0_readdatavalid;                                    // jtag_uart_avalon_jtag_slave_translator:uav_readdatavalid -> jtag_uart_avalon_jtag_slave_agent:m0_readdatavalid
	wire         jtag_uart_avalon_jtag_slave_agent_m0_lock;                                             // jtag_uart_avalon_jtag_slave_agent:m0_lock -> jtag_uart_avalon_jtag_slave_translator:uav_lock
	wire  [31:0] jtag_uart_avalon_jtag_slave_agent_m0_writedata;                                        // jtag_uart_avalon_jtag_slave_agent:m0_writedata -> jtag_uart_avalon_jtag_slave_translator:uav_writedata
	wire         jtag_uart_avalon_jtag_slave_agent_m0_write;                                            // jtag_uart_avalon_jtag_slave_agent:m0_write -> jtag_uart_avalon_jtag_slave_translator:uav_write
	wire   [2:0] jtag_uart_avalon_jtag_slave_agent_m0_burstcount;                                       // jtag_uart_avalon_jtag_slave_agent:m0_burstcount -> jtag_uart_avalon_jtag_slave_translator:uav_burstcount
	wire         jtag_uart_avalon_jtag_slave_agent_rf_source_valid;                                     // jtag_uart_avalon_jtag_slave_agent:rf_source_valid -> jtag_uart_avalon_jtag_slave_agent_rsp_fifo:in_valid
	wire  [94:0] jtag_uart_avalon_jtag_slave_agent_rf_source_data;                                      // jtag_uart_avalon_jtag_slave_agent:rf_source_data -> jtag_uart_avalon_jtag_slave_agent_rsp_fifo:in_data
	wire         jtag_uart_avalon_jtag_slave_agent_rf_source_ready;                                     // jtag_uart_avalon_jtag_slave_agent_rsp_fifo:in_ready -> jtag_uart_avalon_jtag_slave_agent:rf_source_ready
	wire         jtag_uart_avalon_jtag_slave_agent_rf_source_startofpacket;                             // jtag_uart_avalon_jtag_slave_agent:rf_source_startofpacket -> jtag_uart_avalon_jtag_slave_agent_rsp_fifo:in_startofpacket
	wire         jtag_uart_avalon_jtag_slave_agent_rf_source_endofpacket;                               // jtag_uart_avalon_jtag_slave_agent:rf_source_endofpacket -> jtag_uart_avalon_jtag_slave_agent_rsp_fifo:in_endofpacket
	wire         jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_valid;                                  // jtag_uart_avalon_jtag_slave_agent_rsp_fifo:out_valid -> jtag_uart_avalon_jtag_slave_agent:rf_sink_valid
	wire  [94:0] jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_data;                                   // jtag_uart_avalon_jtag_slave_agent_rsp_fifo:out_data -> jtag_uart_avalon_jtag_slave_agent:rf_sink_data
	wire         jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_ready;                                  // jtag_uart_avalon_jtag_slave_agent:rf_sink_ready -> jtag_uart_avalon_jtag_slave_agent_rsp_fifo:out_ready
	wire         jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket;                          // jtag_uart_avalon_jtag_slave_agent_rsp_fifo:out_startofpacket -> jtag_uart_avalon_jtag_slave_agent:rf_sink_startofpacket
	wire         jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket;                            // jtag_uart_avalon_jtag_slave_agent_rsp_fifo:out_endofpacket -> jtag_uart_avalon_jtag_slave_agent:rf_sink_endofpacket
	wire         cmd_mux_src_valid;                                                                     // cmd_mux:src_valid -> jtag_uart_avalon_jtag_slave_agent:cp_valid
	wire  [93:0] cmd_mux_src_data;                                                                      // cmd_mux:src_data -> jtag_uart_avalon_jtag_slave_agent:cp_data
	wire         cmd_mux_src_ready;                                                                     // jtag_uart_avalon_jtag_slave_agent:cp_ready -> cmd_mux:src_ready
	wire  [17:0] cmd_mux_src_channel;                                                                   // cmd_mux:src_channel -> jtag_uart_avalon_jtag_slave_agent:cp_channel
	wire         cmd_mux_src_startofpacket;                                                             // cmd_mux:src_startofpacket -> jtag_uart_avalon_jtag_slave_agent:cp_startofpacket
	wire         cmd_mux_src_endofpacket;                                                               // cmd_mux:src_endofpacket -> jtag_uart_avalon_jtag_slave_agent:cp_endofpacket
	wire  [31:0] nios2_processor_debug_mem_slave_agent_m0_readdata;                                     // nios2_processor_debug_mem_slave_translator:uav_readdata -> nios2_processor_debug_mem_slave_agent:m0_readdata
	wire         nios2_processor_debug_mem_slave_agent_m0_waitrequest;                                  // nios2_processor_debug_mem_slave_translator:uav_waitrequest -> nios2_processor_debug_mem_slave_agent:m0_waitrequest
	wire         nios2_processor_debug_mem_slave_agent_m0_debugaccess;                                  // nios2_processor_debug_mem_slave_agent:m0_debugaccess -> nios2_processor_debug_mem_slave_translator:uav_debugaccess
	wire  [13:0] nios2_processor_debug_mem_slave_agent_m0_address;                                      // nios2_processor_debug_mem_slave_agent:m0_address -> nios2_processor_debug_mem_slave_translator:uav_address
	wire   [3:0] nios2_processor_debug_mem_slave_agent_m0_byteenable;                                   // nios2_processor_debug_mem_slave_agent:m0_byteenable -> nios2_processor_debug_mem_slave_translator:uav_byteenable
	wire         nios2_processor_debug_mem_slave_agent_m0_read;                                         // nios2_processor_debug_mem_slave_agent:m0_read -> nios2_processor_debug_mem_slave_translator:uav_read
	wire         nios2_processor_debug_mem_slave_agent_m0_readdatavalid;                                // nios2_processor_debug_mem_slave_translator:uav_readdatavalid -> nios2_processor_debug_mem_slave_agent:m0_readdatavalid
	wire         nios2_processor_debug_mem_slave_agent_m0_lock;                                         // nios2_processor_debug_mem_slave_agent:m0_lock -> nios2_processor_debug_mem_slave_translator:uav_lock
	wire  [31:0] nios2_processor_debug_mem_slave_agent_m0_writedata;                                    // nios2_processor_debug_mem_slave_agent:m0_writedata -> nios2_processor_debug_mem_slave_translator:uav_writedata
	wire         nios2_processor_debug_mem_slave_agent_m0_write;                                        // nios2_processor_debug_mem_slave_agent:m0_write -> nios2_processor_debug_mem_slave_translator:uav_write
	wire   [2:0] nios2_processor_debug_mem_slave_agent_m0_burstcount;                                   // nios2_processor_debug_mem_slave_agent:m0_burstcount -> nios2_processor_debug_mem_slave_translator:uav_burstcount
	wire         nios2_processor_debug_mem_slave_agent_rf_source_valid;                                 // nios2_processor_debug_mem_slave_agent:rf_source_valid -> nios2_processor_debug_mem_slave_agent_rsp_fifo:in_valid
	wire  [94:0] nios2_processor_debug_mem_slave_agent_rf_source_data;                                  // nios2_processor_debug_mem_slave_agent:rf_source_data -> nios2_processor_debug_mem_slave_agent_rsp_fifo:in_data
	wire         nios2_processor_debug_mem_slave_agent_rf_source_ready;                                 // nios2_processor_debug_mem_slave_agent_rsp_fifo:in_ready -> nios2_processor_debug_mem_slave_agent:rf_source_ready
	wire         nios2_processor_debug_mem_slave_agent_rf_source_startofpacket;                         // nios2_processor_debug_mem_slave_agent:rf_source_startofpacket -> nios2_processor_debug_mem_slave_agent_rsp_fifo:in_startofpacket
	wire         nios2_processor_debug_mem_slave_agent_rf_source_endofpacket;                           // nios2_processor_debug_mem_slave_agent:rf_source_endofpacket -> nios2_processor_debug_mem_slave_agent_rsp_fifo:in_endofpacket
	wire         nios2_processor_debug_mem_slave_agent_rsp_fifo_out_valid;                              // nios2_processor_debug_mem_slave_agent_rsp_fifo:out_valid -> nios2_processor_debug_mem_slave_agent:rf_sink_valid
	wire  [94:0] nios2_processor_debug_mem_slave_agent_rsp_fifo_out_data;                               // nios2_processor_debug_mem_slave_agent_rsp_fifo:out_data -> nios2_processor_debug_mem_slave_agent:rf_sink_data
	wire         nios2_processor_debug_mem_slave_agent_rsp_fifo_out_ready;                              // nios2_processor_debug_mem_slave_agent:rf_sink_ready -> nios2_processor_debug_mem_slave_agent_rsp_fifo:out_ready
	wire         nios2_processor_debug_mem_slave_agent_rsp_fifo_out_startofpacket;                      // nios2_processor_debug_mem_slave_agent_rsp_fifo:out_startofpacket -> nios2_processor_debug_mem_slave_agent:rf_sink_startofpacket
	wire         nios2_processor_debug_mem_slave_agent_rsp_fifo_out_endofpacket;                        // nios2_processor_debug_mem_slave_agent_rsp_fifo:out_endofpacket -> nios2_processor_debug_mem_slave_agent:rf_sink_endofpacket
	wire         cmd_mux_001_src_valid;                                                                 // cmd_mux_001:src_valid -> nios2_processor_debug_mem_slave_agent:cp_valid
	wire  [93:0] cmd_mux_001_src_data;                                                                  // cmd_mux_001:src_data -> nios2_processor_debug_mem_slave_agent:cp_data
	wire         cmd_mux_001_src_ready;                                                                 // nios2_processor_debug_mem_slave_agent:cp_ready -> cmd_mux_001:src_ready
	wire  [17:0] cmd_mux_001_src_channel;                                                               // cmd_mux_001:src_channel -> nios2_processor_debug_mem_slave_agent:cp_channel
	wire         cmd_mux_001_src_startofpacket;                                                         // cmd_mux_001:src_startofpacket -> nios2_processor_debug_mem_slave_agent:cp_startofpacket
	wire         cmd_mux_001_src_endofpacket;                                                           // cmd_mux_001:src_endofpacket -> nios2_processor_debug_mem_slave_agent:cp_endofpacket
	wire  [31:0] onchip_memory_s1_agent_m0_readdata;                                                    // onchip_memory_s1_translator:uav_readdata -> onchip_memory_s1_agent:m0_readdata
	wire         onchip_memory_s1_agent_m0_waitrequest;                                                 // onchip_memory_s1_translator:uav_waitrequest -> onchip_memory_s1_agent:m0_waitrequest
	wire         onchip_memory_s1_agent_m0_debugaccess;                                                 // onchip_memory_s1_agent:m0_debugaccess -> onchip_memory_s1_translator:uav_debugaccess
	wire  [13:0] onchip_memory_s1_agent_m0_address;                                                     // onchip_memory_s1_agent:m0_address -> onchip_memory_s1_translator:uav_address
	wire   [3:0] onchip_memory_s1_agent_m0_byteenable;                                                  // onchip_memory_s1_agent:m0_byteenable -> onchip_memory_s1_translator:uav_byteenable
	wire         onchip_memory_s1_agent_m0_read;                                                        // onchip_memory_s1_agent:m0_read -> onchip_memory_s1_translator:uav_read
	wire         onchip_memory_s1_agent_m0_readdatavalid;                                               // onchip_memory_s1_translator:uav_readdatavalid -> onchip_memory_s1_agent:m0_readdatavalid
	wire         onchip_memory_s1_agent_m0_lock;                                                        // onchip_memory_s1_agent:m0_lock -> onchip_memory_s1_translator:uav_lock
	wire  [31:0] onchip_memory_s1_agent_m0_writedata;                                                   // onchip_memory_s1_agent:m0_writedata -> onchip_memory_s1_translator:uav_writedata
	wire         onchip_memory_s1_agent_m0_write;                                                       // onchip_memory_s1_agent:m0_write -> onchip_memory_s1_translator:uav_write
	wire   [2:0] onchip_memory_s1_agent_m0_burstcount;                                                  // onchip_memory_s1_agent:m0_burstcount -> onchip_memory_s1_translator:uav_burstcount
	wire         onchip_memory_s1_agent_rf_source_valid;                                                // onchip_memory_s1_agent:rf_source_valid -> onchip_memory_s1_agent_rsp_fifo:in_valid
	wire  [94:0] onchip_memory_s1_agent_rf_source_data;                                                 // onchip_memory_s1_agent:rf_source_data -> onchip_memory_s1_agent_rsp_fifo:in_data
	wire         onchip_memory_s1_agent_rf_source_ready;                                                // onchip_memory_s1_agent_rsp_fifo:in_ready -> onchip_memory_s1_agent:rf_source_ready
	wire         onchip_memory_s1_agent_rf_source_startofpacket;                                        // onchip_memory_s1_agent:rf_source_startofpacket -> onchip_memory_s1_agent_rsp_fifo:in_startofpacket
	wire         onchip_memory_s1_agent_rf_source_endofpacket;                                          // onchip_memory_s1_agent:rf_source_endofpacket -> onchip_memory_s1_agent_rsp_fifo:in_endofpacket
	wire         onchip_memory_s1_agent_rsp_fifo_out_valid;                                             // onchip_memory_s1_agent_rsp_fifo:out_valid -> onchip_memory_s1_agent:rf_sink_valid
	wire  [94:0] onchip_memory_s1_agent_rsp_fifo_out_data;                                              // onchip_memory_s1_agent_rsp_fifo:out_data -> onchip_memory_s1_agent:rf_sink_data
	wire         onchip_memory_s1_agent_rsp_fifo_out_ready;                                             // onchip_memory_s1_agent:rf_sink_ready -> onchip_memory_s1_agent_rsp_fifo:out_ready
	wire         onchip_memory_s1_agent_rsp_fifo_out_startofpacket;                                     // onchip_memory_s1_agent_rsp_fifo:out_startofpacket -> onchip_memory_s1_agent:rf_sink_startofpacket
	wire         onchip_memory_s1_agent_rsp_fifo_out_endofpacket;                                       // onchip_memory_s1_agent_rsp_fifo:out_endofpacket -> onchip_memory_s1_agent:rf_sink_endofpacket
	wire         cmd_mux_002_src_valid;                                                                 // cmd_mux_002:src_valid -> onchip_memory_s1_agent:cp_valid
	wire  [93:0] cmd_mux_002_src_data;                                                                  // cmd_mux_002:src_data -> onchip_memory_s1_agent:cp_data
	wire         cmd_mux_002_src_ready;                                                                 // onchip_memory_s1_agent:cp_ready -> cmd_mux_002:src_ready
	wire  [17:0] cmd_mux_002_src_channel;                                                               // cmd_mux_002:src_channel -> onchip_memory_s1_agent:cp_channel
	wire         cmd_mux_002_src_startofpacket;                                                         // cmd_mux_002:src_startofpacket -> onchip_memory_s1_agent:cp_startofpacket
	wire         cmd_mux_002_src_endofpacket;                                                           // cmd_mux_002:src_endofpacket -> onchip_memory_s1_agent:cp_endofpacket
	wire  [31:0] filling_s1_agent_m0_readdata;                                                          // Filling_s1_translator:uav_readdata -> Filling_s1_agent:m0_readdata
	wire         filling_s1_agent_m0_waitrequest;                                                       // Filling_s1_translator:uav_waitrequest -> Filling_s1_agent:m0_waitrequest
	wire         filling_s1_agent_m0_debugaccess;                                                       // Filling_s1_agent:m0_debugaccess -> Filling_s1_translator:uav_debugaccess
	wire  [13:0] filling_s1_agent_m0_address;                                                           // Filling_s1_agent:m0_address -> Filling_s1_translator:uav_address
	wire   [3:0] filling_s1_agent_m0_byteenable;                                                        // Filling_s1_agent:m0_byteenable -> Filling_s1_translator:uav_byteenable
	wire         filling_s1_agent_m0_read;                                                              // Filling_s1_agent:m0_read -> Filling_s1_translator:uav_read
	wire         filling_s1_agent_m0_readdatavalid;                                                     // Filling_s1_translator:uav_readdatavalid -> Filling_s1_agent:m0_readdatavalid
	wire         filling_s1_agent_m0_lock;                                                              // Filling_s1_agent:m0_lock -> Filling_s1_translator:uav_lock
	wire  [31:0] filling_s1_agent_m0_writedata;                                                         // Filling_s1_agent:m0_writedata -> Filling_s1_translator:uav_writedata
	wire         filling_s1_agent_m0_write;                                                             // Filling_s1_agent:m0_write -> Filling_s1_translator:uav_write
	wire   [2:0] filling_s1_agent_m0_burstcount;                                                        // Filling_s1_agent:m0_burstcount -> Filling_s1_translator:uav_burstcount
	wire         filling_s1_agent_rf_source_valid;                                                      // Filling_s1_agent:rf_source_valid -> Filling_s1_agent_rsp_fifo:in_valid
	wire  [94:0] filling_s1_agent_rf_source_data;                                                       // Filling_s1_agent:rf_source_data -> Filling_s1_agent_rsp_fifo:in_data
	wire         filling_s1_agent_rf_source_ready;                                                      // Filling_s1_agent_rsp_fifo:in_ready -> Filling_s1_agent:rf_source_ready
	wire         filling_s1_agent_rf_source_startofpacket;                                              // Filling_s1_agent:rf_source_startofpacket -> Filling_s1_agent_rsp_fifo:in_startofpacket
	wire         filling_s1_agent_rf_source_endofpacket;                                                // Filling_s1_agent:rf_source_endofpacket -> Filling_s1_agent_rsp_fifo:in_endofpacket
	wire         filling_s1_agent_rsp_fifo_out_valid;                                                   // Filling_s1_agent_rsp_fifo:out_valid -> Filling_s1_agent:rf_sink_valid
	wire  [94:0] filling_s1_agent_rsp_fifo_out_data;                                                    // Filling_s1_agent_rsp_fifo:out_data -> Filling_s1_agent:rf_sink_data
	wire         filling_s1_agent_rsp_fifo_out_ready;                                                   // Filling_s1_agent:rf_sink_ready -> Filling_s1_agent_rsp_fifo:out_ready
	wire         filling_s1_agent_rsp_fifo_out_startofpacket;                                           // Filling_s1_agent_rsp_fifo:out_startofpacket -> Filling_s1_agent:rf_sink_startofpacket
	wire         filling_s1_agent_rsp_fifo_out_endofpacket;                                             // Filling_s1_agent_rsp_fifo:out_endofpacket -> Filling_s1_agent:rf_sink_endofpacket
	wire         cmd_mux_003_src_valid;                                                                 // cmd_mux_003:src_valid -> Filling_s1_agent:cp_valid
	wire  [93:0] cmd_mux_003_src_data;                                                                  // cmd_mux_003:src_data -> Filling_s1_agent:cp_data
	wire         cmd_mux_003_src_ready;                                                                 // Filling_s1_agent:cp_ready -> cmd_mux_003:src_ready
	wire  [17:0] cmd_mux_003_src_channel;                                                               // cmd_mux_003:src_channel -> Filling_s1_agent:cp_channel
	wire         cmd_mux_003_src_startofpacket;                                                         // cmd_mux_003:src_startofpacket -> Filling_s1_agent:cp_startofpacket
	wire         cmd_mux_003_src_endofpacket;                                                           // cmd_mux_003:src_endofpacket -> Filling_s1_agent:cp_endofpacket
	wire  [31:0] draining_s1_agent_m0_readdata;                                                         // Draining_s1_translator:uav_readdata -> Draining_s1_agent:m0_readdata
	wire         draining_s1_agent_m0_waitrequest;                                                      // Draining_s1_translator:uav_waitrequest -> Draining_s1_agent:m0_waitrequest
	wire         draining_s1_agent_m0_debugaccess;                                                      // Draining_s1_agent:m0_debugaccess -> Draining_s1_translator:uav_debugaccess
	wire  [13:0] draining_s1_agent_m0_address;                                                          // Draining_s1_agent:m0_address -> Draining_s1_translator:uav_address
	wire   [3:0] draining_s1_agent_m0_byteenable;                                                       // Draining_s1_agent:m0_byteenable -> Draining_s1_translator:uav_byteenable
	wire         draining_s1_agent_m0_read;                                                             // Draining_s1_agent:m0_read -> Draining_s1_translator:uav_read
	wire         draining_s1_agent_m0_readdatavalid;                                                    // Draining_s1_translator:uav_readdatavalid -> Draining_s1_agent:m0_readdatavalid
	wire         draining_s1_agent_m0_lock;                                                             // Draining_s1_agent:m0_lock -> Draining_s1_translator:uav_lock
	wire  [31:0] draining_s1_agent_m0_writedata;                                                        // Draining_s1_agent:m0_writedata -> Draining_s1_translator:uav_writedata
	wire         draining_s1_agent_m0_write;                                                            // Draining_s1_agent:m0_write -> Draining_s1_translator:uav_write
	wire   [2:0] draining_s1_agent_m0_burstcount;                                                       // Draining_s1_agent:m0_burstcount -> Draining_s1_translator:uav_burstcount
	wire         draining_s1_agent_rf_source_valid;                                                     // Draining_s1_agent:rf_source_valid -> Draining_s1_agent_rsp_fifo:in_valid
	wire  [94:0] draining_s1_agent_rf_source_data;                                                      // Draining_s1_agent:rf_source_data -> Draining_s1_agent_rsp_fifo:in_data
	wire         draining_s1_agent_rf_source_ready;                                                     // Draining_s1_agent_rsp_fifo:in_ready -> Draining_s1_agent:rf_source_ready
	wire         draining_s1_agent_rf_source_startofpacket;                                             // Draining_s1_agent:rf_source_startofpacket -> Draining_s1_agent_rsp_fifo:in_startofpacket
	wire         draining_s1_agent_rf_source_endofpacket;                                               // Draining_s1_agent:rf_source_endofpacket -> Draining_s1_agent_rsp_fifo:in_endofpacket
	wire         draining_s1_agent_rsp_fifo_out_valid;                                                  // Draining_s1_agent_rsp_fifo:out_valid -> Draining_s1_agent:rf_sink_valid
	wire  [94:0] draining_s1_agent_rsp_fifo_out_data;                                                   // Draining_s1_agent_rsp_fifo:out_data -> Draining_s1_agent:rf_sink_data
	wire         draining_s1_agent_rsp_fifo_out_ready;                                                  // Draining_s1_agent:rf_sink_ready -> Draining_s1_agent_rsp_fifo:out_ready
	wire         draining_s1_agent_rsp_fifo_out_startofpacket;                                          // Draining_s1_agent_rsp_fifo:out_startofpacket -> Draining_s1_agent:rf_sink_startofpacket
	wire         draining_s1_agent_rsp_fifo_out_endofpacket;                                            // Draining_s1_agent_rsp_fifo:out_endofpacket -> Draining_s1_agent:rf_sink_endofpacket
	wire         cmd_mux_004_src_valid;                                                                 // cmd_mux_004:src_valid -> Draining_s1_agent:cp_valid
	wire  [93:0] cmd_mux_004_src_data;                                                                  // cmd_mux_004:src_data -> Draining_s1_agent:cp_data
	wire         cmd_mux_004_src_ready;                                                                 // Draining_s1_agent:cp_ready -> cmd_mux_004:src_ready
	wire  [17:0] cmd_mux_004_src_channel;                                                               // cmd_mux_004:src_channel -> Draining_s1_agent:cp_channel
	wire         cmd_mux_004_src_startofpacket;                                                         // cmd_mux_004:src_startofpacket -> Draining_s1_agent:cp_startofpacket
	wire         cmd_mux_004_src_endofpacket;                                                           // cmd_mux_004:src_endofpacket -> Draining_s1_agent:cp_endofpacket
	wire  [31:0] innerdoor_s1_agent_m0_readdata;                                                        // innerDoor_s1_translator:uav_readdata -> innerDoor_s1_agent:m0_readdata
	wire         innerdoor_s1_agent_m0_waitrequest;                                                     // innerDoor_s1_translator:uav_waitrequest -> innerDoor_s1_agent:m0_waitrequest
	wire         innerdoor_s1_agent_m0_debugaccess;                                                     // innerDoor_s1_agent:m0_debugaccess -> innerDoor_s1_translator:uav_debugaccess
	wire  [13:0] innerdoor_s1_agent_m0_address;                                                         // innerDoor_s1_agent:m0_address -> innerDoor_s1_translator:uav_address
	wire   [3:0] innerdoor_s1_agent_m0_byteenable;                                                      // innerDoor_s1_agent:m0_byteenable -> innerDoor_s1_translator:uav_byteenable
	wire         innerdoor_s1_agent_m0_read;                                                            // innerDoor_s1_agent:m0_read -> innerDoor_s1_translator:uav_read
	wire         innerdoor_s1_agent_m0_readdatavalid;                                                   // innerDoor_s1_translator:uav_readdatavalid -> innerDoor_s1_agent:m0_readdatavalid
	wire         innerdoor_s1_agent_m0_lock;                                                            // innerDoor_s1_agent:m0_lock -> innerDoor_s1_translator:uav_lock
	wire  [31:0] innerdoor_s1_agent_m0_writedata;                                                       // innerDoor_s1_agent:m0_writedata -> innerDoor_s1_translator:uav_writedata
	wire         innerdoor_s1_agent_m0_write;                                                           // innerDoor_s1_agent:m0_write -> innerDoor_s1_translator:uav_write
	wire   [2:0] innerdoor_s1_agent_m0_burstcount;                                                      // innerDoor_s1_agent:m0_burstcount -> innerDoor_s1_translator:uav_burstcount
	wire         innerdoor_s1_agent_rf_source_valid;                                                    // innerDoor_s1_agent:rf_source_valid -> innerDoor_s1_agent_rsp_fifo:in_valid
	wire  [94:0] innerdoor_s1_agent_rf_source_data;                                                     // innerDoor_s1_agent:rf_source_data -> innerDoor_s1_agent_rsp_fifo:in_data
	wire         innerdoor_s1_agent_rf_source_ready;                                                    // innerDoor_s1_agent_rsp_fifo:in_ready -> innerDoor_s1_agent:rf_source_ready
	wire         innerdoor_s1_agent_rf_source_startofpacket;                                            // innerDoor_s1_agent:rf_source_startofpacket -> innerDoor_s1_agent_rsp_fifo:in_startofpacket
	wire         innerdoor_s1_agent_rf_source_endofpacket;                                              // innerDoor_s1_agent:rf_source_endofpacket -> innerDoor_s1_agent_rsp_fifo:in_endofpacket
	wire         innerdoor_s1_agent_rsp_fifo_out_valid;                                                 // innerDoor_s1_agent_rsp_fifo:out_valid -> innerDoor_s1_agent:rf_sink_valid
	wire  [94:0] innerdoor_s1_agent_rsp_fifo_out_data;                                                  // innerDoor_s1_agent_rsp_fifo:out_data -> innerDoor_s1_agent:rf_sink_data
	wire         innerdoor_s1_agent_rsp_fifo_out_ready;                                                 // innerDoor_s1_agent:rf_sink_ready -> innerDoor_s1_agent_rsp_fifo:out_ready
	wire         innerdoor_s1_agent_rsp_fifo_out_startofpacket;                                         // innerDoor_s1_agent_rsp_fifo:out_startofpacket -> innerDoor_s1_agent:rf_sink_startofpacket
	wire         innerdoor_s1_agent_rsp_fifo_out_endofpacket;                                           // innerDoor_s1_agent_rsp_fifo:out_endofpacket -> innerDoor_s1_agent:rf_sink_endofpacket
	wire         cmd_mux_005_src_valid;                                                                 // cmd_mux_005:src_valid -> innerDoor_s1_agent:cp_valid
	wire  [93:0] cmd_mux_005_src_data;                                                                  // cmd_mux_005:src_data -> innerDoor_s1_agent:cp_data
	wire         cmd_mux_005_src_ready;                                                                 // innerDoor_s1_agent:cp_ready -> cmd_mux_005:src_ready
	wire  [17:0] cmd_mux_005_src_channel;                                                               // cmd_mux_005:src_channel -> innerDoor_s1_agent:cp_channel
	wire         cmd_mux_005_src_startofpacket;                                                         // cmd_mux_005:src_startofpacket -> innerDoor_s1_agent:cp_startofpacket
	wire         cmd_mux_005_src_endofpacket;                                                           // cmd_mux_005:src_endofpacket -> innerDoor_s1_agent:cp_endofpacket
	wire  [31:0] outerdoor_s1_agent_m0_readdata;                                                        // outerDoor_s1_translator:uav_readdata -> outerDoor_s1_agent:m0_readdata
	wire         outerdoor_s1_agent_m0_waitrequest;                                                     // outerDoor_s1_translator:uav_waitrequest -> outerDoor_s1_agent:m0_waitrequest
	wire         outerdoor_s1_agent_m0_debugaccess;                                                     // outerDoor_s1_agent:m0_debugaccess -> outerDoor_s1_translator:uav_debugaccess
	wire  [13:0] outerdoor_s1_agent_m0_address;                                                         // outerDoor_s1_agent:m0_address -> outerDoor_s1_translator:uav_address
	wire   [3:0] outerdoor_s1_agent_m0_byteenable;                                                      // outerDoor_s1_agent:m0_byteenable -> outerDoor_s1_translator:uav_byteenable
	wire         outerdoor_s1_agent_m0_read;                                                            // outerDoor_s1_agent:m0_read -> outerDoor_s1_translator:uav_read
	wire         outerdoor_s1_agent_m0_readdatavalid;                                                   // outerDoor_s1_translator:uav_readdatavalid -> outerDoor_s1_agent:m0_readdatavalid
	wire         outerdoor_s1_agent_m0_lock;                                                            // outerDoor_s1_agent:m0_lock -> outerDoor_s1_translator:uav_lock
	wire  [31:0] outerdoor_s1_agent_m0_writedata;                                                       // outerDoor_s1_agent:m0_writedata -> outerDoor_s1_translator:uav_writedata
	wire         outerdoor_s1_agent_m0_write;                                                           // outerDoor_s1_agent:m0_write -> outerDoor_s1_translator:uav_write
	wire   [2:0] outerdoor_s1_agent_m0_burstcount;                                                      // outerDoor_s1_agent:m0_burstcount -> outerDoor_s1_translator:uav_burstcount
	wire         outerdoor_s1_agent_rf_source_valid;                                                    // outerDoor_s1_agent:rf_source_valid -> outerDoor_s1_agent_rsp_fifo:in_valid
	wire  [94:0] outerdoor_s1_agent_rf_source_data;                                                     // outerDoor_s1_agent:rf_source_data -> outerDoor_s1_agent_rsp_fifo:in_data
	wire         outerdoor_s1_agent_rf_source_ready;                                                    // outerDoor_s1_agent_rsp_fifo:in_ready -> outerDoor_s1_agent:rf_source_ready
	wire         outerdoor_s1_agent_rf_source_startofpacket;                                            // outerDoor_s1_agent:rf_source_startofpacket -> outerDoor_s1_agent_rsp_fifo:in_startofpacket
	wire         outerdoor_s1_agent_rf_source_endofpacket;                                              // outerDoor_s1_agent:rf_source_endofpacket -> outerDoor_s1_agent_rsp_fifo:in_endofpacket
	wire         outerdoor_s1_agent_rsp_fifo_out_valid;                                                 // outerDoor_s1_agent_rsp_fifo:out_valid -> outerDoor_s1_agent:rf_sink_valid
	wire  [94:0] outerdoor_s1_agent_rsp_fifo_out_data;                                                  // outerDoor_s1_agent_rsp_fifo:out_data -> outerDoor_s1_agent:rf_sink_data
	wire         outerdoor_s1_agent_rsp_fifo_out_ready;                                                 // outerDoor_s1_agent:rf_sink_ready -> outerDoor_s1_agent_rsp_fifo:out_ready
	wire         outerdoor_s1_agent_rsp_fifo_out_startofpacket;                                         // outerDoor_s1_agent_rsp_fifo:out_startofpacket -> outerDoor_s1_agent:rf_sink_startofpacket
	wire         outerdoor_s1_agent_rsp_fifo_out_endofpacket;                                           // outerDoor_s1_agent_rsp_fifo:out_endofpacket -> outerDoor_s1_agent:rf_sink_endofpacket
	wire         cmd_mux_006_src_valid;                                                                 // cmd_mux_006:src_valid -> outerDoor_s1_agent:cp_valid
	wire  [93:0] cmd_mux_006_src_data;                                                                  // cmd_mux_006:src_data -> outerDoor_s1_agent:cp_data
	wire         cmd_mux_006_src_ready;                                                                 // outerDoor_s1_agent:cp_ready -> cmd_mux_006:src_ready
	wire  [17:0] cmd_mux_006_src_channel;                                                               // cmd_mux_006:src_channel -> outerDoor_s1_agent:cp_channel
	wire         cmd_mux_006_src_startofpacket;                                                         // cmd_mux_006:src_startofpacket -> outerDoor_s1_agent:cp_startofpacket
	wire         cmd_mux_006_src_endofpacket;                                                           // cmd_mux_006:src_endofpacket -> outerDoor_s1_agent:cp_endofpacket
	wire  [31:0] resetleds_s1_agent_m0_readdata;                                                        // resetLeds_s1_translator:uav_readdata -> resetLeds_s1_agent:m0_readdata
	wire         resetleds_s1_agent_m0_waitrequest;                                                     // resetLeds_s1_translator:uav_waitrequest -> resetLeds_s1_agent:m0_waitrequest
	wire         resetleds_s1_agent_m0_debugaccess;                                                     // resetLeds_s1_agent:m0_debugaccess -> resetLeds_s1_translator:uav_debugaccess
	wire  [13:0] resetleds_s1_agent_m0_address;                                                         // resetLeds_s1_agent:m0_address -> resetLeds_s1_translator:uav_address
	wire   [3:0] resetleds_s1_agent_m0_byteenable;                                                      // resetLeds_s1_agent:m0_byteenable -> resetLeds_s1_translator:uav_byteenable
	wire         resetleds_s1_agent_m0_read;                                                            // resetLeds_s1_agent:m0_read -> resetLeds_s1_translator:uav_read
	wire         resetleds_s1_agent_m0_readdatavalid;                                                   // resetLeds_s1_translator:uav_readdatavalid -> resetLeds_s1_agent:m0_readdatavalid
	wire         resetleds_s1_agent_m0_lock;                                                            // resetLeds_s1_agent:m0_lock -> resetLeds_s1_translator:uav_lock
	wire  [31:0] resetleds_s1_agent_m0_writedata;                                                       // resetLeds_s1_agent:m0_writedata -> resetLeds_s1_translator:uav_writedata
	wire         resetleds_s1_agent_m0_write;                                                           // resetLeds_s1_agent:m0_write -> resetLeds_s1_translator:uav_write
	wire   [2:0] resetleds_s1_agent_m0_burstcount;                                                      // resetLeds_s1_agent:m0_burstcount -> resetLeds_s1_translator:uav_burstcount
	wire         resetleds_s1_agent_rf_source_valid;                                                    // resetLeds_s1_agent:rf_source_valid -> resetLeds_s1_agent_rsp_fifo:in_valid
	wire  [94:0] resetleds_s1_agent_rf_source_data;                                                     // resetLeds_s1_agent:rf_source_data -> resetLeds_s1_agent_rsp_fifo:in_data
	wire         resetleds_s1_agent_rf_source_ready;                                                    // resetLeds_s1_agent_rsp_fifo:in_ready -> resetLeds_s1_agent:rf_source_ready
	wire         resetleds_s1_agent_rf_source_startofpacket;                                            // resetLeds_s1_agent:rf_source_startofpacket -> resetLeds_s1_agent_rsp_fifo:in_startofpacket
	wire         resetleds_s1_agent_rf_source_endofpacket;                                              // resetLeds_s1_agent:rf_source_endofpacket -> resetLeds_s1_agent_rsp_fifo:in_endofpacket
	wire         resetleds_s1_agent_rsp_fifo_out_valid;                                                 // resetLeds_s1_agent_rsp_fifo:out_valid -> resetLeds_s1_agent:rf_sink_valid
	wire  [94:0] resetleds_s1_agent_rsp_fifo_out_data;                                                  // resetLeds_s1_agent_rsp_fifo:out_data -> resetLeds_s1_agent:rf_sink_data
	wire         resetleds_s1_agent_rsp_fifo_out_ready;                                                 // resetLeds_s1_agent:rf_sink_ready -> resetLeds_s1_agent_rsp_fifo:out_ready
	wire         resetleds_s1_agent_rsp_fifo_out_startofpacket;                                         // resetLeds_s1_agent_rsp_fifo:out_startofpacket -> resetLeds_s1_agent:rf_sink_startofpacket
	wire         resetleds_s1_agent_rsp_fifo_out_endofpacket;                                           // resetLeds_s1_agent_rsp_fifo:out_endofpacket -> resetLeds_s1_agent:rf_sink_endofpacket
	wire         cmd_mux_007_src_valid;                                                                 // cmd_mux_007:src_valid -> resetLeds_s1_agent:cp_valid
	wire  [93:0] cmd_mux_007_src_data;                                                                  // cmd_mux_007:src_data -> resetLeds_s1_agent:cp_data
	wire         cmd_mux_007_src_ready;                                                                 // resetLeds_s1_agent:cp_ready -> cmd_mux_007:src_ready
	wire  [17:0] cmd_mux_007_src_channel;                                                               // cmd_mux_007:src_channel -> resetLeds_s1_agent:cp_channel
	wire         cmd_mux_007_src_startofpacket;                                                         // cmd_mux_007:src_startofpacket -> resetLeds_s1_agent:cp_startofpacket
	wire         cmd_mux_007_src_endofpacket;                                                           // cmd_mux_007:src_endofpacket -> resetLeds_s1_agent:cp_endofpacket
	wire  [31:0] bathleaving_s1_agent_m0_readdata;                                                      // bathLeaving_s1_translator:uav_readdata -> bathLeaving_s1_agent:m0_readdata
	wire         bathleaving_s1_agent_m0_waitrequest;                                                   // bathLeaving_s1_translator:uav_waitrequest -> bathLeaving_s1_agent:m0_waitrequest
	wire         bathleaving_s1_agent_m0_debugaccess;                                                   // bathLeaving_s1_agent:m0_debugaccess -> bathLeaving_s1_translator:uav_debugaccess
	wire  [13:0] bathleaving_s1_agent_m0_address;                                                       // bathLeaving_s1_agent:m0_address -> bathLeaving_s1_translator:uav_address
	wire   [3:0] bathleaving_s1_agent_m0_byteenable;                                                    // bathLeaving_s1_agent:m0_byteenable -> bathLeaving_s1_translator:uav_byteenable
	wire         bathleaving_s1_agent_m0_read;                                                          // bathLeaving_s1_agent:m0_read -> bathLeaving_s1_translator:uav_read
	wire         bathleaving_s1_agent_m0_readdatavalid;                                                 // bathLeaving_s1_translator:uav_readdatavalid -> bathLeaving_s1_agent:m0_readdatavalid
	wire         bathleaving_s1_agent_m0_lock;                                                          // bathLeaving_s1_agent:m0_lock -> bathLeaving_s1_translator:uav_lock
	wire  [31:0] bathleaving_s1_agent_m0_writedata;                                                     // bathLeaving_s1_agent:m0_writedata -> bathLeaving_s1_translator:uav_writedata
	wire         bathleaving_s1_agent_m0_write;                                                         // bathLeaving_s1_agent:m0_write -> bathLeaving_s1_translator:uav_write
	wire   [2:0] bathleaving_s1_agent_m0_burstcount;                                                    // bathLeaving_s1_agent:m0_burstcount -> bathLeaving_s1_translator:uav_burstcount
	wire         bathleaving_s1_agent_rf_source_valid;                                                  // bathLeaving_s1_agent:rf_source_valid -> bathLeaving_s1_agent_rsp_fifo:in_valid
	wire  [94:0] bathleaving_s1_agent_rf_source_data;                                                   // bathLeaving_s1_agent:rf_source_data -> bathLeaving_s1_agent_rsp_fifo:in_data
	wire         bathleaving_s1_agent_rf_source_ready;                                                  // bathLeaving_s1_agent_rsp_fifo:in_ready -> bathLeaving_s1_agent:rf_source_ready
	wire         bathleaving_s1_agent_rf_source_startofpacket;                                          // bathLeaving_s1_agent:rf_source_startofpacket -> bathLeaving_s1_agent_rsp_fifo:in_startofpacket
	wire         bathleaving_s1_agent_rf_source_endofpacket;                                            // bathLeaving_s1_agent:rf_source_endofpacket -> bathLeaving_s1_agent_rsp_fifo:in_endofpacket
	wire         bathleaving_s1_agent_rsp_fifo_out_valid;                                               // bathLeaving_s1_agent_rsp_fifo:out_valid -> bathLeaving_s1_agent:rf_sink_valid
	wire  [94:0] bathleaving_s1_agent_rsp_fifo_out_data;                                                // bathLeaving_s1_agent_rsp_fifo:out_data -> bathLeaving_s1_agent:rf_sink_data
	wire         bathleaving_s1_agent_rsp_fifo_out_ready;                                               // bathLeaving_s1_agent:rf_sink_ready -> bathLeaving_s1_agent_rsp_fifo:out_ready
	wire         bathleaving_s1_agent_rsp_fifo_out_startofpacket;                                       // bathLeaving_s1_agent_rsp_fifo:out_startofpacket -> bathLeaving_s1_agent:rf_sink_startofpacket
	wire         bathleaving_s1_agent_rsp_fifo_out_endofpacket;                                         // bathLeaving_s1_agent_rsp_fifo:out_endofpacket -> bathLeaving_s1_agent:rf_sink_endofpacket
	wire         cmd_mux_008_src_valid;                                                                 // cmd_mux_008:src_valid -> bathLeaving_s1_agent:cp_valid
	wire  [93:0] cmd_mux_008_src_data;                                                                  // cmd_mux_008:src_data -> bathLeaving_s1_agent:cp_data
	wire         cmd_mux_008_src_ready;                                                                 // bathLeaving_s1_agent:cp_ready -> cmd_mux_008:src_ready
	wire  [17:0] cmd_mux_008_src_channel;                                                               // cmd_mux_008:src_channel -> bathLeaving_s1_agent:cp_channel
	wire         cmd_mux_008_src_startofpacket;                                                         // cmd_mux_008:src_startofpacket -> bathLeaving_s1_agent:cp_startofpacket
	wire         cmd_mux_008_src_endofpacket;                                                           // cmd_mux_008:src_endofpacket -> bathLeaving_s1_agent:cp_endofpacket
	wire  [31:0] batharriving_s1_agent_m0_readdata;                                                     // bathArriving_s1_translator:uav_readdata -> bathArriving_s1_agent:m0_readdata
	wire         batharriving_s1_agent_m0_waitrequest;                                                  // bathArriving_s1_translator:uav_waitrequest -> bathArriving_s1_agent:m0_waitrequest
	wire         batharriving_s1_agent_m0_debugaccess;                                                  // bathArriving_s1_agent:m0_debugaccess -> bathArriving_s1_translator:uav_debugaccess
	wire  [13:0] batharriving_s1_agent_m0_address;                                                      // bathArriving_s1_agent:m0_address -> bathArriving_s1_translator:uav_address
	wire   [3:0] batharriving_s1_agent_m0_byteenable;                                                   // bathArriving_s1_agent:m0_byteenable -> bathArriving_s1_translator:uav_byteenable
	wire         batharriving_s1_agent_m0_read;                                                         // bathArriving_s1_agent:m0_read -> bathArriving_s1_translator:uav_read
	wire         batharriving_s1_agent_m0_readdatavalid;                                                // bathArriving_s1_translator:uav_readdatavalid -> bathArriving_s1_agent:m0_readdatavalid
	wire         batharriving_s1_agent_m0_lock;                                                         // bathArriving_s1_agent:m0_lock -> bathArriving_s1_translator:uav_lock
	wire  [31:0] batharriving_s1_agent_m0_writedata;                                                    // bathArriving_s1_agent:m0_writedata -> bathArriving_s1_translator:uav_writedata
	wire         batharriving_s1_agent_m0_write;                                                        // bathArriving_s1_agent:m0_write -> bathArriving_s1_translator:uav_write
	wire   [2:0] batharriving_s1_agent_m0_burstcount;                                                   // bathArriving_s1_agent:m0_burstcount -> bathArriving_s1_translator:uav_burstcount
	wire         batharriving_s1_agent_rf_source_valid;                                                 // bathArriving_s1_agent:rf_source_valid -> bathArriving_s1_agent_rsp_fifo:in_valid
	wire  [94:0] batharriving_s1_agent_rf_source_data;                                                  // bathArriving_s1_agent:rf_source_data -> bathArriving_s1_agent_rsp_fifo:in_data
	wire         batharriving_s1_agent_rf_source_ready;                                                 // bathArriving_s1_agent_rsp_fifo:in_ready -> bathArriving_s1_agent:rf_source_ready
	wire         batharriving_s1_agent_rf_source_startofpacket;                                         // bathArriving_s1_agent:rf_source_startofpacket -> bathArriving_s1_agent_rsp_fifo:in_startofpacket
	wire         batharriving_s1_agent_rf_source_endofpacket;                                           // bathArriving_s1_agent:rf_source_endofpacket -> bathArriving_s1_agent_rsp_fifo:in_endofpacket
	wire         batharriving_s1_agent_rsp_fifo_out_valid;                                              // bathArriving_s1_agent_rsp_fifo:out_valid -> bathArriving_s1_agent:rf_sink_valid
	wire  [94:0] batharriving_s1_agent_rsp_fifo_out_data;                                               // bathArriving_s1_agent_rsp_fifo:out_data -> bathArriving_s1_agent:rf_sink_data
	wire         batharriving_s1_agent_rsp_fifo_out_ready;                                              // bathArriving_s1_agent:rf_sink_ready -> bathArriving_s1_agent_rsp_fifo:out_ready
	wire         batharriving_s1_agent_rsp_fifo_out_startofpacket;                                      // bathArriving_s1_agent_rsp_fifo:out_startofpacket -> bathArriving_s1_agent:rf_sink_startofpacket
	wire         batharriving_s1_agent_rsp_fifo_out_endofpacket;                                        // bathArriving_s1_agent_rsp_fifo:out_endofpacket -> bathArriving_s1_agent:rf_sink_endofpacket
	wire         cmd_mux_009_src_valid;                                                                 // cmd_mux_009:src_valid -> bathArriving_s1_agent:cp_valid
	wire  [93:0] cmd_mux_009_src_data;                                                                  // cmd_mux_009:src_data -> bathArriving_s1_agent:cp_data
	wire         cmd_mux_009_src_ready;                                                                 // bathArriving_s1_agent:cp_ready -> cmd_mux_009:src_ready
	wire  [17:0] cmd_mux_009_src_channel;                                                               // cmd_mux_009:src_channel -> bathArriving_s1_agent:cp_channel
	wire         cmd_mux_009_src_startofpacket;                                                         // cmd_mux_009:src_startofpacket -> bathArriving_s1_agent:cp_startofpacket
	wire         cmd_mux_009_src_endofpacket;                                                           // cmd_mux_009:src_endofpacket -> bathArriving_s1_agent:cp_endofpacket
	wire  [31:0] personcheck_s1_agent_m0_readdata;                                                      // personCheck_s1_translator:uav_readdata -> personCheck_s1_agent:m0_readdata
	wire         personcheck_s1_agent_m0_waitrequest;                                                   // personCheck_s1_translator:uav_waitrequest -> personCheck_s1_agent:m0_waitrequest
	wire         personcheck_s1_agent_m0_debugaccess;                                                   // personCheck_s1_agent:m0_debugaccess -> personCheck_s1_translator:uav_debugaccess
	wire  [13:0] personcheck_s1_agent_m0_address;                                                       // personCheck_s1_agent:m0_address -> personCheck_s1_translator:uav_address
	wire   [3:0] personcheck_s1_agent_m0_byteenable;                                                    // personCheck_s1_agent:m0_byteenable -> personCheck_s1_translator:uav_byteenable
	wire         personcheck_s1_agent_m0_read;                                                          // personCheck_s1_agent:m0_read -> personCheck_s1_translator:uav_read
	wire         personcheck_s1_agent_m0_readdatavalid;                                                 // personCheck_s1_translator:uav_readdatavalid -> personCheck_s1_agent:m0_readdatavalid
	wire         personcheck_s1_agent_m0_lock;                                                          // personCheck_s1_agent:m0_lock -> personCheck_s1_translator:uav_lock
	wire  [31:0] personcheck_s1_agent_m0_writedata;                                                     // personCheck_s1_agent:m0_writedata -> personCheck_s1_translator:uav_writedata
	wire         personcheck_s1_agent_m0_write;                                                         // personCheck_s1_agent:m0_write -> personCheck_s1_translator:uav_write
	wire   [2:0] personcheck_s1_agent_m0_burstcount;                                                    // personCheck_s1_agent:m0_burstcount -> personCheck_s1_translator:uav_burstcount
	wire         personcheck_s1_agent_rf_source_valid;                                                  // personCheck_s1_agent:rf_source_valid -> personCheck_s1_agent_rsp_fifo:in_valid
	wire  [94:0] personcheck_s1_agent_rf_source_data;                                                   // personCheck_s1_agent:rf_source_data -> personCheck_s1_agent_rsp_fifo:in_data
	wire         personcheck_s1_agent_rf_source_ready;                                                  // personCheck_s1_agent_rsp_fifo:in_ready -> personCheck_s1_agent:rf_source_ready
	wire         personcheck_s1_agent_rf_source_startofpacket;                                          // personCheck_s1_agent:rf_source_startofpacket -> personCheck_s1_agent_rsp_fifo:in_startofpacket
	wire         personcheck_s1_agent_rf_source_endofpacket;                                            // personCheck_s1_agent:rf_source_endofpacket -> personCheck_s1_agent_rsp_fifo:in_endofpacket
	wire         personcheck_s1_agent_rsp_fifo_out_valid;                                               // personCheck_s1_agent_rsp_fifo:out_valid -> personCheck_s1_agent:rf_sink_valid
	wire  [94:0] personcheck_s1_agent_rsp_fifo_out_data;                                                // personCheck_s1_agent_rsp_fifo:out_data -> personCheck_s1_agent:rf_sink_data
	wire         personcheck_s1_agent_rsp_fifo_out_ready;                                               // personCheck_s1_agent:rf_sink_ready -> personCheck_s1_agent_rsp_fifo:out_ready
	wire         personcheck_s1_agent_rsp_fifo_out_startofpacket;                                       // personCheck_s1_agent_rsp_fifo:out_startofpacket -> personCheck_s1_agent:rf_sink_startofpacket
	wire         personcheck_s1_agent_rsp_fifo_out_endofpacket;                                         // personCheck_s1_agent_rsp_fifo:out_endofpacket -> personCheck_s1_agent:rf_sink_endofpacket
	wire         cmd_mux_010_src_valid;                                                                 // cmd_mux_010:src_valid -> personCheck_s1_agent:cp_valid
	wire  [93:0] cmd_mux_010_src_data;                                                                  // cmd_mux_010:src_data -> personCheck_s1_agent:cp_data
	wire         cmd_mux_010_src_ready;                                                                 // personCheck_s1_agent:cp_ready -> cmd_mux_010:src_ready
	wire  [17:0] cmd_mux_010_src_channel;                                                               // cmd_mux_010:src_channel -> personCheck_s1_agent:cp_channel
	wire         cmd_mux_010_src_startofpacket;                                                         // cmd_mux_010:src_startofpacket -> personCheck_s1_agent:cp_startofpacket
	wire         cmd_mux_010_src_endofpacket;                                                           // cmd_mux_010:src_endofpacket -> personCheck_s1_agent:cp_endofpacket
	wire  [31:0] pressurecheck_s1_agent_m0_readdata;                                                    // pressureCheck_s1_translator:uav_readdata -> pressureCheck_s1_agent:m0_readdata
	wire         pressurecheck_s1_agent_m0_waitrequest;                                                 // pressureCheck_s1_translator:uav_waitrequest -> pressureCheck_s1_agent:m0_waitrequest
	wire         pressurecheck_s1_agent_m0_debugaccess;                                                 // pressureCheck_s1_agent:m0_debugaccess -> pressureCheck_s1_translator:uav_debugaccess
	wire  [13:0] pressurecheck_s1_agent_m0_address;                                                     // pressureCheck_s1_agent:m0_address -> pressureCheck_s1_translator:uav_address
	wire   [3:0] pressurecheck_s1_agent_m0_byteenable;                                                  // pressureCheck_s1_agent:m0_byteenable -> pressureCheck_s1_translator:uav_byteenable
	wire         pressurecheck_s1_agent_m0_read;                                                        // pressureCheck_s1_agent:m0_read -> pressureCheck_s1_translator:uav_read
	wire         pressurecheck_s1_agent_m0_readdatavalid;                                               // pressureCheck_s1_translator:uav_readdatavalid -> pressureCheck_s1_agent:m0_readdatavalid
	wire         pressurecheck_s1_agent_m0_lock;                                                        // pressureCheck_s1_agent:m0_lock -> pressureCheck_s1_translator:uav_lock
	wire  [31:0] pressurecheck_s1_agent_m0_writedata;                                                   // pressureCheck_s1_agent:m0_writedata -> pressureCheck_s1_translator:uav_writedata
	wire         pressurecheck_s1_agent_m0_write;                                                       // pressureCheck_s1_agent:m0_write -> pressureCheck_s1_translator:uav_write
	wire   [2:0] pressurecheck_s1_agent_m0_burstcount;                                                  // pressureCheck_s1_agent:m0_burstcount -> pressureCheck_s1_translator:uav_burstcount
	wire         pressurecheck_s1_agent_rf_source_valid;                                                // pressureCheck_s1_agent:rf_source_valid -> pressureCheck_s1_agent_rsp_fifo:in_valid
	wire  [94:0] pressurecheck_s1_agent_rf_source_data;                                                 // pressureCheck_s1_agent:rf_source_data -> pressureCheck_s1_agent_rsp_fifo:in_data
	wire         pressurecheck_s1_agent_rf_source_ready;                                                // pressureCheck_s1_agent_rsp_fifo:in_ready -> pressureCheck_s1_agent:rf_source_ready
	wire         pressurecheck_s1_agent_rf_source_startofpacket;                                        // pressureCheck_s1_agent:rf_source_startofpacket -> pressureCheck_s1_agent_rsp_fifo:in_startofpacket
	wire         pressurecheck_s1_agent_rf_source_endofpacket;                                          // pressureCheck_s1_agent:rf_source_endofpacket -> pressureCheck_s1_agent_rsp_fifo:in_endofpacket
	wire         pressurecheck_s1_agent_rsp_fifo_out_valid;                                             // pressureCheck_s1_agent_rsp_fifo:out_valid -> pressureCheck_s1_agent:rf_sink_valid
	wire  [94:0] pressurecheck_s1_agent_rsp_fifo_out_data;                                              // pressureCheck_s1_agent_rsp_fifo:out_data -> pressureCheck_s1_agent:rf_sink_data
	wire         pressurecheck_s1_agent_rsp_fifo_out_ready;                                             // pressureCheck_s1_agent:rf_sink_ready -> pressureCheck_s1_agent_rsp_fifo:out_ready
	wire         pressurecheck_s1_agent_rsp_fifo_out_startofpacket;                                     // pressureCheck_s1_agent_rsp_fifo:out_startofpacket -> pressureCheck_s1_agent:rf_sink_startofpacket
	wire         pressurecheck_s1_agent_rsp_fifo_out_endofpacket;                                       // pressureCheck_s1_agent_rsp_fifo:out_endofpacket -> pressureCheck_s1_agent:rf_sink_endofpacket
	wire         cmd_mux_011_src_valid;                                                                 // cmd_mux_011:src_valid -> pressureCheck_s1_agent:cp_valid
	wire  [93:0] cmd_mux_011_src_data;                                                                  // cmd_mux_011:src_data -> pressureCheck_s1_agent:cp_data
	wire         cmd_mux_011_src_ready;                                                                 // pressureCheck_s1_agent:cp_ready -> cmd_mux_011:src_ready
	wire  [17:0] cmd_mux_011_src_channel;                                                               // cmd_mux_011:src_channel -> pressureCheck_s1_agent:cp_channel
	wire         cmd_mux_011_src_startofpacket;                                                         // cmd_mux_011:src_startofpacket -> pressureCheck_s1_agent:cp_startofpacket
	wire         cmd_mux_011_src_endofpacket;                                                           // cmd_mux_011:src_endofpacket -> pressureCheck_s1_agent:cp_endofpacket
	wire  [31:0] innerdoorswitch_s1_agent_m0_readdata;                                                  // innerDoorSwitch_s1_translator:uav_readdata -> innerDoorSwitch_s1_agent:m0_readdata
	wire         innerdoorswitch_s1_agent_m0_waitrequest;                                               // innerDoorSwitch_s1_translator:uav_waitrequest -> innerDoorSwitch_s1_agent:m0_waitrequest
	wire         innerdoorswitch_s1_agent_m0_debugaccess;                                               // innerDoorSwitch_s1_agent:m0_debugaccess -> innerDoorSwitch_s1_translator:uav_debugaccess
	wire  [13:0] innerdoorswitch_s1_agent_m0_address;                                                   // innerDoorSwitch_s1_agent:m0_address -> innerDoorSwitch_s1_translator:uav_address
	wire   [3:0] innerdoorswitch_s1_agent_m0_byteenable;                                                // innerDoorSwitch_s1_agent:m0_byteenable -> innerDoorSwitch_s1_translator:uav_byteenable
	wire         innerdoorswitch_s1_agent_m0_read;                                                      // innerDoorSwitch_s1_agent:m0_read -> innerDoorSwitch_s1_translator:uav_read
	wire         innerdoorswitch_s1_agent_m0_readdatavalid;                                             // innerDoorSwitch_s1_translator:uav_readdatavalid -> innerDoorSwitch_s1_agent:m0_readdatavalid
	wire         innerdoorswitch_s1_agent_m0_lock;                                                      // innerDoorSwitch_s1_agent:m0_lock -> innerDoorSwitch_s1_translator:uav_lock
	wire  [31:0] innerdoorswitch_s1_agent_m0_writedata;                                                 // innerDoorSwitch_s1_agent:m0_writedata -> innerDoorSwitch_s1_translator:uav_writedata
	wire         innerdoorswitch_s1_agent_m0_write;                                                     // innerDoorSwitch_s1_agent:m0_write -> innerDoorSwitch_s1_translator:uav_write
	wire   [2:0] innerdoorswitch_s1_agent_m0_burstcount;                                                // innerDoorSwitch_s1_agent:m0_burstcount -> innerDoorSwitch_s1_translator:uav_burstcount
	wire         innerdoorswitch_s1_agent_rf_source_valid;                                              // innerDoorSwitch_s1_agent:rf_source_valid -> innerDoorSwitch_s1_agent_rsp_fifo:in_valid
	wire  [94:0] innerdoorswitch_s1_agent_rf_source_data;                                               // innerDoorSwitch_s1_agent:rf_source_data -> innerDoorSwitch_s1_agent_rsp_fifo:in_data
	wire         innerdoorswitch_s1_agent_rf_source_ready;                                              // innerDoorSwitch_s1_agent_rsp_fifo:in_ready -> innerDoorSwitch_s1_agent:rf_source_ready
	wire         innerdoorswitch_s1_agent_rf_source_startofpacket;                                      // innerDoorSwitch_s1_agent:rf_source_startofpacket -> innerDoorSwitch_s1_agent_rsp_fifo:in_startofpacket
	wire         innerdoorswitch_s1_agent_rf_source_endofpacket;                                        // innerDoorSwitch_s1_agent:rf_source_endofpacket -> innerDoorSwitch_s1_agent_rsp_fifo:in_endofpacket
	wire         innerdoorswitch_s1_agent_rsp_fifo_out_valid;                                           // innerDoorSwitch_s1_agent_rsp_fifo:out_valid -> innerDoorSwitch_s1_agent:rf_sink_valid
	wire  [94:0] innerdoorswitch_s1_agent_rsp_fifo_out_data;                                            // innerDoorSwitch_s1_agent_rsp_fifo:out_data -> innerDoorSwitch_s1_agent:rf_sink_data
	wire         innerdoorswitch_s1_agent_rsp_fifo_out_ready;                                           // innerDoorSwitch_s1_agent:rf_sink_ready -> innerDoorSwitch_s1_agent_rsp_fifo:out_ready
	wire         innerdoorswitch_s1_agent_rsp_fifo_out_startofpacket;                                   // innerDoorSwitch_s1_agent_rsp_fifo:out_startofpacket -> innerDoorSwitch_s1_agent:rf_sink_startofpacket
	wire         innerdoorswitch_s1_agent_rsp_fifo_out_endofpacket;                                     // innerDoorSwitch_s1_agent_rsp_fifo:out_endofpacket -> innerDoorSwitch_s1_agent:rf_sink_endofpacket
	wire         cmd_mux_012_src_valid;                                                                 // cmd_mux_012:src_valid -> innerDoorSwitch_s1_agent:cp_valid
	wire  [93:0] cmd_mux_012_src_data;                                                                  // cmd_mux_012:src_data -> innerDoorSwitch_s1_agent:cp_data
	wire         cmd_mux_012_src_ready;                                                                 // innerDoorSwitch_s1_agent:cp_ready -> cmd_mux_012:src_ready
	wire  [17:0] cmd_mux_012_src_channel;                                                               // cmd_mux_012:src_channel -> innerDoorSwitch_s1_agent:cp_channel
	wire         cmd_mux_012_src_startofpacket;                                                         // cmd_mux_012:src_startofpacket -> innerDoorSwitch_s1_agent:cp_startofpacket
	wire         cmd_mux_012_src_endofpacket;                                                           // cmd_mux_012:src_endofpacket -> innerDoorSwitch_s1_agent:cp_endofpacket
	wire  [31:0] outerdoorswitch_s1_agent_m0_readdata;                                                  // outerDoorSwitch_s1_translator:uav_readdata -> outerDoorSwitch_s1_agent:m0_readdata
	wire         outerdoorswitch_s1_agent_m0_waitrequest;                                               // outerDoorSwitch_s1_translator:uav_waitrequest -> outerDoorSwitch_s1_agent:m0_waitrequest
	wire         outerdoorswitch_s1_agent_m0_debugaccess;                                               // outerDoorSwitch_s1_agent:m0_debugaccess -> outerDoorSwitch_s1_translator:uav_debugaccess
	wire  [13:0] outerdoorswitch_s1_agent_m0_address;                                                   // outerDoorSwitch_s1_agent:m0_address -> outerDoorSwitch_s1_translator:uav_address
	wire   [3:0] outerdoorswitch_s1_agent_m0_byteenable;                                                // outerDoorSwitch_s1_agent:m0_byteenable -> outerDoorSwitch_s1_translator:uav_byteenable
	wire         outerdoorswitch_s1_agent_m0_read;                                                      // outerDoorSwitch_s1_agent:m0_read -> outerDoorSwitch_s1_translator:uav_read
	wire         outerdoorswitch_s1_agent_m0_readdatavalid;                                             // outerDoorSwitch_s1_translator:uav_readdatavalid -> outerDoorSwitch_s1_agent:m0_readdatavalid
	wire         outerdoorswitch_s1_agent_m0_lock;                                                      // outerDoorSwitch_s1_agent:m0_lock -> outerDoorSwitch_s1_translator:uav_lock
	wire  [31:0] outerdoorswitch_s1_agent_m0_writedata;                                                 // outerDoorSwitch_s1_agent:m0_writedata -> outerDoorSwitch_s1_translator:uav_writedata
	wire         outerdoorswitch_s1_agent_m0_write;                                                     // outerDoorSwitch_s1_agent:m0_write -> outerDoorSwitch_s1_translator:uav_write
	wire   [2:0] outerdoorswitch_s1_agent_m0_burstcount;                                                // outerDoorSwitch_s1_agent:m0_burstcount -> outerDoorSwitch_s1_translator:uav_burstcount
	wire         outerdoorswitch_s1_agent_rf_source_valid;                                              // outerDoorSwitch_s1_agent:rf_source_valid -> outerDoorSwitch_s1_agent_rsp_fifo:in_valid
	wire  [94:0] outerdoorswitch_s1_agent_rf_source_data;                                               // outerDoorSwitch_s1_agent:rf_source_data -> outerDoorSwitch_s1_agent_rsp_fifo:in_data
	wire         outerdoorswitch_s1_agent_rf_source_ready;                                              // outerDoorSwitch_s1_agent_rsp_fifo:in_ready -> outerDoorSwitch_s1_agent:rf_source_ready
	wire         outerdoorswitch_s1_agent_rf_source_startofpacket;                                      // outerDoorSwitch_s1_agent:rf_source_startofpacket -> outerDoorSwitch_s1_agent_rsp_fifo:in_startofpacket
	wire         outerdoorswitch_s1_agent_rf_source_endofpacket;                                        // outerDoorSwitch_s1_agent:rf_source_endofpacket -> outerDoorSwitch_s1_agent_rsp_fifo:in_endofpacket
	wire         outerdoorswitch_s1_agent_rsp_fifo_out_valid;                                           // outerDoorSwitch_s1_agent_rsp_fifo:out_valid -> outerDoorSwitch_s1_agent:rf_sink_valid
	wire  [94:0] outerdoorswitch_s1_agent_rsp_fifo_out_data;                                            // outerDoorSwitch_s1_agent_rsp_fifo:out_data -> outerDoorSwitch_s1_agent:rf_sink_data
	wire         outerdoorswitch_s1_agent_rsp_fifo_out_ready;                                           // outerDoorSwitch_s1_agent:rf_sink_ready -> outerDoorSwitch_s1_agent_rsp_fifo:out_ready
	wire         outerdoorswitch_s1_agent_rsp_fifo_out_startofpacket;                                   // outerDoorSwitch_s1_agent_rsp_fifo:out_startofpacket -> outerDoorSwitch_s1_agent:rf_sink_startofpacket
	wire         outerdoorswitch_s1_agent_rsp_fifo_out_endofpacket;                                     // outerDoorSwitch_s1_agent_rsp_fifo:out_endofpacket -> outerDoorSwitch_s1_agent:rf_sink_endofpacket
	wire         cmd_mux_013_src_valid;                                                                 // cmd_mux_013:src_valid -> outerDoorSwitch_s1_agent:cp_valid
	wire  [93:0] cmd_mux_013_src_data;                                                                  // cmd_mux_013:src_data -> outerDoorSwitch_s1_agent:cp_data
	wire         cmd_mux_013_src_ready;                                                                 // outerDoorSwitch_s1_agent:cp_ready -> cmd_mux_013:src_ready
	wire  [17:0] cmd_mux_013_src_channel;                                                               // cmd_mux_013:src_channel -> outerDoorSwitch_s1_agent:cp_channel
	wire         cmd_mux_013_src_startofpacket;                                                         // cmd_mux_013:src_startofpacket -> outerDoorSwitch_s1_agent:cp_startofpacket
	wire         cmd_mux_013_src_endofpacket;                                                           // cmd_mux_013:src_endofpacket -> outerDoorSwitch_s1_agent:cp_endofpacket
	wire  [31:0] drainfinished_s1_agent_m0_readdata;                                                    // drainFinished_s1_translator:uav_readdata -> drainFinished_s1_agent:m0_readdata
	wire         drainfinished_s1_agent_m0_waitrequest;                                                 // drainFinished_s1_translator:uav_waitrequest -> drainFinished_s1_agent:m0_waitrequest
	wire         drainfinished_s1_agent_m0_debugaccess;                                                 // drainFinished_s1_agent:m0_debugaccess -> drainFinished_s1_translator:uav_debugaccess
	wire  [13:0] drainfinished_s1_agent_m0_address;                                                     // drainFinished_s1_agent:m0_address -> drainFinished_s1_translator:uav_address
	wire   [3:0] drainfinished_s1_agent_m0_byteenable;                                                  // drainFinished_s1_agent:m0_byteenable -> drainFinished_s1_translator:uav_byteenable
	wire         drainfinished_s1_agent_m0_read;                                                        // drainFinished_s1_agent:m0_read -> drainFinished_s1_translator:uav_read
	wire         drainfinished_s1_agent_m0_readdatavalid;                                               // drainFinished_s1_translator:uav_readdatavalid -> drainFinished_s1_agent:m0_readdatavalid
	wire         drainfinished_s1_agent_m0_lock;                                                        // drainFinished_s1_agent:m0_lock -> drainFinished_s1_translator:uav_lock
	wire  [31:0] drainfinished_s1_agent_m0_writedata;                                                   // drainFinished_s1_agent:m0_writedata -> drainFinished_s1_translator:uav_writedata
	wire         drainfinished_s1_agent_m0_write;                                                       // drainFinished_s1_agent:m0_write -> drainFinished_s1_translator:uav_write
	wire   [2:0] drainfinished_s1_agent_m0_burstcount;                                                  // drainFinished_s1_agent:m0_burstcount -> drainFinished_s1_translator:uav_burstcount
	wire         drainfinished_s1_agent_rf_source_valid;                                                // drainFinished_s1_agent:rf_source_valid -> drainFinished_s1_agent_rsp_fifo:in_valid
	wire  [94:0] drainfinished_s1_agent_rf_source_data;                                                 // drainFinished_s1_agent:rf_source_data -> drainFinished_s1_agent_rsp_fifo:in_data
	wire         drainfinished_s1_agent_rf_source_ready;                                                // drainFinished_s1_agent_rsp_fifo:in_ready -> drainFinished_s1_agent:rf_source_ready
	wire         drainfinished_s1_agent_rf_source_startofpacket;                                        // drainFinished_s1_agent:rf_source_startofpacket -> drainFinished_s1_agent_rsp_fifo:in_startofpacket
	wire         drainfinished_s1_agent_rf_source_endofpacket;                                          // drainFinished_s1_agent:rf_source_endofpacket -> drainFinished_s1_agent_rsp_fifo:in_endofpacket
	wire         drainfinished_s1_agent_rsp_fifo_out_valid;                                             // drainFinished_s1_agent_rsp_fifo:out_valid -> drainFinished_s1_agent:rf_sink_valid
	wire  [94:0] drainfinished_s1_agent_rsp_fifo_out_data;                                              // drainFinished_s1_agent_rsp_fifo:out_data -> drainFinished_s1_agent:rf_sink_data
	wire         drainfinished_s1_agent_rsp_fifo_out_ready;                                             // drainFinished_s1_agent:rf_sink_ready -> drainFinished_s1_agent_rsp_fifo:out_ready
	wire         drainfinished_s1_agent_rsp_fifo_out_startofpacket;                                     // drainFinished_s1_agent_rsp_fifo:out_startofpacket -> drainFinished_s1_agent:rf_sink_startofpacket
	wire         drainfinished_s1_agent_rsp_fifo_out_endofpacket;                                       // drainFinished_s1_agent_rsp_fifo:out_endofpacket -> drainFinished_s1_agent:rf_sink_endofpacket
	wire         cmd_mux_014_src_valid;                                                                 // cmd_mux_014:src_valid -> drainFinished_s1_agent:cp_valid
	wire  [93:0] cmd_mux_014_src_data;                                                                  // cmd_mux_014:src_data -> drainFinished_s1_agent:cp_data
	wire         cmd_mux_014_src_ready;                                                                 // drainFinished_s1_agent:cp_ready -> cmd_mux_014:src_ready
	wire  [17:0] cmd_mux_014_src_channel;                                                               // cmd_mux_014:src_channel -> drainFinished_s1_agent:cp_channel
	wire         cmd_mux_014_src_startofpacket;                                                         // cmd_mux_014:src_startofpacket -> drainFinished_s1_agent:cp_startofpacket
	wire         cmd_mux_014_src_endofpacket;                                                           // cmd_mux_014:src_endofpacket -> drainFinished_s1_agent:cp_endofpacket
	wire  [31:0] fillfinished_s1_agent_m0_readdata;                                                     // fillFinished_s1_translator:uav_readdata -> fillFinished_s1_agent:m0_readdata
	wire         fillfinished_s1_agent_m0_waitrequest;                                                  // fillFinished_s1_translator:uav_waitrequest -> fillFinished_s1_agent:m0_waitrequest
	wire         fillfinished_s1_agent_m0_debugaccess;                                                  // fillFinished_s1_agent:m0_debugaccess -> fillFinished_s1_translator:uav_debugaccess
	wire  [13:0] fillfinished_s1_agent_m0_address;                                                      // fillFinished_s1_agent:m0_address -> fillFinished_s1_translator:uav_address
	wire   [3:0] fillfinished_s1_agent_m0_byteenable;                                                   // fillFinished_s1_agent:m0_byteenable -> fillFinished_s1_translator:uav_byteenable
	wire         fillfinished_s1_agent_m0_read;                                                         // fillFinished_s1_agent:m0_read -> fillFinished_s1_translator:uav_read
	wire         fillfinished_s1_agent_m0_readdatavalid;                                                // fillFinished_s1_translator:uav_readdatavalid -> fillFinished_s1_agent:m0_readdatavalid
	wire         fillfinished_s1_agent_m0_lock;                                                         // fillFinished_s1_agent:m0_lock -> fillFinished_s1_translator:uav_lock
	wire  [31:0] fillfinished_s1_agent_m0_writedata;                                                    // fillFinished_s1_agent:m0_writedata -> fillFinished_s1_translator:uav_writedata
	wire         fillfinished_s1_agent_m0_write;                                                        // fillFinished_s1_agent:m0_write -> fillFinished_s1_translator:uav_write
	wire   [2:0] fillfinished_s1_agent_m0_burstcount;                                                   // fillFinished_s1_agent:m0_burstcount -> fillFinished_s1_translator:uav_burstcount
	wire         fillfinished_s1_agent_rf_source_valid;                                                 // fillFinished_s1_agent:rf_source_valid -> fillFinished_s1_agent_rsp_fifo:in_valid
	wire  [94:0] fillfinished_s1_agent_rf_source_data;                                                  // fillFinished_s1_agent:rf_source_data -> fillFinished_s1_agent_rsp_fifo:in_data
	wire         fillfinished_s1_agent_rf_source_ready;                                                 // fillFinished_s1_agent_rsp_fifo:in_ready -> fillFinished_s1_agent:rf_source_ready
	wire         fillfinished_s1_agent_rf_source_startofpacket;                                         // fillFinished_s1_agent:rf_source_startofpacket -> fillFinished_s1_agent_rsp_fifo:in_startofpacket
	wire         fillfinished_s1_agent_rf_source_endofpacket;                                           // fillFinished_s1_agent:rf_source_endofpacket -> fillFinished_s1_agent_rsp_fifo:in_endofpacket
	wire         fillfinished_s1_agent_rsp_fifo_out_valid;                                              // fillFinished_s1_agent_rsp_fifo:out_valid -> fillFinished_s1_agent:rf_sink_valid
	wire  [94:0] fillfinished_s1_agent_rsp_fifo_out_data;                                               // fillFinished_s1_agent_rsp_fifo:out_data -> fillFinished_s1_agent:rf_sink_data
	wire         fillfinished_s1_agent_rsp_fifo_out_ready;                                              // fillFinished_s1_agent:rf_sink_ready -> fillFinished_s1_agent_rsp_fifo:out_ready
	wire         fillfinished_s1_agent_rsp_fifo_out_startofpacket;                                      // fillFinished_s1_agent_rsp_fifo:out_startofpacket -> fillFinished_s1_agent:rf_sink_startofpacket
	wire         fillfinished_s1_agent_rsp_fifo_out_endofpacket;                                        // fillFinished_s1_agent_rsp_fifo:out_endofpacket -> fillFinished_s1_agent:rf_sink_endofpacket
	wire         cmd_mux_015_src_valid;                                                                 // cmd_mux_015:src_valid -> fillFinished_s1_agent:cp_valid
	wire  [93:0] cmd_mux_015_src_data;                                                                  // cmd_mux_015:src_data -> fillFinished_s1_agent:cp_data
	wire         cmd_mux_015_src_ready;                                                                 // fillFinished_s1_agent:cp_ready -> cmd_mux_015:src_ready
	wire  [17:0] cmd_mux_015_src_channel;                                                               // cmd_mux_015:src_channel -> fillFinished_s1_agent:cp_channel
	wire         cmd_mux_015_src_startofpacket;                                                         // cmd_mux_015:src_startofpacket -> fillFinished_s1_agent:cp_startofpacket
	wire         cmd_mux_015_src_endofpacket;                                                           // cmd_mux_015:src_endofpacket -> fillFinished_s1_agent:cp_endofpacket
	wire  [31:0] waitfinished_s1_agent_m0_readdata;                                                     // waitFinished_s1_translator:uav_readdata -> waitFinished_s1_agent:m0_readdata
	wire         waitfinished_s1_agent_m0_waitrequest;                                                  // waitFinished_s1_translator:uav_waitrequest -> waitFinished_s1_agent:m0_waitrequest
	wire         waitfinished_s1_agent_m0_debugaccess;                                                  // waitFinished_s1_agent:m0_debugaccess -> waitFinished_s1_translator:uav_debugaccess
	wire  [13:0] waitfinished_s1_agent_m0_address;                                                      // waitFinished_s1_agent:m0_address -> waitFinished_s1_translator:uav_address
	wire   [3:0] waitfinished_s1_agent_m0_byteenable;                                                   // waitFinished_s1_agent:m0_byteenable -> waitFinished_s1_translator:uav_byteenable
	wire         waitfinished_s1_agent_m0_read;                                                         // waitFinished_s1_agent:m0_read -> waitFinished_s1_translator:uav_read
	wire         waitfinished_s1_agent_m0_readdatavalid;                                                // waitFinished_s1_translator:uav_readdatavalid -> waitFinished_s1_agent:m0_readdatavalid
	wire         waitfinished_s1_agent_m0_lock;                                                         // waitFinished_s1_agent:m0_lock -> waitFinished_s1_translator:uav_lock
	wire  [31:0] waitfinished_s1_agent_m0_writedata;                                                    // waitFinished_s1_agent:m0_writedata -> waitFinished_s1_translator:uav_writedata
	wire         waitfinished_s1_agent_m0_write;                                                        // waitFinished_s1_agent:m0_write -> waitFinished_s1_translator:uav_write
	wire   [2:0] waitfinished_s1_agent_m0_burstcount;                                                   // waitFinished_s1_agent:m0_burstcount -> waitFinished_s1_translator:uav_burstcount
	wire         waitfinished_s1_agent_rf_source_valid;                                                 // waitFinished_s1_agent:rf_source_valid -> waitFinished_s1_agent_rsp_fifo:in_valid
	wire  [94:0] waitfinished_s1_agent_rf_source_data;                                                  // waitFinished_s1_agent:rf_source_data -> waitFinished_s1_agent_rsp_fifo:in_data
	wire         waitfinished_s1_agent_rf_source_ready;                                                 // waitFinished_s1_agent_rsp_fifo:in_ready -> waitFinished_s1_agent:rf_source_ready
	wire         waitfinished_s1_agent_rf_source_startofpacket;                                         // waitFinished_s1_agent:rf_source_startofpacket -> waitFinished_s1_agent_rsp_fifo:in_startofpacket
	wire         waitfinished_s1_agent_rf_source_endofpacket;                                           // waitFinished_s1_agent:rf_source_endofpacket -> waitFinished_s1_agent_rsp_fifo:in_endofpacket
	wire         waitfinished_s1_agent_rsp_fifo_out_valid;                                              // waitFinished_s1_agent_rsp_fifo:out_valid -> waitFinished_s1_agent:rf_sink_valid
	wire  [94:0] waitfinished_s1_agent_rsp_fifo_out_data;                                               // waitFinished_s1_agent_rsp_fifo:out_data -> waitFinished_s1_agent:rf_sink_data
	wire         waitfinished_s1_agent_rsp_fifo_out_ready;                                              // waitFinished_s1_agent:rf_sink_ready -> waitFinished_s1_agent_rsp_fifo:out_ready
	wire         waitfinished_s1_agent_rsp_fifo_out_startofpacket;                                      // waitFinished_s1_agent_rsp_fifo:out_startofpacket -> waitFinished_s1_agent:rf_sink_startofpacket
	wire         waitfinished_s1_agent_rsp_fifo_out_endofpacket;                                        // waitFinished_s1_agent_rsp_fifo:out_endofpacket -> waitFinished_s1_agent:rf_sink_endofpacket
	wire         cmd_mux_016_src_valid;                                                                 // cmd_mux_016:src_valid -> waitFinished_s1_agent:cp_valid
	wire  [93:0] cmd_mux_016_src_data;                                                                  // cmd_mux_016:src_data -> waitFinished_s1_agent:cp_data
	wire         cmd_mux_016_src_ready;                                                                 // waitFinished_s1_agent:cp_ready -> cmd_mux_016:src_ready
	wire  [17:0] cmd_mux_016_src_channel;                                                               // cmd_mux_016:src_channel -> waitFinished_s1_agent:cp_channel
	wire         cmd_mux_016_src_startofpacket;                                                         // cmd_mux_016:src_startofpacket -> waitFinished_s1_agent:cp_startofpacket
	wire         cmd_mux_016_src_endofpacket;                                                           // cmd_mux_016:src_endofpacket -> waitFinished_s1_agent:cp_endofpacket
	wire  [31:0] waiting_s1_agent_m0_readdata;                                                          // waiting_s1_translator:uav_readdata -> waiting_s1_agent:m0_readdata
	wire         waiting_s1_agent_m0_waitrequest;                                                       // waiting_s1_translator:uav_waitrequest -> waiting_s1_agent:m0_waitrequest
	wire         waiting_s1_agent_m0_debugaccess;                                                       // waiting_s1_agent:m0_debugaccess -> waiting_s1_translator:uav_debugaccess
	wire  [13:0] waiting_s1_agent_m0_address;                                                           // waiting_s1_agent:m0_address -> waiting_s1_translator:uav_address
	wire   [3:0] waiting_s1_agent_m0_byteenable;                                                        // waiting_s1_agent:m0_byteenable -> waiting_s1_translator:uav_byteenable
	wire         waiting_s1_agent_m0_read;                                                              // waiting_s1_agent:m0_read -> waiting_s1_translator:uav_read
	wire         waiting_s1_agent_m0_readdatavalid;                                                     // waiting_s1_translator:uav_readdatavalid -> waiting_s1_agent:m0_readdatavalid
	wire         waiting_s1_agent_m0_lock;                                                              // waiting_s1_agent:m0_lock -> waiting_s1_translator:uav_lock
	wire  [31:0] waiting_s1_agent_m0_writedata;                                                         // waiting_s1_agent:m0_writedata -> waiting_s1_translator:uav_writedata
	wire         waiting_s1_agent_m0_write;                                                             // waiting_s1_agent:m0_write -> waiting_s1_translator:uav_write
	wire   [2:0] waiting_s1_agent_m0_burstcount;                                                        // waiting_s1_agent:m0_burstcount -> waiting_s1_translator:uav_burstcount
	wire         waiting_s1_agent_rf_source_valid;                                                      // waiting_s1_agent:rf_source_valid -> waiting_s1_agent_rsp_fifo:in_valid
	wire  [94:0] waiting_s1_agent_rf_source_data;                                                       // waiting_s1_agent:rf_source_data -> waiting_s1_agent_rsp_fifo:in_data
	wire         waiting_s1_agent_rf_source_ready;                                                      // waiting_s1_agent_rsp_fifo:in_ready -> waiting_s1_agent:rf_source_ready
	wire         waiting_s1_agent_rf_source_startofpacket;                                              // waiting_s1_agent:rf_source_startofpacket -> waiting_s1_agent_rsp_fifo:in_startofpacket
	wire         waiting_s1_agent_rf_source_endofpacket;                                                // waiting_s1_agent:rf_source_endofpacket -> waiting_s1_agent_rsp_fifo:in_endofpacket
	wire         waiting_s1_agent_rsp_fifo_out_valid;                                                   // waiting_s1_agent_rsp_fifo:out_valid -> waiting_s1_agent:rf_sink_valid
	wire  [94:0] waiting_s1_agent_rsp_fifo_out_data;                                                    // waiting_s1_agent_rsp_fifo:out_data -> waiting_s1_agent:rf_sink_data
	wire         waiting_s1_agent_rsp_fifo_out_ready;                                                   // waiting_s1_agent:rf_sink_ready -> waiting_s1_agent_rsp_fifo:out_ready
	wire         waiting_s1_agent_rsp_fifo_out_startofpacket;                                           // waiting_s1_agent_rsp_fifo:out_startofpacket -> waiting_s1_agent:rf_sink_startofpacket
	wire         waiting_s1_agent_rsp_fifo_out_endofpacket;                                             // waiting_s1_agent_rsp_fifo:out_endofpacket -> waiting_s1_agent:rf_sink_endofpacket
	wire         cmd_mux_017_src_valid;                                                                 // cmd_mux_017:src_valid -> waiting_s1_agent:cp_valid
	wire  [93:0] cmd_mux_017_src_data;                                                                  // cmd_mux_017:src_data -> waiting_s1_agent:cp_data
	wire         cmd_mux_017_src_ready;                                                                 // waiting_s1_agent:cp_ready -> cmd_mux_017:src_ready
	wire  [17:0] cmd_mux_017_src_channel;                                                               // cmd_mux_017:src_channel -> waiting_s1_agent:cp_channel
	wire         cmd_mux_017_src_startofpacket;                                                         // cmd_mux_017:src_startofpacket -> waiting_s1_agent:cp_startofpacket
	wire         cmd_mux_017_src_endofpacket;                                                           // cmd_mux_017:src_endofpacket -> waiting_s1_agent:cp_endofpacket
	wire         nios2_processor_data_master_agent_cp_valid;                                            // nios2_processor_data_master_agent:cp_valid -> router:sink_valid
	wire  [93:0] nios2_processor_data_master_agent_cp_data;                                             // nios2_processor_data_master_agent:cp_data -> router:sink_data
	wire         nios2_processor_data_master_agent_cp_ready;                                            // router:sink_ready -> nios2_processor_data_master_agent:cp_ready
	wire         nios2_processor_data_master_agent_cp_startofpacket;                                    // nios2_processor_data_master_agent:cp_startofpacket -> router:sink_startofpacket
	wire         nios2_processor_data_master_agent_cp_endofpacket;                                      // nios2_processor_data_master_agent:cp_endofpacket -> router:sink_endofpacket
	wire         router_src_valid;                                                                      // router:src_valid -> cmd_demux:sink_valid
	wire  [93:0] router_src_data;                                                                       // router:src_data -> cmd_demux:sink_data
	wire         router_src_ready;                                                                      // cmd_demux:sink_ready -> router:src_ready
	wire  [17:0] router_src_channel;                                                                    // router:src_channel -> cmd_demux:sink_channel
	wire         router_src_startofpacket;                                                              // router:src_startofpacket -> cmd_demux:sink_startofpacket
	wire         router_src_endofpacket;                                                                // router:src_endofpacket -> cmd_demux:sink_endofpacket
	wire         nios2_processor_instruction_master_agent_cp_valid;                                     // nios2_processor_instruction_master_agent:cp_valid -> router_001:sink_valid
	wire  [93:0] nios2_processor_instruction_master_agent_cp_data;                                      // nios2_processor_instruction_master_agent:cp_data -> router_001:sink_data
	wire         nios2_processor_instruction_master_agent_cp_ready;                                     // router_001:sink_ready -> nios2_processor_instruction_master_agent:cp_ready
	wire         nios2_processor_instruction_master_agent_cp_startofpacket;                             // nios2_processor_instruction_master_agent:cp_startofpacket -> router_001:sink_startofpacket
	wire         nios2_processor_instruction_master_agent_cp_endofpacket;                               // nios2_processor_instruction_master_agent:cp_endofpacket -> router_001:sink_endofpacket
	wire         router_001_src_valid;                                                                  // router_001:src_valid -> cmd_demux_001:sink_valid
	wire  [93:0] router_001_src_data;                                                                   // router_001:src_data -> cmd_demux_001:sink_data
	wire         router_001_src_ready;                                                                  // cmd_demux_001:sink_ready -> router_001:src_ready
	wire  [17:0] router_001_src_channel;                                                                // router_001:src_channel -> cmd_demux_001:sink_channel
	wire         router_001_src_startofpacket;                                                          // router_001:src_startofpacket -> cmd_demux_001:sink_startofpacket
	wire         router_001_src_endofpacket;                                                            // router_001:src_endofpacket -> cmd_demux_001:sink_endofpacket
	wire         jtag_uart_avalon_jtag_slave_agent_rp_valid;                                            // jtag_uart_avalon_jtag_slave_agent:rp_valid -> router_002:sink_valid
	wire  [93:0] jtag_uart_avalon_jtag_slave_agent_rp_data;                                             // jtag_uart_avalon_jtag_slave_agent:rp_data -> router_002:sink_data
	wire         jtag_uart_avalon_jtag_slave_agent_rp_ready;                                            // router_002:sink_ready -> jtag_uart_avalon_jtag_slave_agent:rp_ready
	wire         jtag_uart_avalon_jtag_slave_agent_rp_startofpacket;                                    // jtag_uart_avalon_jtag_slave_agent:rp_startofpacket -> router_002:sink_startofpacket
	wire         jtag_uart_avalon_jtag_slave_agent_rp_endofpacket;                                      // jtag_uart_avalon_jtag_slave_agent:rp_endofpacket -> router_002:sink_endofpacket
	wire         router_002_src_valid;                                                                  // router_002:src_valid -> rsp_demux:sink_valid
	wire  [93:0] router_002_src_data;                                                                   // router_002:src_data -> rsp_demux:sink_data
	wire         router_002_src_ready;                                                                  // rsp_demux:sink_ready -> router_002:src_ready
	wire  [17:0] router_002_src_channel;                                                                // router_002:src_channel -> rsp_demux:sink_channel
	wire         router_002_src_startofpacket;                                                          // router_002:src_startofpacket -> rsp_demux:sink_startofpacket
	wire         router_002_src_endofpacket;                                                            // router_002:src_endofpacket -> rsp_demux:sink_endofpacket
	wire         nios2_processor_debug_mem_slave_agent_rp_valid;                                        // nios2_processor_debug_mem_slave_agent:rp_valid -> router_003:sink_valid
	wire  [93:0] nios2_processor_debug_mem_slave_agent_rp_data;                                         // nios2_processor_debug_mem_slave_agent:rp_data -> router_003:sink_data
	wire         nios2_processor_debug_mem_slave_agent_rp_ready;                                        // router_003:sink_ready -> nios2_processor_debug_mem_slave_agent:rp_ready
	wire         nios2_processor_debug_mem_slave_agent_rp_startofpacket;                                // nios2_processor_debug_mem_slave_agent:rp_startofpacket -> router_003:sink_startofpacket
	wire         nios2_processor_debug_mem_slave_agent_rp_endofpacket;                                  // nios2_processor_debug_mem_slave_agent:rp_endofpacket -> router_003:sink_endofpacket
	wire         router_003_src_valid;                                                                  // router_003:src_valid -> rsp_demux_001:sink_valid
	wire  [93:0] router_003_src_data;                                                                   // router_003:src_data -> rsp_demux_001:sink_data
	wire         router_003_src_ready;                                                                  // rsp_demux_001:sink_ready -> router_003:src_ready
	wire  [17:0] router_003_src_channel;                                                                // router_003:src_channel -> rsp_demux_001:sink_channel
	wire         router_003_src_startofpacket;                                                          // router_003:src_startofpacket -> rsp_demux_001:sink_startofpacket
	wire         router_003_src_endofpacket;                                                            // router_003:src_endofpacket -> rsp_demux_001:sink_endofpacket
	wire         onchip_memory_s1_agent_rp_valid;                                                       // onchip_memory_s1_agent:rp_valid -> router_004:sink_valid
	wire  [93:0] onchip_memory_s1_agent_rp_data;                                                        // onchip_memory_s1_agent:rp_data -> router_004:sink_data
	wire         onchip_memory_s1_agent_rp_ready;                                                       // router_004:sink_ready -> onchip_memory_s1_agent:rp_ready
	wire         onchip_memory_s1_agent_rp_startofpacket;                                               // onchip_memory_s1_agent:rp_startofpacket -> router_004:sink_startofpacket
	wire         onchip_memory_s1_agent_rp_endofpacket;                                                 // onchip_memory_s1_agent:rp_endofpacket -> router_004:sink_endofpacket
	wire         router_004_src_valid;                                                                  // router_004:src_valid -> rsp_demux_002:sink_valid
	wire  [93:0] router_004_src_data;                                                                   // router_004:src_data -> rsp_demux_002:sink_data
	wire         router_004_src_ready;                                                                  // rsp_demux_002:sink_ready -> router_004:src_ready
	wire  [17:0] router_004_src_channel;                                                                // router_004:src_channel -> rsp_demux_002:sink_channel
	wire         router_004_src_startofpacket;                                                          // router_004:src_startofpacket -> rsp_demux_002:sink_startofpacket
	wire         router_004_src_endofpacket;                                                            // router_004:src_endofpacket -> rsp_demux_002:sink_endofpacket
	wire         filling_s1_agent_rp_valid;                                                             // Filling_s1_agent:rp_valid -> router_005:sink_valid
	wire  [93:0] filling_s1_agent_rp_data;                                                              // Filling_s1_agent:rp_data -> router_005:sink_data
	wire         filling_s1_agent_rp_ready;                                                             // router_005:sink_ready -> Filling_s1_agent:rp_ready
	wire         filling_s1_agent_rp_startofpacket;                                                     // Filling_s1_agent:rp_startofpacket -> router_005:sink_startofpacket
	wire         filling_s1_agent_rp_endofpacket;                                                       // Filling_s1_agent:rp_endofpacket -> router_005:sink_endofpacket
	wire         router_005_src_valid;                                                                  // router_005:src_valid -> rsp_demux_003:sink_valid
	wire  [93:0] router_005_src_data;                                                                   // router_005:src_data -> rsp_demux_003:sink_data
	wire         router_005_src_ready;                                                                  // rsp_demux_003:sink_ready -> router_005:src_ready
	wire  [17:0] router_005_src_channel;                                                                // router_005:src_channel -> rsp_demux_003:sink_channel
	wire         router_005_src_startofpacket;                                                          // router_005:src_startofpacket -> rsp_demux_003:sink_startofpacket
	wire         router_005_src_endofpacket;                                                            // router_005:src_endofpacket -> rsp_demux_003:sink_endofpacket
	wire         draining_s1_agent_rp_valid;                                                            // Draining_s1_agent:rp_valid -> router_006:sink_valid
	wire  [93:0] draining_s1_agent_rp_data;                                                             // Draining_s1_agent:rp_data -> router_006:sink_data
	wire         draining_s1_agent_rp_ready;                                                            // router_006:sink_ready -> Draining_s1_agent:rp_ready
	wire         draining_s1_agent_rp_startofpacket;                                                    // Draining_s1_agent:rp_startofpacket -> router_006:sink_startofpacket
	wire         draining_s1_agent_rp_endofpacket;                                                      // Draining_s1_agent:rp_endofpacket -> router_006:sink_endofpacket
	wire         router_006_src_valid;                                                                  // router_006:src_valid -> rsp_demux_004:sink_valid
	wire  [93:0] router_006_src_data;                                                                   // router_006:src_data -> rsp_demux_004:sink_data
	wire         router_006_src_ready;                                                                  // rsp_demux_004:sink_ready -> router_006:src_ready
	wire  [17:0] router_006_src_channel;                                                                // router_006:src_channel -> rsp_demux_004:sink_channel
	wire         router_006_src_startofpacket;                                                          // router_006:src_startofpacket -> rsp_demux_004:sink_startofpacket
	wire         router_006_src_endofpacket;                                                            // router_006:src_endofpacket -> rsp_demux_004:sink_endofpacket
	wire         innerdoor_s1_agent_rp_valid;                                                           // innerDoor_s1_agent:rp_valid -> router_007:sink_valid
	wire  [93:0] innerdoor_s1_agent_rp_data;                                                            // innerDoor_s1_agent:rp_data -> router_007:sink_data
	wire         innerdoor_s1_agent_rp_ready;                                                           // router_007:sink_ready -> innerDoor_s1_agent:rp_ready
	wire         innerdoor_s1_agent_rp_startofpacket;                                                   // innerDoor_s1_agent:rp_startofpacket -> router_007:sink_startofpacket
	wire         innerdoor_s1_agent_rp_endofpacket;                                                     // innerDoor_s1_agent:rp_endofpacket -> router_007:sink_endofpacket
	wire         router_007_src_valid;                                                                  // router_007:src_valid -> rsp_demux_005:sink_valid
	wire  [93:0] router_007_src_data;                                                                   // router_007:src_data -> rsp_demux_005:sink_data
	wire         router_007_src_ready;                                                                  // rsp_demux_005:sink_ready -> router_007:src_ready
	wire  [17:0] router_007_src_channel;                                                                // router_007:src_channel -> rsp_demux_005:sink_channel
	wire         router_007_src_startofpacket;                                                          // router_007:src_startofpacket -> rsp_demux_005:sink_startofpacket
	wire         router_007_src_endofpacket;                                                            // router_007:src_endofpacket -> rsp_demux_005:sink_endofpacket
	wire         outerdoor_s1_agent_rp_valid;                                                           // outerDoor_s1_agent:rp_valid -> router_008:sink_valid
	wire  [93:0] outerdoor_s1_agent_rp_data;                                                            // outerDoor_s1_agent:rp_data -> router_008:sink_data
	wire         outerdoor_s1_agent_rp_ready;                                                           // router_008:sink_ready -> outerDoor_s1_agent:rp_ready
	wire         outerdoor_s1_agent_rp_startofpacket;                                                   // outerDoor_s1_agent:rp_startofpacket -> router_008:sink_startofpacket
	wire         outerdoor_s1_agent_rp_endofpacket;                                                     // outerDoor_s1_agent:rp_endofpacket -> router_008:sink_endofpacket
	wire         router_008_src_valid;                                                                  // router_008:src_valid -> rsp_demux_006:sink_valid
	wire  [93:0] router_008_src_data;                                                                   // router_008:src_data -> rsp_demux_006:sink_data
	wire         router_008_src_ready;                                                                  // rsp_demux_006:sink_ready -> router_008:src_ready
	wire  [17:0] router_008_src_channel;                                                                // router_008:src_channel -> rsp_demux_006:sink_channel
	wire         router_008_src_startofpacket;                                                          // router_008:src_startofpacket -> rsp_demux_006:sink_startofpacket
	wire         router_008_src_endofpacket;                                                            // router_008:src_endofpacket -> rsp_demux_006:sink_endofpacket
	wire         resetleds_s1_agent_rp_valid;                                                           // resetLeds_s1_agent:rp_valid -> router_009:sink_valid
	wire  [93:0] resetleds_s1_agent_rp_data;                                                            // resetLeds_s1_agent:rp_data -> router_009:sink_data
	wire         resetleds_s1_agent_rp_ready;                                                           // router_009:sink_ready -> resetLeds_s1_agent:rp_ready
	wire         resetleds_s1_agent_rp_startofpacket;                                                   // resetLeds_s1_agent:rp_startofpacket -> router_009:sink_startofpacket
	wire         resetleds_s1_agent_rp_endofpacket;                                                     // resetLeds_s1_agent:rp_endofpacket -> router_009:sink_endofpacket
	wire         router_009_src_valid;                                                                  // router_009:src_valid -> rsp_demux_007:sink_valid
	wire  [93:0] router_009_src_data;                                                                   // router_009:src_data -> rsp_demux_007:sink_data
	wire         router_009_src_ready;                                                                  // rsp_demux_007:sink_ready -> router_009:src_ready
	wire  [17:0] router_009_src_channel;                                                                // router_009:src_channel -> rsp_demux_007:sink_channel
	wire         router_009_src_startofpacket;                                                          // router_009:src_startofpacket -> rsp_demux_007:sink_startofpacket
	wire         router_009_src_endofpacket;                                                            // router_009:src_endofpacket -> rsp_demux_007:sink_endofpacket
	wire         bathleaving_s1_agent_rp_valid;                                                         // bathLeaving_s1_agent:rp_valid -> router_010:sink_valid
	wire  [93:0] bathleaving_s1_agent_rp_data;                                                          // bathLeaving_s1_agent:rp_data -> router_010:sink_data
	wire         bathleaving_s1_agent_rp_ready;                                                         // router_010:sink_ready -> bathLeaving_s1_agent:rp_ready
	wire         bathleaving_s1_agent_rp_startofpacket;                                                 // bathLeaving_s1_agent:rp_startofpacket -> router_010:sink_startofpacket
	wire         bathleaving_s1_agent_rp_endofpacket;                                                   // bathLeaving_s1_agent:rp_endofpacket -> router_010:sink_endofpacket
	wire         router_010_src_valid;                                                                  // router_010:src_valid -> rsp_demux_008:sink_valid
	wire  [93:0] router_010_src_data;                                                                   // router_010:src_data -> rsp_demux_008:sink_data
	wire         router_010_src_ready;                                                                  // rsp_demux_008:sink_ready -> router_010:src_ready
	wire  [17:0] router_010_src_channel;                                                                // router_010:src_channel -> rsp_demux_008:sink_channel
	wire         router_010_src_startofpacket;                                                          // router_010:src_startofpacket -> rsp_demux_008:sink_startofpacket
	wire         router_010_src_endofpacket;                                                            // router_010:src_endofpacket -> rsp_demux_008:sink_endofpacket
	wire         batharriving_s1_agent_rp_valid;                                                        // bathArriving_s1_agent:rp_valid -> router_011:sink_valid
	wire  [93:0] batharriving_s1_agent_rp_data;                                                         // bathArriving_s1_agent:rp_data -> router_011:sink_data
	wire         batharriving_s1_agent_rp_ready;                                                        // router_011:sink_ready -> bathArriving_s1_agent:rp_ready
	wire         batharriving_s1_agent_rp_startofpacket;                                                // bathArriving_s1_agent:rp_startofpacket -> router_011:sink_startofpacket
	wire         batharriving_s1_agent_rp_endofpacket;                                                  // bathArriving_s1_agent:rp_endofpacket -> router_011:sink_endofpacket
	wire         router_011_src_valid;                                                                  // router_011:src_valid -> rsp_demux_009:sink_valid
	wire  [93:0] router_011_src_data;                                                                   // router_011:src_data -> rsp_demux_009:sink_data
	wire         router_011_src_ready;                                                                  // rsp_demux_009:sink_ready -> router_011:src_ready
	wire  [17:0] router_011_src_channel;                                                                // router_011:src_channel -> rsp_demux_009:sink_channel
	wire         router_011_src_startofpacket;                                                          // router_011:src_startofpacket -> rsp_demux_009:sink_startofpacket
	wire         router_011_src_endofpacket;                                                            // router_011:src_endofpacket -> rsp_demux_009:sink_endofpacket
	wire         personcheck_s1_agent_rp_valid;                                                         // personCheck_s1_agent:rp_valid -> router_012:sink_valid
	wire  [93:0] personcheck_s1_agent_rp_data;                                                          // personCheck_s1_agent:rp_data -> router_012:sink_data
	wire         personcheck_s1_agent_rp_ready;                                                         // router_012:sink_ready -> personCheck_s1_agent:rp_ready
	wire         personcheck_s1_agent_rp_startofpacket;                                                 // personCheck_s1_agent:rp_startofpacket -> router_012:sink_startofpacket
	wire         personcheck_s1_agent_rp_endofpacket;                                                   // personCheck_s1_agent:rp_endofpacket -> router_012:sink_endofpacket
	wire         router_012_src_valid;                                                                  // router_012:src_valid -> rsp_demux_010:sink_valid
	wire  [93:0] router_012_src_data;                                                                   // router_012:src_data -> rsp_demux_010:sink_data
	wire         router_012_src_ready;                                                                  // rsp_demux_010:sink_ready -> router_012:src_ready
	wire  [17:0] router_012_src_channel;                                                                // router_012:src_channel -> rsp_demux_010:sink_channel
	wire         router_012_src_startofpacket;                                                          // router_012:src_startofpacket -> rsp_demux_010:sink_startofpacket
	wire         router_012_src_endofpacket;                                                            // router_012:src_endofpacket -> rsp_demux_010:sink_endofpacket
	wire         pressurecheck_s1_agent_rp_valid;                                                       // pressureCheck_s1_agent:rp_valid -> router_013:sink_valid
	wire  [93:0] pressurecheck_s1_agent_rp_data;                                                        // pressureCheck_s1_agent:rp_data -> router_013:sink_data
	wire         pressurecheck_s1_agent_rp_ready;                                                       // router_013:sink_ready -> pressureCheck_s1_agent:rp_ready
	wire         pressurecheck_s1_agent_rp_startofpacket;                                               // pressureCheck_s1_agent:rp_startofpacket -> router_013:sink_startofpacket
	wire         pressurecheck_s1_agent_rp_endofpacket;                                                 // pressureCheck_s1_agent:rp_endofpacket -> router_013:sink_endofpacket
	wire         router_013_src_valid;                                                                  // router_013:src_valid -> rsp_demux_011:sink_valid
	wire  [93:0] router_013_src_data;                                                                   // router_013:src_data -> rsp_demux_011:sink_data
	wire         router_013_src_ready;                                                                  // rsp_demux_011:sink_ready -> router_013:src_ready
	wire  [17:0] router_013_src_channel;                                                                // router_013:src_channel -> rsp_demux_011:sink_channel
	wire         router_013_src_startofpacket;                                                          // router_013:src_startofpacket -> rsp_demux_011:sink_startofpacket
	wire         router_013_src_endofpacket;                                                            // router_013:src_endofpacket -> rsp_demux_011:sink_endofpacket
	wire         innerdoorswitch_s1_agent_rp_valid;                                                     // innerDoorSwitch_s1_agent:rp_valid -> router_014:sink_valid
	wire  [93:0] innerdoorswitch_s1_agent_rp_data;                                                      // innerDoorSwitch_s1_agent:rp_data -> router_014:sink_data
	wire         innerdoorswitch_s1_agent_rp_ready;                                                     // router_014:sink_ready -> innerDoorSwitch_s1_agent:rp_ready
	wire         innerdoorswitch_s1_agent_rp_startofpacket;                                             // innerDoorSwitch_s1_agent:rp_startofpacket -> router_014:sink_startofpacket
	wire         innerdoorswitch_s1_agent_rp_endofpacket;                                               // innerDoorSwitch_s1_agent:rp_endofpacket -> router_014:sink_endofpacket
	wire         router_014_src_valid;                                                                  // router_014:src_valid -> rsp_demux_012:sink_valid
	wire  [93:0] router_014_src_data;                                                                   // router_014:src_data -> rsp_demux_012:sink_data
	wire         router_014_src_ready;                                                                  // rsp_demux_012:sink_ready -> router_014:src_ready
	wire  [17:0] router_014_src_channel;                                                                // router_014:src_channel -> rsp_demux_012:sink_channel
	wire         router_014_src_startofpacket;                                                          // router_014:src_startofpacket -> rsp_demux_012:sink_startofpacket
	wire         router_014_src_endofpacket;                                                            // router_014:src_endofpacket -> rsp_demux_012:sink_endofpacket
	wire         outerdoorswitch_s1_agent_rp_valid;                                                     // outerDoorSwitch_s1_agent:rp_valid -> router_015:sink_valid
	wire  [93:0] outerdoorswitch_s1_agent_rp_data;                                                      // outerDoorSwitch_s1_agent:rp_data -> router_015:sink_data
	wire         outerdoorswitch_s1_agent_rp_ready;                                                     // router_015:sink_ready -> outerDoorSwitch_s1_agent:rp_ready
	wire         outerdoorswitch_s1_agent_rp_startofpacket;                                             // outerDoorSwitch_s1_agent:rp_startofpacket -> router_015:sink_startofpacket
	wire         outerdoorswitch_s1_agent_rp_endofpacket;                                               // outerDoorSwitch_s1_agent:rp_endofpacket -> router_015:sink_endofpacket
	wire         router_015_src_valid;                                                                  // router_015:src_valid -> rsp_demux_013:sink_valid
	wire  [93:0] router_015_src_data;                                                                   // router_015:src_data -> rsp_demux_013:sink_data
	wire         router_015_src_ready;                                                                  // rsp_demux_013:sink_ready -> router_015:src_ready
	wire  [17:0] router_015_src_channel;                                                                // router_015:src_channel -> rsp_demux_013:sink_channel
	wire         router_015_src_startofpacket;                                                          // router_015:src_startofpacket -> rsp_demux_013:sink_startofpacket
	wire         router_015_src_endofpacket;                                                            // router_015:src_endofpacket -> rsp_demux_013:sink_endofpacket
	wire         drainfinished_s1_agent_rp_valid;                                                       // drainFinished_s1_agent:rp_valid -> router_016:sink_valid
	wire  [93:0] drainfinished_s1_agent_rp_data;                                                        // drainFinished_s1_agent:rp_data -> router_016:sink_data
	wire         drainfinished_s1_agent_rp_ready;                                                       // router_016:sink_ready -> drainFinished_s1_agent:rp_ready
	wire         drainfinished_s1_agent_rp_startofpacket;                                               // drainFinished_s1_agent:rp_startofpacket -> router_016:sink_startofpacket
	wire         drainfinished_s1_agent_rp_endofpacket;                                                 // drainFinished_s1_agent:rp_endofpacket -> router_016:sink_endofpacket
	wire         router_016_src_valid;                                                                  // router_016:src_valid -> rsp_demux_014:sink_valid
	wire  [93:0] router_016_src_data;                                                                   // router_016:src_data -> rsp_demux_014:sink_data
	wire         router_016_src_ready;                                                                  // rsp_demux_014:sink_ready -> router_016:src_ready
	wire  [17:0] router_016_src_channel;                                                                // router_016:src_channel -> rsp_demux_014:sink_channel
	wire         router_016_src_startofpacket;                                                          // router_016:src_startofpacket -> rsp_demux_014:sink_startofpacket
	wire         router_016_src_endofpacket;                                                            // router_016:src_endofpacket -> rsp_demux_014:sink_endofpacket
	wire         fillfinished_s1_agent_rp_valid;                                                        // fillFinished_s1_agent:rp_valid -> router_017:sink_valid
	wire  [93:0] fillfinished_s1_agent_rp_data;                                                         // fillFinished_s1_agent:rp_data -> router_017:sink_data
	wire         fillfinished_s1_agent_rp_ready;                                                        // router_017:sink_ready -> fillFinished_s1_agent:rp_ready
	wire         fillfinished_s1_agent_rp_startofpacket;                                                // fillFinished_s1_agent:rp_startofpacket -> router_017:sink_startofpacket
	wire         fillfinished_s1_agent_rp_endofpacket;                                                  // fillFinished_s1_agent:rp_endofpacket -> router_017:sink_endofpacket
	wire         router_017_src_valid;                                                                  // router_017:src_valid -> rsp_demux_015:sink_valid
	wire  [93:0] router_017_src_data;                                                                   // router_017:src_data -> rsp_demux_015:sink_data
	wire         router_017_src_ready;                                                                  // rsp_demux_015:sink_ready -> router_017:src_ready
	wire  [17:0] router_017_src_channel;                                                                // router_017:src_channel -> rsp_demux_015:sink_channel
	wire         router_017_src_startofpacket;                                                          // router_017:src_startofpacket -> rsp_demux_015:sink_startofpacket
	wire         router_017_src_endofpacket;                                                            // router_017:src_endofpacket -> rsp_demux_015:sink_endofpacket
	wire         waitfinished_s1_agent_rp_valid;                                                        // waitFinished_s1_agent:rp_valid -> router_018:sink_valid
	wire  [93:0] waitfinished_s1_agent_rp_data;                                                         // waitFinished_s1_agent:rp_data -> router_018:sink_data
	wire         waitfinished_s1_agent_rp_ready;                                                        // router_018:sink_ready -> waitFinished_s1_agent:rp_ready
	wire         waitfinished_s1_agent_rp_startofpacket;                                                // waitFinished_s1_agent:rp_startofpacket -> router_018:sink_startofpacket
	wire         waitfinished_s1_agent_rp_endofpacket;                                                  // waitFinished_s1_agent:rp_endofpacket -> router_018:sink_endofpacket
	wire         router_018_src_valid;                                                                  // router_018:src_valid -> rsp_demux_016:sink_valid
	wire  [93:0] router_018_src_data;                                                                   // router_018:src_data -> rsp_demux_016:sink_data
	wire         router_018_src_ready;                                                                  // rsp_demux_016:sink_ready -> router_018:src_ready
	wire  [17:0] router_018_src_channel;                                                                // router_018:src_channel -> rsp_demux_016:sink_channel
	wire         router_018_src_startofpacket;                                                          // router_018:src_startofpacket -> rsp_demux_016:sink_startofpacket
	wire         router_018_src_endofpacket;                                                            // router_018:src_endofpacket -> rsp_demux_016:sink_endofpacket
	wire         waiting_s1_agent_rp_valid;                                                             // waiting_s1_agent:rp_valid -> router_019:sink_valid
	wire  [93:0] waiting_s1_agent_rp_data;                                                              // waiting_s1_agent:rp_data -> router_019:sink_data
	wire         waiting_s1_agent_rp_ready;                                                             // router_019:sink_ready -> waiting_s1_agent:rp_ready
	wire         waiting_s1_agent_rp_startofpacket;                                                     // waiting_s1_agent:rp_startofpacket -> router_019:sink_startofpacket
	wire         waiting_s1_agent_rp_endofpacket;                                                       // waiting_s1_agent:rp_endofpacket -> router_019:sink_endofpacket
	wire         router_019_src_valid;                                                                  // router_019:src_valid -> rsp_demux_017:sink_valid
	wire  [93:0] router_019_src_data;                                                                   // router_019:src_data -> rsp_demux_017:sink_data
	wire         router_019_src_ready;                                                                  // rsp_demux_017:sink_ready -> router_019:src_ready
	wire  [17:0] router_019_src_channel;                                                                // router_019:src_channel -> rsp_demux_017:sink_channel
	wire         router_019_src_startofpacket;                                                          // router_019:src_startofpacket -> rsp_demux_017:sink_startofpacket
	wire         router_019_src_endofpacket;                                                            // router_019:src_endofpacket -> rsp_demux_017:sink_endofpacket
	wire         cmd_demux_src0_valid;                                                                  // cmd_demux:src0_valid -> cmd_mux:sink0_valid
	wire  [93:0] cmd_demux_src0_data;                                                                   // cmd_demux:src0_data -> cmd_mux:sink0_data
	wire         cmd_demux_src0_ready;                                                                  // cmd_mux:sink0_ready -> cmd_demux:src0_ready
	wire  [17:0] cmd_demux_src0_channel;                                                                // cmd_demux:src0_channel -> cmd_mux:sink0_channel
	wire         cmd_demux_src0_startofpacket;                                                          // cmd_demux:src0_startofpacket -> cmd_mux:sink0_startofpacket
	wire         cmd_demux_src0_endofpacket;                                                            // cmd_demux:src0_endofpacket -> cmd_mux:sink0_endofpacket
	wire         cmd_demux_src1_valid;                                                                  // cmd_demux:src1_valid -> cmd_mux_001:sink0_valid
	wire  [93:0] cmd_demux_src1_data;                                                                   // cmd_demux:src1_data -> cmd_mux_001:sink0_data
	wire         cmd_demux_src1_ready;                                                                  // cmd_mux_001:sink0_ready -> cmd_demux:src1_ready
	wire  [17:0] cmd_demux_src1_channel;                                                                // cmd_demux:src1_channel -> cmd_mux_001:sink0_channel
	wire         cmd_demux_src1_startofpacket;                                                          // cmd_demux:src1_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire         cmd_demux_src1_endofpacket;                                                            // cmd_demux:src1_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire         cmd_demux_src2_valid;                                                                  // cmd_demux:src2_valid -> cmd_mux_002:sink0_valid
	wire  [93:0] cmd_demux_src2_data;                                                                   // cmd_demux:src2_data -> cmd_mux_002:sink0_data
	wire         cmd_demux_src2_ready;                                                                  // cmd_mux_002:sink0_ready -> cmd_demux:src2_ready
	wire  [17:0] cmd_demux_src2_channel;                                                                // cmd_demux:src2_channel -> cmd_mux_002:sink0_channel
	wire         cmd_demux_src2_startofpacket;                                                          // cmd_demux:src2_startofpacket -> cmd_mux_002:sink0_startofpacket
	wire         cmd_demux_src2_endofpacket;                                                            // cmd_demux:src2_endofpacket -> cmd_mux_002:sink0_endofpacket
	wire         cmd_demux_src3_valid;                                                                  // cmd_demux:src3_valid -> cmd_mux_003:sink0_valid
	wire  [93:0] cmd_demux_src3_data;                                                                   // cmd_demux:src3_data -> cmd_mux_003:sink0_data
	wire         cmd_demux_src3_ready;                                                                  // cmd_mux_003:sink0_ready -> cmd_demux:src3_ready
	wire  [17:0] cmd_demux_src3_channel;                                                                // cmd_demux:src3_channel -> cmd_mux_003:sink0_channel
	wire         cmd_demux_src3_startofpacket;                                                          // cmd_demux:src3_startofpacket -> cmd_mux_003:sink0_startofpacket
	wire         cmd_demux_src3_endofpacket;                                                            // cmd_demux:src3_endofpacket -> cmd_mux_003:sink0_endofpacket
	wire         cmd_demux_src4_valid;                                                                  // cmd_demux:src4_valid -> cmd_mux_004:sink0_valid
	wire  [93:0] cmd_demux_src4_data;                                                                   // cmd_demux:src4_data -> cmd_mux_004:sink0_data
	wire         cmd_demux_src4_ready;                                                                  // cmd_mux_004:sink0_ready -> cmd_demux:src4_ready
	wire  [17:0] cmd_demux_src4_channel;                                                                // cmd_demux:src4_channel -> cmd_mux_004:sink0_channel
	wire         cmd_demux_src4_startofpacket;                                                          // cmd_demux:src4_startofpacket -> cmd_mux_004:sink0_startofpacket
	wire         cmd_demux_src4_endofpacket;                                                            // cmd_demux:src4_endofpacket -> cmd_mux_004:sink0_endofpacket
	wire         cmd_demux_src5_valid;                                                                  // cmd_demux:src5_valid -> cmd_mux_005:sink0_valid
	wire  [93:0] cmd_demux_src5_data;                                                                   // cmd_demux:src5_data -> cmd_mux_005:sink0_data
	wire         cmd_demux_src5_ready;                                                                  // cmd_mux_005:sink0_ready -> cmd_demux:src5_ready
	wire  [17:0] cmd_demux_src5_channel;                                                                // cmd_demux:src5_channel -> cmd_mux_005:sink0_channel
	wire         cmd_demux_src5_startofpacket;                                                          // cmd_demux:src5_startofpacket -> cmd_mux_005:sink0_startofpacket
	wire         cmd_demux_src5_endofpacket;                                                            // cmd_demux:src5_endofpacket -> cmd_mux_005:sink0_endofpacket
	wire         cmd_demux_src6_valid;                                                                  // cmd_demux:src6_valid -> cmd_mux_006:sink0_valid
	wire  [93:0] cmd_demux_src6_data;                                                                   // cmd_demux:src6_data -> cmd_mux_006:sink0_data
	wire         cmd_demux_src6_ready;                                                                  // cmd_mux_006:sink0_ready -> cmd_demux:src6_ready
	wire  [17:0] cmd_demux_src6_channel;                                                                // cmd_demux:src6_channel -> cmd_mux_006:sink0_channel
	wire         cmd_demux_src6_startofpacket;                                                          // cmd_demux:src6_startofpacket -> cmd_mux_006:sink0_startofpacket
	wire         cmd_demux_src6_endofpacket;                                                            // cmd_demux:src6_endofpacket -> cmd_mux_006:sink0_endofpacket
	wire         cmd_demux_src7_valid;                                                                  // cmd_demux:src7_valid -> cmd_mux_007:sink0_valid
	wire  [93:0] cmd_demux_src7_data;                                                                   // cmd_demux:src7_data -> cmd_mux_007:sink0_data
	wire         cmd_demux_src7_ready;                                                                  // cmd_mux_007:sink0_ready -> cmd_demux:src7_ready
	wire  [17:0] cmd_demux_src7_channel;                                                                // cmd_demux:src7_channel -> cmd_mux_007:sink0_channel
	wire         cmd_demux_src7_startofpacket;                                                          // cmd_demux:src7_startofpacket -> cmd_mux_007:sink0_startofpacket
	wire         cmd_demux_src7_endofpacket;                                                            // cmd_demux:src7_endofpacket -> cmd_mux_007:sink0_endofpacket
	wire         cmd_demux_src8_valid;                                                                  // cmd_demux:src8_valid -> cmd_mux_008:sink0_valid
	wire  [93:0] cmd_demux_src8_data;                                                                   // cmd_demux:src8_data -> cmd_mux_008:sink0_data
	wire         cmd_demux_src8_ready;                                                                  // cmd_mux_008:sink0_ready -> cmd_demux:src8_ready
	wire  [17:0] cmd_demux_src8_channel;                                                                // cmd_demux:src8_channel -> cmd_mux_008:sink0_channel
	wire         cmd_demux_src8_startofpacket;                                                          // cmd_demux:src8_startofpacket -> cmd_mux_008:sink0_startofpacket
	wire         cmd_demux_src8_endofpacket;                                                            // cmd_demux:src8_endofpacket -> cmd_mux_008:sink0_endofpacket
	wire         cmd_demux_src9_valid;                                                                  // cmd_demux:src9_valid -> cmd_mux_009:sink0_valid
	wire  [93:0] cmd_demux_src9_data;                                                                   // cmd_demux:src9_data -> cmd_mux_009:sink0_data
	wire         cmd_demux_src9_ready;                                                                  // cmd_mux_009:sink0_ready -> cmd_demux:src9_ready
	wire  [17:0] cmd_demux_src9_channel;                                                                // cmd_demux:src9_channel -> cmd_mux_009:sink0_channel
	wire         cmd_demux_src9_startofpacket;                                                          // cmd_demux:src9_startofpacket -> cmd_mux_009:sink0_startofpacket
	wire         cmd_demux_src9_endofpacket;                                                            // cmd_demux:src9_endofpacket -> cmd_mux_009:sink0_endofpacket
	wire         cmd_demux_src10_valid;                                                                 // cmd_demux:src10_valid -> cmd_mux_010:sink0_valid
	wire  [93:0] cmd_demux_src10_data;                                                                  // cmd_demux:src10_data -> cmd_mux_010:sink0_data
	wire         cmd_demux_src10_ready;                                                                 // cmd_mux_010:sink0_ready -> cmd_demux:src10_ready
	wire  [17:0] cmd_demux_src10_channel;                                                               // cmd_demux:src10_channel -> cmd_mux_010:sink0_channel
	wire         cmd_demux_src10_startofpacket;                                                         // cmd_demux:src10_startofpacket -> cmd_mux_010:sink0_startofpacket
	wire         cmd_demux_src10_endofpacket;                                                           // cmd_demux:src10_endofpacket -> cmd_mux_010:sink0_endofpacket
	wire         cmd_demux_src11_valid;                                                                 // cmd_demux:src11_valid -> cmd_mux_011:sink0_valid
	wire  [93:0] cmd_demux_src11_data;                                                                  // cmd_demux:src11_data -> cmd_mux_011:sink0_data
	wire         cmd_demux_src11_ready;                                                                 // cmd_mux_011:sink0_ready -> cmd_demux:src11_ready
	wire  [17:0] cmd_demux_src11_channel;                                                               // cmd_demux:src11_channel -> cmd_mux_011:sink0_channel
	wire         cmd_demux_src11_startofpacket;                                                         // cmd_demux:src11_startofpacket -> cmd_mux_011:sink0_startofpacket
	wire         cmd_demux_src11_endofpacket;                                                           // cmd_demux:src11_endofpacket -> cmd_mux_011:sink0_endofpacket
	wire         cmd_demux_src12_valid;                                                                 // cmd_demux:src12_valid -> cmd_mux_012:sink0_valid
	wire  [93:0] cmd_demux_src12_data;                                                                  // cmd_demux:src12_data -> cmd_mux_012:sink0_data
	wire         cmd_demux_src12_ready;                                                                 // cmd_mux_012:sink0_ready -> cmd_demux:src12_ready
	wire  [17:0] cmd_demux_src12_channel;                                                               // cmd_demux:src12_channel -> cmd_mux_012:sink0_channel
	wire         cmd_demux_src12_startofpacket;                                                         // cmd_demux:src12_startofpacket -> cmd_mux_012:sink0_startofpacket
	wire         cmd_demux_src12_endofpacket;                                                           // cmd_demux:src12_endofpacket -> cmd_mux_012:sink0_endofpacket
	wire         cmd_demux_src13_valid;                                                                 // cmd_demux:src13_valid -> cmd_mux_013:sink0_valid
	wire  [93:0] cmd_demux_src13_data;                                                                  // cmd_demux:src13_data -> cmd_mux_013:sink0_data
	wire         cmd_demux_src13_ready;                                                                 // cmd_mux_013:sink0_ready -> cmd_demux:src13_ready
	wire  [17:0] cmd_demux_src13_channel;                                                               // cmd_demux:src13_channel -> cmd_mux_013:sink0_channel
	wire         cmd_demux_src13_startofpacket;                                                         // cmd_demux:src13_startofpacket -> cmd_mux_013:sink0_startofpacket
	wire         cmd_demux_src13_endofpacket;                                                           // cmd_demux:src13_endofpacket -> cmd_mux_013:sink0_endofpacket
	wire         cmd_demux_src14_valid;                                                                 // cmd_demux:src14_valid -> cmd_mux_014:sink0_valid
	wire  [93:0] cmd_demux_src14_data;                                                                  // cmd_demux:src14_data -> cmd_mux_014:sink0_data
	wire         cmd_demux_src14_ready;                                                                 // cmd_mux_014:sink0_ready -> cmd_demux:src14_ready
	wire  [17:0] cmd_demux_src14_channel;                                                               // cmd_demux:src14_channel -> cmd_mux_014:sink0_channel
	wire         cmd_demux_src14_startofpacket;                                                         // cmd_demux:src14_startofpacket -> cmd_mux_014:sink0_startofpacket
	wire         cmd_demux_src14_endofpacket;                                                           // cmd_demux:src14_endofpacket -> cmd_mux_014:sink0_endofpacket
	wire         cmd_demux_src15_valid;                                                                 // cmd_demux:src15_valid -> cmd_mux_015:sink0_valid
	wire  [93:0] cmd_demux_src15_data;                                                                  // cmd_demux:src15_data -> cmd_mux_015:sink0_data
	wire         cmd_demux_src15_ready;                                                                 // cmd_mux_015:sink0_ready -> cmd_demux:src15_ready
	wire  [17:0] cmd_demux_src15_channel;                                                               // cmd_demux:src15_channel -> cmd_mux_015:sink0_channel
	wire         cmd_demux_src15_startofpacket;                                                         // cmd_demux:src15_startofpacket -> cmd_mux_015:sink0_startofpacket
	wire         cmd_demux_src15_endofpacket;                                                           // cmd_demux:src15_endofpacket -> cmd_mux_015:sink0_endofpacket
	wire         cmd_demux_src16_valid;                                                                 // cmd_demux:src16_valid -> cmd_mux_016:sink0_valid
	wire  [93:0] cmd_demux_src16_data;                                                                  // cmd_demux:src16_data -> cmd_mux_016:sink0_data
	wire         cmd_demux_src16_ready;                                                                 // cmd_mux_016:sink0_ready -> cmd_demux:src16_ready
	wire  [17:0] cmd_demux_src16_channel;                                                               // cmd_demux:src16_channel -> cmd_mux_016:sink0_channel
	wire         cmd_demux_src16_startofpacket;                                                         // cmd_demux:src16_startofpacket -> cmd_mux_016:sink0_startofpacket
	wire         cmd_demux_src16_endofpacket;                                                           // cmd_demux:src16_endofpacket -> cmd_mux_016:sink0_endofpacket
	wire         cmd_demux_src17_valid;                                                                 // cmd_demux:src17_valid -> cmd_mux_017:sink0_valid
	wire  [93:0] cmd_demux_src17_data;                                                                  // cmd_demux:src17_data -> cmd_mux_017:sink0_data
	wire         cmd_demux_src17_ready;                                                                 // cmd_mux_017:sink0_ready -> cmd_demux:src17_ready
	wire  [17:0] cmd_demux_src17_channel;                                                               // cmd_demux:src17_channel -> cmd_mux_017:sink0_channel
	wire         cmd_demux_src17_startofpacket;                                                         // cmd_demux:src17_startofpacket -> cmd_mux_017:sink0_startofpacket
	wire         cmd_demux_src17_endofpacket;                                                           // cmd_demux:src17_endofpacket -> cmd_mux_017:sink0_endofpacket
	wire         cmd_demux_001_src0_valid;                                                              // cmd_demux_001:src0_valid -> cmd_mux_001:sink1_valid
	wire  [93:0] cmd_demux_001_src0_data;                                                               // cmd_demux_001:src0_data -> cmd_mux_001:sink1_data
	wire         cmd_demux_001_src0_ready;                                                              // cmd_mux_001:sink1_ready -> cmd_demux_001:src0_ready
	wire  [17:0] cmd_demux_001_src0_channel;                                                            // cmd_demux_001:src0_channel -> cmd_mux_001:sink1_channel
	wire         cmd_demux_001_src0_startofpacket;                                                      // cmd_demux_001:src0_startofpacket -> cmd_mux_001:sink1_startofpacket
	wire         cmd_demux_001_src0_endofpacket;                                                        // cmd_demux_001:src0_endofpacket -> cmd_mux_001:sink1_endofpacket
	wire         cmd_demux_001_src1_valid;                                                              // cmd_demux_001:src1_valid -> cmd_mux_002:sink1_valid
	wire  [93:0] cmd_demux_001_src1_data;                                                               // cmd_demux_001:src1_data -> cmd_mux_002:sink1_data
	wire         cmd_demux_001_src1_ready;                                                              // cmd_mux_002:sink1_ready -> cmd_demux_001:src1_ready
	wire  [17:0] cmd_demux_001_src1_channel;                                                            // cmd_demux_001:src1_channel -> cmd_mux_002:sink1_channel
	wire         cmd_demux_001_src1_startofpacket;                                                      // cmd_demux_001:src1_startofpacket -> cmd_mux_002:sink1_startofpacket
	wire         cmd_demux_001_src1_endofpacket;                                                        // cmd_demux_001:src1_endofpacket -> cmd_mux_002:sink1_endofpacket
	wire         rsp_demux_src0_valid;                                                                  // rsp_demux:src0_valid -> rsp_mux:sink0_valid
	wire  [93:0] rsp_demux_src0_data;                                                                   // rsp_demux:src0_data -> rsp_mux:sink0_data
	wire         rsp_demux_src0_ready;                                                                  // rsp_mux:sink0_ready -> rsp_demux:src0_ready
	wire  [17:0] rsp_demux_src0_channel;                                                                // rsp_demux:src0_channel -> rsp_mux:sink0_channel
	wire         rsp_demux_src0_startofpacket;                                                          // rsp_demux:src0_startofpacket -> rsp_mux:sink0_startofpacket
	wire         rsp_demux_src0_endofpacket;                                                            // rsp_demux:src0_endofpacket -> rsp_mux:sink0_endofpacket
	wire         rsp_demux_001_src0_valid;                                                              // rsp_demux_001:src0_valid -> rsp_mux:sink1_valid
	wire  [93:0] rsp_demux_001_src0_data;                                                               // rsp_demux_001:src0_data -> rsp_mux:sink1_data
	wire         rsp_demux_001_src0_ready;                                                              // rsp_mux:sink1_ready -> rsp_demux_001:src0_ready
	wire  [17:0] rsp_demux_001_src0_channel;                                                            // rsp_demux_001:src0_channel -> rsp_mux:sink1_channel
	wire         rsp_demux_001_src0_startofpacket;                                                      // rsp_demux_001:src0_startofpacket -> rsp_mux:sink1_startofpacket
	wire         rsp_demux_001_src0_endofpacket;                                                        // rsp_demux_001:src0_endofpacket -> rsp_mux:sink1_endofpacket
	wire         rsp_demux_001_src1_valid;                                                              // rsp_demux_001:src1_valid -> rsp_mux_001:sink0_valid
	wire  [93:0] rsp_demux_001_src1_data;                                                               // rsp_demux_001:src1_data -> rsp_mux_001:sink0_data
	wire         rsp_demux_001_src1_ready;                                                              // rsp_mux_001:sink0_ready -> rsp_demux_001:src1_ready
	wire  [17:0] rsp_demux_001_src1_channel;                                                            // rsp_demux_001:src1_channel -> rsp_mux_001:sink0_channel
	wire         rsp_demux_001_src1_startofpacket;                                                      // rsp_demux_001:src1_startofpacket -> rsp_mux_001:sink0_startofpacket
	wire         rsp_demux_001_src1_endofpacket;                                                        // rsp_demux_001:src1_endofpacket -> rsp_mux_001:sink0_endofpacket
	wire         rsp_demux_002_src0_valid;                                                              // rsp_demux_002:src0_valid -> rsp_mux:sink2_valid
	wire  [93:0] rsp_demux_002_src0_data;                                                               // rsp_demux_002:src0_data -> rsp_mux:sink2_data
	wire         rsp_demux_002_src0_ready;                                                              // rsp_mux:sink2_ready -> rsp_demux_002:src0_ready
	wire  [17:0] rsp_demux_002_src0_channel;                                                            // rsp_demux_002:src0_channel -> rsp_mux:sink2_channel
	wire         rsp_demux_002_src0_startofpacket;                                                      // rsp_demux_002:src0_startofpacket -> rsp_mux:sink2_startofpacket
	wire         rsp_demux_002_src0_endofpacket;                                                        // rsp_demux_002:src0_endofpacket -> rsp_mux:sink2_endofpacket
	wire         rsp_demux_002_src1_valid;                                                              // rsp_demux_002:src1_valid -> rsp_mux_001:sink1_valid
	wire  [93:0] rsp_demux_002_src1_data;                                                               // rsp_demux_002:src1_data -> rsp_mux_001:sink1_data
	wire         rsp_demux_002_src1_ready;                                                              // rsp_mux_001:sink1_ready -> rsp_demux_002:src1_ready
	wire  [17:0] rsp_demux_002_src1_channel;                                                            // rsp_demux_002:src1_channel -> rsp_mux_001:sink1_channel
	wire         rsp_demux_002_src1_startofpacket;                                                      // rsp_demux_002:src1_startofpacket -> rsp_mux_001:sink1_startofpacket
	wire         rsp_demux_002_src1_endofpacket;                                                        // rsp_demux_002:src1_endofpacket -> rsp_mux_001:sink1_endofpacket
	wire         rsp_demux_003_src0_valid;                                                              // rsp_demux_003:src0_valid -> rsp_mux:sink3_valid
	wire  [93:0] rsp_demux_003_src0_data;                                                               // rsp_demux_003:src0_data -> rsp_mux:sink3_data
	wire         rsp_demux_003_src0_ready;                                                              // rsp_mux:sink3_ready -> rsp_demux_003:src0_ready
	wire  [17:0] rsp_demux_003_src0_channel;                                                            // rsp_demux_003:src0_channel -> rsp_mux:sink3_channel
	wire         rsp_demux_003_src0_startofpacket;                                                      // rsp_demux_003:src0_startofpacket -> rsp_mux:sink3_startofpacket
	wire         rsp_demux_003_src0_endofpacket;                                                        // rsp_demux_003:src0_endofpacket -> rsp_mux:sink3_endofpacket
	wire         rsp_demux_004_src0_valid;                                                              // rsp_demux_004:src0_valid -> rsp_mux:sink4_valid
	wire  [93:0] rsp_demux_004_src0_data;                                                               // rsp_demux_004:src0_data -> rsp_mux:sink4_data
	wire         rsp_demux_004_src0_ready;                                                              // rsp_mux:sink4_ready -> rsp_demux_004:src0_ready
	wire  [17:0] rsp_demux_004_src0_channel;                                                            // rsp_demux_004:src0_channel -> rsp_mux:sink4_channel
	wire         rsp_demux_004_src0_startofpacket;                                                      // rsp_demux_004:src0_startofpacket -> rsp_mux:sink4_startofpacket
	wire         rsp_demux_004_src0_endofpacket;                                                        // rsp_demux_004:src0_endofpacket -> rsp_mux:sink4_endofpacket
	wire         rsp_demux_005_src0_valid;                                                              // rsp_demux_005:src0_valid -> rsp_mux:sink5_valid
	wire  [93:0] rsp_demux_005_src0_data;                                                               // rsp_demux_005:src0_data -> rsp_mux:sink5_data
	wire         rsp_demux_005_src0_ready;                                                              // rsp_mux:sink5_ready -> rsp_demux_005:src0_ready
	wire  [17:0] rsp_demux_005_src0_channel;                                                            // rsp_demux_005:src0_channel -> rsp_mux:sink5_channel
	wire         rsp_demux_005_src0_startofpacket;                                                      // rsp_demux_005:src0_startofpacket -> rsp_mux:sink5_startofpacket
	wire         rsp_demux_005_src0_endofpacket;                                                        // rsp_demux_005:src0_endofpacket -> rsp_mux:sink5_endofpacket
	wire         rsp_demux_006_src0_valid;                                                              // rsp_demux_006:src0_valid -> rsp_mux:sink6_valid
	wire  [93:0] rsp_demux_006_src0_data;                                                               // rsp_demux_006:src0_data -> rsp_mux:sink6_data
	wire         rsp_demux_006_src0_ready;                                                              // rsp_mux:sink6_ready -> rsp_demux_006:src0_ready
	wire  [17:0] rsp_demux_006_src0_channel;                                                            // rsp_demux_006:src0_channel -> rsp_mux:sink6_channel
	wire         rsp_demux_006_src0_startofpacket;                                                      // rsp_demux_006:src0_startofpacket -> rsp_mux:sink6_startofpacket
	wire         rsp_demux_006_src0_endofpacket;                                                        // rsp_demux_006:src0_endofpacket -> rsp_mux:sink6_endofpacket
	wire         rsp_demux_007_src0_valid;                                                              // rsp_demux_007:src0_valid -> rsp_mux:sink7_valid
	wire  [93:0] rsp_demux_007_src0_data;                                                               // rsp_demux_007:src0_data -> rsp_mux:sink7_data
	wire         rsp_demux_007_src0_ready;                                                              // rsp_mux:sink7_ready -> rsp_demux_007:src0_ready
	wire  [17:0] rsp_demux_007_src0_channel;                                                            // rsp_demux_007:src0_channel -> rsp_mux:sink7_channel
	wire         rsp_demux_007_src0_startofpacket;                                                      // rsp_demux_007:src0_startofpacket -> rsp_mux:sink7_startofpacket
	wire         rsp_demux_007_src0_endofpacket;                                                        // rsp_demux_007:src0_endofpacket -> rsp_mux:sink7_endofpacket
	wire         rsp_demux_008_src0_valid;                                                              // rsp_demux_008:src0_valid -> rsp_mux:sink8_valid
	wire  [93:0] rsp_demux_008_src0_data;                                                               // rsp_demux_008:src0_data -> rsp_mux:sink8_data
	wire         rsp_demux_008_src0_ready;                                                              // rsp_mux:sink8_ready -> rsp_demux_008:src0_ready
	wire  [17:0] rsp_demux_008_src0_channel;                                                            // rsp_demux_008:src0_channel -> rsp_mux:sink8_channel
	wire         rsp_demux_008_src0_startofpacket;                                                      // rsp_demux_008:src0_startofpacket -> rsp_mux:sink8_startofpacket
	wire         rsp_demux_008_src0_endofpacket;                                                        // rsp_demux_008:src0_endofpacket -> rsp_mux:sink8_endofpacket
	wire         rsp_demux_009_src0_valid;                                                              // rsp_demux_009:src0_valid -> rsp_mux:sink9_valid
	wire  [93:0] rsp_demux_009_src0_data;                                                               // rsp_demux_009:src0_data -> rsp_mux:sink9_data
	wire         rsp_demux_009_src0_ready;                                                              // rsp_mux:sink9_ready -> rsp_demux_009:src0_ready
	wire  [17:0] rsp_demux_009_src0_channel;                                                            // rsp_demux_009:src0_channel -> rsp_mux:sink9_channel
	wire         rsp_demux_009_src0_startofpacket;                                                      // rsp_demux_009:src0_startofpacket -> rsp_mux:sink9_startofpacket
	wire         rsp_demux_009_src0_endofpacket;                                                        // rsp_demux_009:src0_endofpacket -> rsp_mux:sink9_endofpacket
	wire         rsp_demux_010_src0_valid;                                                              // rsp_demux_010:src0_valid -> rsp_mux:sink10_valid
	wire  [93:0] rsp_demux_010_src0_data;                                                               // rsp_demux_010:src0_data -> rsp_mux:sink10_data
	wire         rsp_demux_010_src0_ready;                                                              // rsp_mux:sink10_ready -> rsp_demux_010:src0_ready
	wire  [17:0] rsp_demux_010_src0_channel;                                                            // rsp_demux_010:src0_channel -> rsp_mux:sink10_channel
	wire         rsp_demux_010_src0_startofpacket;                                                      // rsp_demux_010:src0_startofpacket -> rsp_mux:sink10_startofpacket
	wire         rsp_demux_010_src0_endofpacket;                                                        // rsp_demux_010:src0_endofpacket -> rsp_mux:sink10_endofpacket
	wire         rsp_demux_011_src0_valid;                                                              // rsp_demux_011:src0_valid -> rsp_mux:sink11_valid
	wire  [93:0] rsp_demux_011_src0_data;                                                               // rsp_demux_011:src0_data -> rsp_mux:sink11_data
	wire         rsp_demux_011_src0_ready;                                                              // rsp_mux:sink11_ready -> rsp_demux_011:src0_ready
	wire  [17:0] rsp_demux_011_src0_channel;                                                            // rsp_demux_011:src0_channel -> rsp_mux:sink11_channel
	wire         rsp_demux_011_src0_startofpacket;                                                      // rsp_demux_011:src0_startofpacket -> rsp_mux:sink11_startofpacket
	wire         rsp_demux_011_src0_endofpacket;                                                        // rsp_demux_011:src0_endofpacket -> rsp_mux:sink11_endofpacket
	wire         rsp_demux_012_src0_valid;                                                              // rsp_demux_012:src0_valid -> rsp_mux:sink12_valid
	wire  [93:0] rsp_demux_012_src0_data;                                                               // rsp_demux_012:src0_data -> rsp_mux:sink12_data
	wire         rsp_demux_012_src0_ready;                                                              // rsp_mux:sink12_ready -> rsp_demux_012:src0_ready
	wire  [17:0] rsp_demux_012_src0_channel;                                                            // rsp_demux_012:src0_channel -> rsp_mux:sink12_channel
	wire         rsp_demux_012_src0_startofpacket;                                                      // rsp_demux_012:src0_startofpacket -> rsp_mux:sink12_startofpacket
	wire         rsp_demux_012_src0_endofpacket;                                                        // rsp_demux_012:src0_endofpacket -> rsp_mux:sink12_endofpacket
	wire         rsp_demux_013_src0_valid;                                                              // rsp_demux_013:src0_valid -> rsp_mux:sink13_valid
	wire  [93:0] rsp_demux_013_src0_data;                                                               // rsp_demux_013:src0_data -> rsp_mux:sink13_data
	wire         rsp_demux_013_src0_ready;                                                              // rsp_mux:sink13_ready -> rsp_demux_013:src0_ready
	wire  [17:0] rsp_demux_013_src0_channel;                                                            // rsp_demux_013:src0_channel -> rsp_mux:sink13_channel
	wire         rsp_demux_013_src0_startofpacket;                                                      // rsp_demux_013:src0_startofpacket -> rsp_mux:sink13_startofpacket
	wire         rsp_demux_013_src0_endofpacket;                                                        // rsp_demux_013:src0_endofpacket -> rsp_mux:sink13_endofpacket
	wire         rsp_demux_014_src0_valid;                                                              // rsp_demux_014:src0_valid -> rsp_mux:sink14_valid
	wire  [93:0] rsp_demux_014_src0_data;                                                               // rsp_demux_014:src0_data -> rsp_mux:sink14_data
	wire         rsp_demux_014_src0_ready;                                                              // rsp_mux:sink14_ready -> rsp_demux_014:src0_ready
	wire  [17:0] rsp_demux_014_src0_channel;                                                            // rsp_demux_014:src0_channel -> rsp_mux:sink14_channel
	wire         rsp_demux_014_src0_startofpacket;                                                      // rsp_demux_014:src0_startofpacket -> rsp_mux:sink14_startofpacket
	wire         rsp_demux_014_src0_endofpacket;                                                        // rsp_demux_014:src0_endofpacket -> rsp_mux:sink14_endofpacket
	wire         rsp_demux_015_src0_valid;                                                              // rsp_demux_015:src0_valid -> rsp_mux:sink15_valid
	wire  [93:0] rsp_demux_015_src0_data;                                                               // rsp_demux_015:src0_data -> rsp_mux:sink15_data
	wire         rsp_demux_015_src0_ready;                                                              // rsp_mux:sink15_ready -> rsp_demux_015:src0_ready
	wire  [17:0] rsp_demux_015_src0_channel;                                                            // rsp_demux_015:src0_channel -> rsp_mux:sink15_channel
	wire         rsp_demux_015_src0_startofpacket;                                                      // rsp_demux_015:src0_startofpacket -> rsp_mux:sink15_startofpacket
	wire         rsp_demux_015_src0_endofpacket;                                                        // rsp_demux_015:src0_endofpacket -> rsp_mux:sink15_endofpacket
	wire         rsp_demux_016_src0_valid;                                                              // rsp_demux_016:src0_valid -> rsp_mux:sink16_valid
	wire  [93:0] rsp_demux_016_src0_data;                                                               // rsp_demux_016:src0_data -> rsp_mux:sink16_data
	wire         rsp_demux_016_src0_ready;                                                              // rsp_mux:sink16_ready -> rsp_demux_016:src0_ready
	wire  [17:0] rsp_demux_016_src0_channel;                                                            // rsp_demux_016:src0_channel -> rsp_mux:sink16_channel
	wire         rsp_demux_016_src0_startofpacket;                                                      // rsp_demux_016:src0_startofpacket -> rsp_mux:sink16_startofpacket
	wire         rsp_demux_016_src0_endofpacket;                                                        // rsp_demux_016:src0_endofpacket -> rsp_mux:sink16_endofpacket
	wire         rsp_demux_017_src0_valid;                                                              // rsp_demux_017:src0_valid -> rsp_mux:sink17_valid
	wire  [93:0] rsp_demux_017_src0_data;                                                               // rsp_demux_017:src0_data -> rsp_mux:sink17_data
	wire         rsp_demux_017_src0_ready;                                                              // rsp_mux:sink17_ready -> rsp_demux_017:src0_ready
	wire  [17:0] rsp_demux_017_src0_channel;                                                            // rsp_demux_017:src0_channel -> rsp_mux:sink17_channel
	wire         rsp_demux_017_src0_startofpacket;                                                      // rsp_demux_017:src0_startofpacket -> rsp_mux:sink17_startofpacket
	wire         rsp_demux_017_src0_endofpacket;                                                        // rsp_demux_017:src0_endofpacket -> rsp_mux:sink17_endofpacket
	wire         jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_valid;                                // jtag_uart_avalon_jtag_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter:in_0_valid
	wire  [33:0] jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_data;                                 // jtag_uart_avalon_jtag_slave_agent:rdata_fifo_src_data -> avalon_st_adapter:in_0_data
	wire         jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_ready;                                // avalon_st_adapter:in_0_ready -> jtag_uart_avalon_jtag_slave_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_out_0_valid;                                                         // avalon_st_adapter:out_0_valid -> jtag_uart_avalon_jtag_slave_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_out_0_data;                                                          // avalon_st_adapter:out_0_data -> jtag_uart_avalon_jtag_slave_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_out_0_ready;                                                         // jtag_uart_avalon_jtag_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter:out_0_ready
	wire   [0:0] avalon_st_adapter_out_0_error;                                                         // avalon_st_adapter:out_0_error -> jtag_uart_avalon_jtag_slave_agent:rdata_fifo_sink_error
	wire         nios2_processor_debug_mem_slave_agent_rdata_fifo_src_valid;                            // nios2_processor_debug_mem_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter_001:in_0_valid
	wire  [33:0] nios2_processor_debug_mem_slave_agent_rdata_fifo_src_data;                             // nios2_processor_debug_mem_slave_agent:rdata_fifo_src_data -> avalon_st_adapter_001:in_0_data
	wire         nios2_processor_debug_mem_slave_agent_rdata_fifo_src_ready;                            // avalon_st_adapter_001:in_0_ready -> nios2_processor_debug_mem_slave_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_001_out_0_valid;                                                     // avalon_st_adapter_001:out_0_valid -> nios2_processor_debug_mem_slave_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_001_out_0_data;                                                      // avalon_st_adapter_001:out_0_data -> nios2_processor_debug_mem_slave_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_001_out_0_ready;                                                     // nios2_processor_debug_mem_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_001:out_0_ready
	wire   [0:0] avalon_st_adapter_001_out_0_error;                                                     // avalon_st_adapter_001:out_0_error -> nios2_processor_debug_mem_slave_agent:rdata_fifo_sink_error
	wire         onchip_memory_s1_agent_rdata_fifo_src_valid;                                           // onchip_memory_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_002:in_0_valid
	wire  [33:0] onchip_memory_s1_agent_rdata_fifo_src_data;                                            // onchip_memory_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_002:in_0_data
	wire         onchip_memory_s1_agent_rdata_fifo_src_ready;                                           // avalon_st_adapter_002:in_0_ready -> onchip_memory_s1_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_002_out_0_valid;                                                     // avalon_st_adapter_002:out_0_valid -> onchip_memory_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_002_out_0_data;                                                      // avalon_st_adapter_002:out_0_data -> onchip_memory_s1_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_002_out_0_ready;                                                     // onchip_memory_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_002:out_0_ready
	wire   [0:0] avalon_st_adapter_002_out_0_error;                                                     // avalon_st_adapter_002:out_0_error -> onchip_memory_s1_agent:rdata_fifo_sink_error
	wire         filling_s1_agent_rdata_fifo_src_valid;                                                 // Filling_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_003:in_0_valid
	wire  [33:0] filling_s1_agent_rdata_fifo_src_data;                                                  // Filling_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_003:in_0_data
	wire         filling_s1_agent_rdata_fifo_src_ready;                                                 // avalon_st_adapter_003:in_0_ready -> Filling_s1_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_003_out_0_valid;                                                     // avalon_st_adapter_003:out_0_valid -> Filling_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_003_out_0_data;                                                      // avalon_st_adapter_003:out_0_data -> Filling_s1_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_003_out_0_ready;                                                     // Filling_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_003:out_0_ready
	wire   [0:0] avalon_st_adapter_003_out_0_error;                                                     // avalon_st_adapter_003:out_0_error -> Filling_s1_agent:rdata_fifo_sink_error
	wire         draining_s1_agent_rdata_fifo_src_valid;                                                // Draining_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_004:in_0_valid
	wire  [33:0] draining_s1_agent_rdata_fifo_src_data;                                                 // Draining_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_004:in_0_data
	wire         draining_s1_agent_rdata_fifo_src_ready;                                                // avalon_st_adapter_004:in_0_ready -> Draining_s1_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_004_out_0_valid;                                                     // avalon_st_adapter_004:out_0_valid -> Draining_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_004_out_0_data;                                                      // avalon_st_adapter_004:out_0_data -> Draining_s1_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_004_out_0_ready;                                                     // Draining_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_004:out_0_ready
	wire   [0:0] avalon_st_adapter_004_out_0_error;                                                     // avalon_st_adapter_004:out_0_error -> Draining_s1_agent:rdata_fifo_sink_error
	wire         innerdoor_s1_agent_rdata_fifo_src_valid;                                               // innerDoor_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_005:in_0_valid
	wire  [33:0] innerdoor_s1_agent_rdata_fifo_src_data;                                                // innerDoor_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_005:in_0_data
	wire         innerdoor_s1_agent_rdata_fifo_src_ready;                                               // avalon_st_adapter_005:in_0_ready -> innerDoor_s1_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_005_out_0_valid;                                                     // avalon_st_adapter_005:out_0_valid -> innerDoor_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_005_out_0_data;                                                      // avalon_st_adapter_005:out_0_data -> innerDoor_s1_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_005_out_0_ready;                                                     // innerDoor_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_005:out_0_ready
	wire   [0:0] avalon_st_adapter_005_out_0_error;                                                     // avalon_st_adapter_005:out_0_error -> innerDoor_s1_agent:rdata_fifo_sink_error
	wire         outerdoor_s1_agent_rdata_fifo_src_valid;                                               // outerDoor_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_006:in_0_valid
	wire  [33:0] outerdoor_s1_agent_rdata_fifo_src_data;                                                // outerDoor_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_006:in_0_data
	wire         outerdoor_s1_agent_rdata_fifo_src_ready;                                               // avalon_st_adapter_006:in_0_ready -> outerDoor_s1_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_006_out_0_valid;                                                     // avalon_st_adapter_006:out_0_valid -> outerDoor_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_006_out_0_data;                                                      // avalon_st_adapter_006:out_0_data -> outerDoor_s1_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_006_out_0_ready;                                                     // outerDoor_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_006:out_0_ready
	wire   [0:0] avalon_st_adapter_006_out_0_error;                                                     // avalon_st_adapter_006:out_0_error -> outerDoor_s1_agent:rdata_fifo_sink_error
	wire         resetleds_s1_agent_rdata_fifo_src_valid;                                               // resetLeds_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_007:in_0_valid
	wire  [33:0] resetleds_s1_agent_rdata_fifo_src_data;                                                // resetLeds_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_007:in_0_data
	wire         resetleds_s1_agent_rdata_fifo_src_ready;                                               // avalon_st_adapter_007:in_0_ready -> resetLeds_s1_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_007_out_0_valid;                                                     // avalon_st_adapter_007:out_0_valid -> resetLeds_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_007_out_0_data;                                                      // avalon_st_adapter_007:out_0_data -> resetLeds_s1_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_007_out_0_ready;                                                     // resetLeds_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_007:out_0_ready
	wire   [0:0] avalon_st_adapter_007_out_0_error;                                                     // avalon_st_adapter_007:out_0_error -> resetLeds_s1_agent:rdata_fifo_sink_error
	wire         bathleaving_s1_agent_rdata_fifo_src_valid;                                             // bathLeaving_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_008:in_0_valid
	wire  [33:0] bathleaving_s1_agent_rdata_fifo_src_data;                                              // bathLeaving_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_008:in_0_data
	wire         bathleaving_s1_agent_rdata_fifo_src_ready;                                             // avalon_st_adapter_008:in_0_ready -> bathLeaving_s1_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_008_out_0_valid;                                                     // avalon_st_adapter_008:out_0_valid -> bathLeaving_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_008_out_0_data;                                                      // avalon_st_adapter_008:out_0_data -> bathLeaving_s1_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_008_out_0_ready;                                                     // bathLeaving_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_008:out_0_ready
	wire   [0:0] avalon_st_adapter_008_out_0_error;                                                     // avalon_st_adapter_008:out_0_error -> bathLeaving_s1_agent:rdata_fifo_sink_error
	wire         batharriving_s1_agent_rdata_fifo_src_valid;                                            // bathArriving_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_009:in_0_valid
	wire  [33:0] batharriving_s1_agent_rdata_fifo_src_data;                                             // bathArriving_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_009:in_0_data
	wire         batharriving_s1_agent_rdata_fifo_src_ready;                                            // avalon_st_adapter_009:in_0_ready -> bathArriving_s1_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_009_out_0_valid;                                                     // avalon_st_adapter_009:out_0_valid -> bathArriving_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_009_out_0_data;                                                      // avalon_st_adapter_009:out_0_data -> bathArriving_s1_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_009_out_0_ready;                                                     // bathArriving_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_009:out_0_ready
	wire   [0:0] avalon_st_adapter_009_out_0_error;                                                     // avalon_st_adapter_009:out_0_error -> bathArriving_s1_agent:rdata_fifo_sink_error
	wire         personcheck_s1_agent_rdata_fifo_src_valid;                                             // personCheck_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_010:in_0_valid
	wire  [33:0] personcheck_s1_agent_rdata_fifo_src_data;                                              // personCheck_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_010:in_0_data
	wire         personcheck_s1_agent_rdata_fifo_src_ready;                                             // avalon_st_adapter_010:in_0_ready -> personCheck_s1_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_010_out_0_valid;                                                     // avalon_st_adapter_010:out_0_valid -> personCheck_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_010_out_0_data;                                                      // avalon_st_adapter_010:out_0_data -> personCheck_s1_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_010_out_0_ready;                                                     // personCheck_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_010:out_0_ready
	wire   [0:0] avalon_st_adapter_010_out_0_error;                                                     // avalon_st_adapter_010:out_0_error -> personCheck_s1_agent:rdata_fifo_sink_error
	wire         pressurecheck_s1_agent_rdata_fifo_src_valid;                                           // pressureCheck_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_011:in_0_valid
	wire  [33:0] pressurecheck_s1_agent_rdata_fifo_src_data;                                            // pressureCheck_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_011:in_0_data
	wire         pressurecheck_s1_agent_rdata_fifo_src_ready;                                           // avalon_st_adapter_011:in_0_ready -> pressureCheck_s1_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_011_out_0_valid;                                                     // avalon_st_adapter_011:out_0_valid -> pressureCheck_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_011_out_0_data;                                                      // avalon_st_adapter_011:out_0_data -> pressureCheck_s1_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_011_out_0_ready;                                                     // pressureCheck_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_011:out_0_ready
	wire   [0:0] avalon_st_adapter_011_out_0_error;                                                     // avalon_st_adapter_011:out_0_error -> pressureCheck_s1_agent:rdata_fifo_sink_error
	wire         innerdoorswitch_s1_agent_rdata_fifo_src_valid;                                         // innerDoorSwitch_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_012:in_0_valid
	wire  [33:0] innerdoorswitch_s1_agent_rdata_fifo_src_data;                                          // innerDoorSwitch_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_012:in_0_data
	wire         innerdoorswitch_s1_agent_rdata_fifo_src_ready;                                         // avalon_st_adapter_012:in_0_ready -> innerDoorSwitch_s1_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_012_out_0_valid;                                                     // avalon_st_adapter_012:out_0_valid -> innerDoorSwitch_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_012_out_0_data;                                                      // avalon_st_adapter_012:out_0_data -> innerDoorSwitch_s1_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_012_out_0_ready;                                                     // innerDoorSwitch_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_012:out_0_ready
	wire   [0:0] avalon_st_adapter_012_out_0_error;                                                     // avalon_st_adapter_012:out_0_error -> innerDoorSwitch_s1_agent:rdata_fifo_sink_error
	wire         outerdoorswitch_s1_agent_rdata_fifo_src_valid;                                         // outerDoorSwitch_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_013:in_0_valid
	wire  [33:0] outerdoorswitch_s1_agent_rdata_fifo_src_data;                                          // outerDoorSwitch_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_013:in_0_data
	wire         outerdoorswitch_s1_agent_rdata_fifo_src_ready;                                         // avalon_st_adapter_013:in_0_ready -> outerDoorSwitch_s1_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_013_out_0_valid;                                                     // avalon_st_adapter_013:out_0_valid -> outerDoorSwitch_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_013_out_0_data;                                                      // avalon_st_adapter_013:out_0_data -> outerDoorSwitch_s1_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_013_out_0_ready;                                                     // outerDoorSwitch_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_013:out_0_ready
	wire   [0:0] avalon_st_adapter_013_out_0_error;                                                     // avalon_st_adapter_013:out_0_error -> outerDoorSwitch_s1_agent:rdata_fifo_sink_error
	wire         drainfinished_s1_agent_rdata_fifo_src_valid;                                           // drainFinished_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_014:in_0_valid
	wire  [33:0] drainfinished_s1_agent_rdata_fifo_src_data;                                            // drainFinished_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_014:in_0_data
	wire         drainfinished_s1_agent_rdata_fifo_src_ready;                                           // avalon_st_adapter_014:in_0_ready -> drainFinished_s1_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_014_out_0_valid;                                                     // avalon_st_adapter_014:out_0_valid -> drainFinished_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_014_out_0_data;                                                      // avalon_st_adapter_014:out_0_data -> drainFinished_s1_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_014_out_0_ready;                                                     // drainFinished_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_014:out_0_ready
	wire   [0:0] avalon_st_adapter_014_out_0_error;                                                     // avalon_st_adapter_014:out_0_error -> drainFinished_s1_agent:rdata_fifo_sink_error
	wire         fillfinished_s1_agent_rdata_fifo_src_valid;                                            // fillFinished_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_015:in_0_valid
	wire  [33:0] fillfinished_s1_agent_rdata_fifo_src_data;                                             // fillFinished_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_015:in_0_data
	wire         fillfinished_s1_agent_rdata_fifo_src_ready;                                            // avalon_st_adapter_015:in_0_ready -> fillFinished_s1_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_015_out_0_valid;                                                     // avalon_st_adapter_015:out_0_valid -> fillFinished_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_015_out_0_data;                                                      // avalon_st_adapter_015:out_0_data -> fillFinished_s1_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_015_out_0_ready;                                                     // fillFinished_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_015:out_0_ready
	wire   [0:0] avalon_st_adapter_015_out_0_error;                                                     // avalon_st_adapter_015:out_0_error -> fillFinished_s1_agent:rdata_fifo_sink_error
	wire         waitfinished_s1_agent_rdata_fifo_src_valid;                                            // waitFinished_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_016:in_0_valid
	wire  [33:0] waitfinished_s1_agent_rdata_fifo_src_data;                                             // waitFinished_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_016:in_0_data
	wire         waitfinished_s1_agent_rdata_fifo_src_ready;                                            // avalon_st_adapter_016:in_0_ready -> waitFinished_s1_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_016_out_0_valid;                                                     // avalon_st_adapter_016:out_0_valid -> waitFinished_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_016_out_0_data;                                                      // avalon_st_adapter_016:out_0_data -> waitFinished_s1_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_016_out_0_ready;                                                     // waitFinished_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_016:out_0_ready
	wire   [0:0] avalon_st_adapter_016_out_0_error;                                                     // avalon_st_adapter_016:out_0_error -> waitFinished_s1_agent:rdata_fifo_sink_error
	wire         waiting_s1_agent_rdata_fifo_src_valid;                                                 // waiting_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_017:in_0_valid
	wire  [33:0] waiting_s1_agent_rdata_fifo_src_data;                                                  // waiting_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_017:in_0_data
	wire         waiting_s1_agent_rdata_fifo_src_ready;                                                 // avalon_st_adapter_017:in_0_ready -> waiting_s1_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_017_out_0_valid;                                                     // avalon_st_adapter_017:out_0_valid -> waiting_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_017_out_0_data;                                                      // avalon_st_adapter_017:out_0_data -> waiting_s1_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_017_out_0_ready;                                                     // waiting_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_017:out_0_ready
	wire   [0:0] avalon_st_adapter_017_out_0_error;                                                     // avalon_st_adapter_017:out_0_error -> waiting_s1_agent:rdata_fifo_sink_error

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (14),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (14),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (1)
	) nios2_processor_data_master_translator (
		.clk                    (clk_0_clk_clk),                                                                  //                       clk.clk
		.reset                  (nios2_processor_reset_reset_bridge_in_reset_reset),                              //                     reset.reset
		.uav_address            (nios2_processor_data_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (nios2_processor_data_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (nios2_processor_data_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (nios2_processor_data_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (nios2_processor_data_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (nios2_processor_data_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (nios2_processor_data_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (nios2_processor_data_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (nios2_processor_data_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (nios2_processor_data_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (nios2_processor_data_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (nios2_processor_data_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (nios2_processor_data_master_waitrequest),                                        //                          .waitrequest
		.av_byteenable          (nios2_processor_data_master_byteenable),                                         //                          .byteenable
		.av_read                (nios2_processor_data_master_read),                                               //                          .read
		.av_readdata            (nios2_processor_data_master_readdata),                                           //                          .readdata
		.av_write               (nios2_processor_data_master_write),                                              //                          .write
		.av_writedata           (nios2_processor_data_master_writedata),                                          //                          .writedata
		.av_debugaccess         (nios2_processor_data_master_debugaccess),                                        //                          .debugaccess
		.av_burstcount          (1'b1),                                                                           //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                           //               (terminated)
		.av_begintransfer       (1'b0),                                                                           //               (terminated)
		.av_chipselect          (1'b0),                                                                           //               (terminated)
		.av_readdatavalid       (),                                                                               //               (terminated)
		.av_lock                (1'b0),                                                                           //               (terminated)
		.uav_clken              (),                                                                               //               (terminated)
		.av_clken               (1'b1),                                                                           //               (terminated)
		.uav_response           (2'b00),                                                                          //               (terminated)
		.av_response            (),                                                                               //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                           //               (terminated)
		.av_writeresponsevalid  ()                                                                                //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (14),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (14),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (0),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (1),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) nios2_processor_instruction_master_translator (
		.clk                    (clk_0_clk_clk),                                                                         //                       clk.clk
		.reset                  (nios2_processor_reset_reset_bridge_in_reset_reset),                                     //                     reset.reset
		.uav_address            (nios2_processor_instruction_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (nios2_processor_instruction_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (nios2_processor_instruction_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (nios2_processor_instruction_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (nios2_processor_instruction_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (nios2_processor_instruction_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (nios2_processor_instruction_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (nios2_processor_instruction_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (nios2_processor_instruction_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (nios2_processor_instruction_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (nios2_processor_instruction_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (nios2_processor_instruction_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (nios2_processor_instruction_master_waitrequest),                                        //                          .waitrequest
		.av_read                (nios2_processor_instruction_master_read),                                               //                          .read
		.av_readdata            (nios2_processor_instruction_master_readdata),                                           //                          .readdata
		.av_burstcount          (1'b1),                                                                                  //               (terminated)
		.av_byteenable          (4'b1111),                                                                               //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                                  //               (terminated)
		.av_begintransfer       (1'b0),                                                                                  //               (terminated)
		.av_chipselect          (1'b0),                                                                                  //               (terminated)
		.av_readdatavalid       (),                                                                                      //               (terminated)
		.av_write               (1'b0),                                                                                  //               (terminated)
		.av_writedata           (32'b00000000000000000000000000000000),                                                  //               (terminated)
		.av_lock                (1'b0),                                                                                  //               (terminated)
		.av_debugaccess         (1'b0),                                                                                  //               (terminated)
		.uav_clken              (),                                                                                      //               (terminated)
		.av_clken               (1'b1),                                                                                  //               (terminated)
		.uav_response           (2'b00),                                                                                 //               (terminated)
		.av_response            (),                                                                                      //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                                  //               (terminated)
		.av_writeresponsevalid  ()                                                                                       //               (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (14),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) jtag_uart_avalon_jtag_slave_translator (
		.clk                    (clk_0_clk_clk),                                      //                      clk.clk
		.reset                  (nios2_processor_reset_reset_bridge_in_reset_reset),  //                    reset.reset
		.uav_address            (jtag_uart_avalon_jtag_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (jtag_uart_avalon_jtag_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (jtag_uart_avalon_jtag_slave_agent_m0_read),          //                         .read
		.uav_write              (jtag_uart_avalon_jtag_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (jtag_uart_avalon_jtag_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (jtag_uart_avalon_jtag_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (jtag_uart_avalon_jtag_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (jtag_uart_avalon_jtag_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (jtag_uart_avalon_jtag_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (jtag_uart_avalon_jtag_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (jtag_uart_avalon_jtag_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (jtag_uart_avalon_jtag_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (jtag_uart_avalon_jtag_slave_write),                  //                         .write
		.av_read                (jtag_uart_avalon_jtag_slave_read),                   //                         .read
		.av_readdata            (jtag_uart_avalon_jtag_slave_readdata),               //                         .readdata
		.av_writedata           (jtag_uart_avalon_jtag_slave_writedata),              //                         .writedata
		.av_waitrequest         (jtag_uart_avalon_jtag_slave_waitrequest),            //                         .waitrequest
		.av_chipselect          (jtag_uart_avalon_jtag_slave_chipselect),             //                         .chipselect
		.av_begintransfer       (),                                                   //              (terminated)
		.av_beginbursttransfer  (),                                                   //              (terminated)
		.av_burstcount          (),                                                   //              (terminated)
		.av_byteenable          (),                                                   //              (terminated)
		.av_readdatavalid       (1'b0),                                               //              (terminated)
		.av_writebyteenable     (),                                                   //              (terminated)
		.av_lock                (),                                                   //              (terminated)
		.av_clken               (),                                                   //              (terminated)
		.uav_clken              (1'b0),                                               //              (terminated)
		.av_debugaccess         (),                                                   //              (terminated)
		.av_outputenable        (),                                                   //              (terminated)
		.uav_response           (),                                                   //              (terminated)
		.av_response            (2'b00),                                              //              (terminated)
		.uav_writeresponsevalid (),                                                   //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (9),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (14),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) nios2_processor_debug_mem_slave_translator (
		.clk                    (clk_0_clk_clk),                                          //                      clk.clk
		.reset                  (nios2_processor_reset_reset_bridge_in_reset_reset),      //                    reset.reset
		.uav_address            (nios2_processor_debug_mem_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (nios2_processor_debug_mem_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (nios2_processor_debug_mem_slave_agent_m0_read),          //                         .read
		.uav_write              (nios2_processor_debug_mem_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (nios2_processor_debug_mem_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (nios2_processor_debug_mem_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (nios2_processor_debug_mem_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (nios2_processor_debug_mem_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (nios2_processor_debug_mem_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (nios2_processor_debug_mem_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (nios2_processor_debug_mem_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (nios2_processor_debug_mem_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (nios2_processor_debug_mem_slave_write),                  //                         .write
		.av_read                (nios2_processor_debug_mem_slave_read),                   //                         .read
		.av_readdata            (nios2_processor_debug_mem_slave_readdata),               //                         .readdata
		.av_writedata           (nios2_processor_debug_mem_slave_writedata),              //                         .writedata
		.av_byteenable          (nios2_processor_debug_mem_slave_byteenable),             //                         .byteenable
		.av_waitrequest         (nios2_processor_debug_mem_slave_waitrequest),            //                         .waitrequest
		.av_debugaccess         (nios2_processor_debug_mem_slave_debugaccess),            //                         .debugaccess
		.av_begintransfer       (),                                                       //              (terminated)
		.av_beginbursttransfer  (),                                                       //              (terminated)
		.av_burstcount          (),                                                       //              (terminated)
		.av_readdatavalid       (1'b0),                                                   //              (terminated)
		.av_writebyteenable     (),                                                       //              (terminated)
		.av_lock                (),                                                       //              (terminated)
		.av_chipselect          (),                                                       //              (terminated)
		.av_clken               (),                                                       //              (terminated)
		.uav_clken              (1'b0),                                                   //              (terminated)
		.av_outputenable        (),                                                       //              (terminated)
		.uav_response           (),                                                       //              (terminated)
		.av_response            (2'b00),                                                  //              (terminated)
		.uav_writeresponsevalid (),                                                       //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                    //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (10),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (14),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) onchip_memory_s1_translator (
		.clk                    (clk_0_clk_clk),                                     //                      clk.clk
		.reset                  (nios2_processor_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (onchip_memory_s1_agent_m0_address),                 // avalon_universal_slave_0.address
		.uav_burstcount         (onchip_memory_s1_agent_m0_burstcount),              //                         .burstcount
		.uav_read               (onchip_memory_s1_agent_m0_read),                    //                         .read
		.uav_write              (onchip_memory_s1_agent_m0_write),                   //                         .write
		.uav_waitrequest        (onchip_memory_s1_agent_m0_waitrequest),             //                         .waitrequest
		.uav_readdatavalid      (onchip_memory_s1_agent_m0_readdatavalid),           //                         .readdatavalid
		.uav_byteenable         (onchip_memory_s1_agent_m0_byteenable),              //                         .byteenable
		.uav_readdata           (onchip_memory_s1_agent_m0_readdata),                //                         .readdata
		.uav_writedata          (onchip_memory_s1_agent_m0_writedata),               //                         .writedata
		.uav_lock               (onchip_memory_s1_agent_m0_lock),                    //                         .lock
		.uav_debugaccess        (onchip_memory_s1_agent_m0_debugaccess),             //                         .debugaccess
		.av_address             (onchip_memory_s1_address),                          //      avalon_anti_slave_0.address
		.av_write               (onchip_memory_s1_write),                            //                         .write
		.av_readdata            (onchip_memory_s1_readdata),                         //                         .readdata
		.av_writedata           (onchip_memory_s1_writedata),                        //                         .writedata
		.av_byteenable          (onchip_memory_s1_byteenable),                       //                         .byteenable
		.av_chipselect          (onchip_memory_s1_chipselect),                       //                         .chipselect
		.av_clken               (onchip_memory_s1_clken),                            //                         .clken
		.av_read                (),                                                  //              (terminated)
		.av_begintransfer       (),                                                  //              (terminated)
		.av_beginbursttransfer  (),                                                  //              (terminated)
		.av_burstcount          (),                                                  //              (terminated)
		.av_readdatavalid       (1'b0),                                              //              (terminated)
		.av_waitrequest         (1'b0),                                              //              (terminated)
		.av_writebyteenable     (),                                                  //              (terminated)
		.av_lock                (),                                                  //              (terminated)
		.uav_clken              (1'b0),                                              //              (terminated)
		.av_debugaccess         (),                                                  //              (terminated)
		.av_outputenable        (),                                                  //              (terminated)
		.uav_response           (),                                                  //              (terminated)
		.av_response            (2'b00),                                             //              (terminated)
		.uav_writeresponsevalid (),                                                  //              (terminated)
		.av_writeresponsevalid  (1'b0)                                               //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (14),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) filling_s1_translator (
		.clk                    (clk_0_clk_clk),                                     //                      clk.clk
		.reset                  (nios2_processor_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (filling_s1_agent_m0_address),                       // avalon_universal_slave_0.address
		.uav_burstcount         (filling_s1_agent_m0_burstcount),                    //                         .burstcount
		.uav_read               (filling_s1_agent_m0_read),                          //                         .read
		.uav_write              (filling_s1_agent_m0_write),                         //                         .write
		.uav_waitrequest        (filling_s1_agent_m0_waitrequest),                   //                         .waitrequest
		.uav_readdatavalid      (filling_s1_agent_m0_readdatavalid),                 //                         .readdatavalid
		.uav_byteenable         (filling_s1_agent_m0_byteenable),                    //                         .byteenable
		.uav_readdata           (filling_s1_agent_m0_readdata),                      //                         .readdata
		.uav_writedata          (filling_s1_agent_m0_writedata),                     //                         .writedata
		.uav_lock               (filling_s1_agent_m0_lock),                          //                         .lock
		.uav_debugaccess        (filling_s1_agent_m0_debugaccess),                   //                         .debugaccess
		.av_address             (Filling_s1_address),                                //      avalon_anti_slave_0.address
		.av_readdata            (Filling_s1_readdata),                               //                         .readdata
		.av_write               (),                                                  //              (terminated)
		.av_read                (),                                                  //              (terminated)
		.av_writedata           (),                                                  //              (terminated)
		.av_begintransfer       (),                                                  //              (terminated)
		.av_beginbursttransfer  (),                                                  //              (terminated)
		.av_burstcount          (),                                                  //              (terminated)
		.av_byteenable          (),                                                  //              (terminated)
		.av_readdatavalid       (1'b0),                                              //              (terminated)
		.av_waitrequest         (1'b0),                                              //              (terminated)
		.av_writebyteenable     (),                                                  //              (terminated)
		.av_lock                (),                                                  //              (terminated)
		.av_chipselect          (),                                                  //              (terminated)
		.av_clken               (),                                                  //              (terminated)
		.uav_clken              (1'b0),                                              //              (terminated)
		.av_debugaccess         (),                                                  //              (terminated)
		.av_outputenable        (),                                                  //              (terminated)
		.uav_response           (),                                                  //              (terminated)
		.av_response            (2'b00),                                             //              (terminated)
		.uav_writeresponsevalid (),                                                  //              (terminated)
		.av_writeresponsevalid  (1'b0)                                               //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (14),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) draining_s1_translator (
		.clk                    (clk_0_clk_clk),                                     //                      clk.clk
		.reset                  (nios2_processor_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (draining_s1_agent_m0_address),                      // avalon_universal_slave_0.address
		.uav_burstcount         (draining_s1_agent_m0_burstcount),                   //                         .burstcount
		.uav_read               (draining_s1_agent_m0_read),                         //                         .read
		.uav_write              (draining_s1_agent_m0_write),                        //                         .write
		.uav_waitrequest        (draining_s1_agent_m0_waitrequest),                  //                         .waitrequest
		.uav_readdatavalid      (draining_s1_agent_m0_readdatavalid),                //                         .readdatavalid
		.uav_byteenable         (draining_s1_agent_m0_byteenable),                   //                         .byteenable
		.uav_readdata           (draining_s1_agent_m0_readdata),                     //                         .readdata
		.uav_writedata          (draining_s1_agent_m0_writedata),                    //                         .writedata
		.uav_lock               (draining_s1_agent_m0_lock),                         //                         .lock
		.uav_debugaccess        (draining_s1_agent_m0_debugaccess),                  //                         .debugaccess
		.av_address             (Draining_s1_address),                               //      avalon_anti_slave_0.address
		.av_readdata            (Draining_s1_readdata),                              //                         .readdata
		.av_write               (),                                                  //              (terminated)
		.av_read                (),                                                  //              (terminated)
		.av_writedata           (),                                                  //              (terminated)
		.av_begintransfer       (),                                                  //              (terminated)
		.av_beginbursttransfer  (),                                                  //              (terminated)
		.av_burstcount          (),                                                  //              (terminated)
		.av_byteenable          (),                                                  //              (terminated)
		.av_readdatavalid       (1'b0),                                              //              (terminated)
		.av_waitrequest         (1'b0),                                              //              (terminated)
		.av_writebyteenable     (),                                                  //              (terminated)
		.av_lock                (),                                                  //              (terminated)
		.av_chipselect          (),                                                  //              (terminated)
		.av_clken               (),                                                  //              (terminated)
		.uav_clken              (1'b0),                                              //              (terminated)
		.av_debugaccess         (),                                                  //              (terminated)
		.av_outputenable        (),                                                  //              (terminated)
		.uav_response           (),                                                  //              (terminated)
		.av_response            (2'b00),                                             //              (terminated)
		.uav_writeresponsevalid (),                                                  //              (terminated)
		.av_writeresponsevalid  (1'b0)                                               //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (14),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) innerdoor_s1_translator (
		.clk                    (clk_0_clk_clk),                                     //                      clk.clk
		.reset                  (nios2_processor_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (innerdoor_s1_agent_m0_address),                     // avalon_universal_slave_0.address
		.uav_burstcount         (innerdoor_s1_agent_m0_burstcount),                  //                         .burstcount
		.uav_read               (innerdoor_s1_agent_m0_read),                        //                         .read
		.uav_write              (innerdoor_s1_agent_m0_write),                       //                         .write
		.uav_waitrequest        (innerdoor_s1_agent_m0_waitrequest),                 //                         .waitrequest
		.uav_readdatavalid      (innerdoor_s1_agent_m0_readdatavalid),               //                         .readdatavalid
		.uav_byteenable         (innerdoor_s1_agent_m0_byteenable),                  //                         .byteenable
		.uav_readdata           (innerdoor_s1_agent_m0_readdata),                    //                         .readdata
		.uav_writedata          (innerdoor_s1_agent_m0_writedata),                   //                         .writedata
		.uav_lock               (innerdoor_s1_agent_m0_lock),                        //                         .lock
		.uav_debugaccess        (innerdoor_s1_agent_m0_debugaccess),                 //                         .debugaccess
		.av_address             (innerDoor_s1_address),                              //      avalon_anti_slave_0.address
		.av_readdata            (innerDoor_s1_readdata),                             //                         .readdata
		.av_write               (),                                                  //              (terminated)
		.av_read                (),                                                  //              (terminated)
		.av_writedata           (),                                                  //              (terminated)
		.av_begintransfer       (),                                                  //              (terminated)
		.av_beginbursttransfer  (),                                                  //              (terminated)
		.av_burstcount          (),                                                  //              (terminated)
		.av_byteenable          (),                                                  //              (terminated)
		.av_readdatavalid       (1'b0),                                              //              (terminated)
		.av_waitrequest         (1'b0),                                              //              (terminated)
		.av_writebyteenable     (),                                                  //              (terminated)
		.av_lock                (),                                                  //              (terminated)
		.av_chipselect          (),                                                  //              (terminated)
		.av_clken               (),                                                  //              (terminated)
		.uav_clken              (1'b0),                                              //              (terminated)
		.av_debugaccess         (),                                                  //              (terminated)
		.av_outputenable        (),                                                  //              (terminated)
		.uav_response           (),                                                  //              (terminated)
		.av_response            (2'b00),                                             //              (terminated)
		.uav_writeresponsevalid (),                                                  //              (terminated)
		.av_writeresponsevalid  (1'b0)                                               //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (14),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) outerdoor_s1_translator (
		.clk                    (clk_0_clk_clk),                                     //                      clk.clk
		.reset                  (nios2_processor_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (outerdoor_s1_agent_m0_address),                     // avalon_universal_slave_0.address
		.uav_burstcount         (outerdoor_s1_agent_m0_burstcount),                  //                         .burstcount
		.uav_read               (outerdoor_s1_agent_m0_read),                        //                         .read
		.uav_write              (outerdoor_s1_agent_m0_write),                       //                         .write
		.uav_waitrequest        (outerdoor_s1_agent_m0_waitrequest),                 //                         .waitrequest
		.uav_readdatavalid      (outerdoor_s1_agent_m0_readdatavalid),               //                         .readdatavalid
		.uav_byteenable         (outerdoor_s1_agent_m0_byteenable),                  //                         .byteenable
		.uav_readdata           (outerdoor_s1_agent_m0_readdata),                    //                         .readdata
		.uav_writedata          (outerdoor_s1_agent_m0_writedata),                   //                         .writedata
		.uav_lock               (outerdoor_s1_agent_m0_lock),                        //                         .lock
		.uav_debugaccess        (outerdoor_s1_agent_m0_debugaccess),                 //                         .debugaccess
		.av_address             (outerDoor_s1_address),                              //      avalon_anti_slave_0.address
		.av_readdata            (outerDoor_s1_readdata),                             //                         .readdata
		.av_write               (),                                                  //              (terminated)
		.av_read                (),                                                  //              (terminated)
		.av_writedata           (),                                                  //              (terminated)
		.av_begintransfer       (),                                                  //              (terminated)
		.av_beginbursttransfer  (),                                                  //              (terminated)
		.av_burstcount          (),                                                  //              (terminated)
		.av_byteenable          (),                                                  //              (terminated)
		.av_readdatavalid       (1'b0),                                              //              (terminated)
		.av_waitrequest         (1'b0),                                              //              (terminated)
		.av_writebyteenable     (),                                                  //              (terminated)
		.av_lock                (),                                                  //              (terminated)
		.av_chipselect          (),                                                  //              (terminated)
		.av_clken               (),                                                  //              (terminated)
		.uav_clken              (1'b0),                                              //              (terminated)
		.av_debugaccess         (),                                                  //              (terminated)
		.av_outputenable        (),                                                  //              (terminated)
		.uav_response           (),                                                  //              (terminated)
		.av_response            (2'b00),                                             //              (terminated)
		.uav_writeresponsevalid (),                                                  //              (terminated)
		.av_writeresponsevalid  (1'b0)                                               //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (14),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) resetleds_s1_translator (
		.clk                    (clk_0_clk_clk),                                     //                      clk.clk
		.reset                  (nios2_processor_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (resetleds_s1_agent_m0_address),                     // avalon_universal_slave_0.address
		.uav_burstcount         (resetleds_s1_agent_m0_burstcount),                  //                         .burstcount
		.uav_read               (resetleds_s1_agent_m0_read),                        //                         .read
		.uav_write              (resetleds_s1_agent_m0_write),                       //                         .write
		.uav_waitrequest        (resetleds_s1_agent_m0_waitrequest),                 //                         .waitrequest
		.uav_readdatavalid      (resetleds_s1_agent_m0_readdatavalid),               //                         .readdatavalid
		.uav_byteenable         (resetleds_s1_agent_m0_byteenable),                  //                         .byteenable
		.uav_readdata           (resetleds_s1_agent_m0_readdata),                    //                         .readdata
		.uav_writedata          (resetleds_s1_agent_m0_writedata),                   //                         .writedata
		.uav_lock               (resetleds_s1_agent_m0_lock),                        //                         .lock
		.uav_debugaccess        (resetleds_s1_agent_m0_debugaccess),                 //                         .debugaccess
		.av_address             (resetLeds_s1_address),                              //      avalon_anti_slave_0.address
		.av_readdata            (resetLeds_s1_readdata),                             //                         .readdata
		.av_write               (),                                                  //              (terminated)
		.av_read                (),                                                  //              (terminated)
		.av_writedata           (),                                                  //              (terminated)
		.av_begintransfer       (),                                                  //              (terminated)
		.av_beginbursttransfer  (),                                                  //              (terminated)
		.av_burstcount          (),                                                  //              (terminated)
		.av_byteenable          (),                                                  //              (terminated)
		.av_readdatavalid       (1'b0),                                              //              (terminated)
		.av_waitrequest         (1'b0),                                              //              (terminated)
		.av_writebyteenable     (),                                                  //              (terminated)
		.av_lock                (),                                                  //              (terminated)
		.av_chipselect          (),                                                  //              (terminated)
		.av_clken               (),                                                  //              (terminated)
		.uav_clken              (1'b0),                                              //              (terminated)
		.av_debugaccess         (),                                                  //              (terminated)
		.av_outputenable        (),                                                  //              (terminated)
		.uav_response           (),                                                  //              (terminated)
		.av_response            (2'b00),                                             //              (terminated)
		.uav_writeresponsevalid (),                                                  //              (terminated)
		.av_writeresponsevalid  (1'b0)                                               //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (14),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) bathleaving_s1_translator (
		.clk                    (clk_0_clk_clk),                                     //                      clk.clk
		.reset                  (nios2_processor_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (bathleaving_s1_agent_m0_address),                   // avalon_universal_slave_0.address
		.uav_burstcount         (bathleaving_s1_agent_m0_burstcount),                //                         .burstcount
		.uav_read               (bathleaving_s1_agent_m0_read),                      //                         .read
		.uav_write              (bathleaving_s1_agent_m0_write),                     //                         .write
		.uav_waitrequest        (bathleaving_s1_agent_m0_waitrequest),               //                         .waitrequest
		.uav_readdatavalid      (bathleaving_s1_agent_m0_readdatavalid),             //                         .readdatavalid
		.uav_byteenable         (bathleaving_s1_agent_m0_byteenable),                //                         .byteenable
		.uav_readdata           (bathleaving_s1_agent_m0_readdata),                  //                         .readdata
		.uav_writedata          (bathleaving_s1_agent_m0_writedata),                 //                         .writedata
		.uav_lock               (bathleaving_s1_agent_m0_lock),                      //                         .lock
		.uav_debugaccess        (bathleaving_s1_agent_m0_debugaccess),               //                         .debugaccess
		.av_address             (bathLeaving_s1_address),                            //      avalon_anti_slave_0.address
		.av_write               (bathLeaving_s1_write),                              //                         .write
		.av_readdata            (bathLeaving_s1_readdata),                           //                         .readdata
		.av_writedata           (bathLeaving_s1_writedata),                          //                         .writedata
		.av_chipselect          (bathLeaving_s1_chipselect),                         //                         .chipselect
		.av_read                (),                                                  //              (terminated)
		.av_begintransfer       (),                                                  //              (terminated)
		.av_beginbursttransfer  (),                                                  //              (terminated)
		.av_burstcount          (),                                                  //              (terminated)
		.av_byteenable          (),                                                  //              (terminated)
		.av_readdatavalid       (1'b0),                                              //              (terminated)
		.av_waitrequest         (1'b0),                                              //              (terminated)
		.av_writebyteenable     (),                                                  //              (terminated)
		.av_lock                (),                                                  //              (terminated)
		.av_clken               (),                                                  //              (terminated)
		.uav_clken              (1'b0),                                              //              (terminated)
		.av_debugaccess         (),                                                  //              (terminated)
		.av_outputenable        (),                                                  //              (terminated)
		.uav_response           (),                                                  //              (terminated)
		.av_response            (2'b00),                                             //              (terminated)
		.uav_writeresponsevalid (),                                                  //              (terminated)
		.av_writeresponsevalid  (1'b0)                                               //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (14),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) batharriving_s1_translator (
		.clk                    (clk_0_clk_clk),                                     //                      clk.clk
		.reset                  (nios2_processor_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (batharriving_s1_agent_m0_address),                  // avalon_universal_slave_0.address
		.uav_burstcount         (batharriving_s1_agent_m0_burstcount),               //                         .burstcount
		.uav_read               (batharriving_s1_agent_m0_read),                     //                         .read
		.uav_write              (batharriving_s1_agent_m0_write),                    //                         .write
		.uav_waitrequest        (batharriving_s1_agent_m0_waitrequest),              //                         .waitrequest
		.uav_readdatavalid      (batharriving_s1_agent_m0_readdatavalid),            //                         .readdatavalid
		.uav_byteenable         (batharriving_s1_agent_m0_byteenable),               //                         .byteenable
		.uav_readdata           (batharriving_s1_agent_m0_readdata),                 //                         .readdata
		.uav_writedata          (batharriving_s1_agent_m0_writedata),                //                         .writedata
		.uav_lock               (batharriving_s1_agent_m0_lock),                     //                         .lock
		.uav_debugaccess        (batharriving_s1_agent_m0_debugaccess),              //                         .debugaccess
		.av_address             (bathArriving_s1_address),                           //      avalon_anti_slave_0.address
		.av_write               (bathArriving_s1_write),                             //                         .write
		.av_readdata            (bathArriving_s1_readdata),                          //                         .readdata
		.av_writedata           (bathArriving_s1_writedata),                         //                         .writedata
		.av_chipselect          (bathArriving_s1_chipselect),                        //                         .chipselect
		.av_read                (),                                                  //              (terminated)
		.av_begintransfer       (),                                                  //              (terminated)
		.av_beginbursttransfer  (),                                                  //              (terminated)
		.av_burstcount          (),                                                  //              (terminated)
		.av_byteenable          (),                                                  //              (terminated)
		.av_readdatavalid       (1'b0),                                              //              (terminated)
		.av_waitrequest         (1'b0),                                              //              (terminated)
		.av_writebyteenable     (),                                                  //              (terminated)
		.av_lock                (),                                                  //              (terminated)
		.av_clken               (),                                                  //              (terminated)
		.uav_clken              (1'b0),                                              //              (terminated)
		.av_debugaccess         (),                                                  //              (terminated)
		.av_outputenable        (),                                                  //              (terminated)
		.uav_response           (),                                                  //              (terminated)
		.av_response            (2'b00),                                             //              (terminated)
		.uav_writeresponsevalid (),                                                  //              (terminated)
		.av_writeresponsevalid  (1'b0)                                               //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (14),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) personcheck_s1_translator (
		.clk                    (clk_0_clk_clk),                                     //                      clk.clk
		.reset                  (nios2_processor_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (personcheck_s1_agent_m0_address),                   // avalon_universal_slave_0.address
		.uav_burstcount         (personcheck_s1_agent_m0_burstcount),                //                         .burstcount
		.uav_read               (personcheck_s1_agent_m0_read),                      //                         .read
		.uav_write              (personcheck_s1_agent_m0_write),                     //                         .write
		.uav_waitrequest        (personcheck_s1_agent_m0_waitrequest),               //                         .waitrequest
		.uav_readdatavalid      (personcheck_s1_agent_m0_readdatavalid),             //                         .readdatavalid
		.uav_byteenable         (personcheck_s1_agent_m0_byteenable),                //                         .byteenable
		.uav_readdata           (personcheck_s1_agent_m0_readdata),                  //                         .readdata
		.uav_writedata          (personcheck_s1_agent_m0_writedata),                 //                         .writedata
		.uav_lock               (personcheck_s1_agent_m0_lock),                      //                         .lock
		.uav_debugaccess        (personcheck_s1_agent_m0_debugaccess),               //                         .debugaccess
		.av_address             (personCheck_s1_address),                            //      avalon_anti_slave_0.address
		.av_write               (personCheck_s1_write),                              //                         .write
		.av_readdata            (personCheck_s1_readdata),                           //                         .readdata
		.av_writedata           (personCheck_s1_writedata),                          //                         .writedata
		.av_chipselect          (personCheck_s1_chipselect),                         //                         .chipselect
		.av_read                (),                                                  //              (terminated)
		.av_begintransfer       (),                                                  //              (terminated)
		.av_beginbursttransfer  (),                                                  //              (terminated)
		.av_burstcount          (),                                                  //              (terminated)
		.av_byteenable          (),                                                  //              (terminated)
		.av_readdatavalid       (1'b0),                                              //              (terminated)
		.av_waitrequest         (1'b0),                                              //              (terminated)
		.av_writebyteenable     (),                                                  //              (terminated)
		.av_lock                (),                                                  //              (terminated)
		.av_clken               (),                                                  //              (terminated)
		.uav_clken              (1'b0),                                              //              (terminated)
		.av_debugaccess         (),                                                  //              (terminated)
		.av_outputenable        (),                                                  //              (terminated)
		.uav_response           (),                                                  //              (terminated)
		.av_response            (2'b00),                                             //              (terminated)
		.uav_writeresponsevalid (),                                                  //              (terminated)
		.av_writeresponsevalid  (1'b0)                                               //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (14),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) pressurecheck_s1_translator (
		.clk                    (clk_0_clk_clk),                                     //                      clk.clk
		.reset                  (nios2_processor_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (pressurecheck_s1_agent_m0_address),                 // avalon_universal_slave_0.address
		.uav_burstcount         (pressurecheck_s1_agent_m0_burstcount),              //                         .burstcount
		.uav_read               (pressurecheck_s1_agent_m0_read),                    //                         .read
		.uav_write              (pressurecheck_s1_agent_m0_write),                   //                         .write
		.uav_waitrequest        (pressurecheck_s1_agent_m0_waitrequest),             //                         .waitrequest
		.uav_readdatavalid      (pressurecheck_s1_agent_m0_readdatavalid),           //                         .readdatavalid
		.uav_byteenable         (pressurecheck_s1_agent_m0_byteenable),              //                         .byteenable
		.uav_readdata           (pressurecheck_s1_agent_m0_readdata),                //                         .readdata
		.uav_writedata          (pressurecheck_s1_agent_m0_writedata),               //                         .writedata
		.uav_lock               (pressurecheck_s1_agent_m0_lock),                    //                         .lock
		.uav_debugaccess        (pressurecheck_s1_agent_m0_debugaccess),             //                         .debugaccess
		.av_address             (pressureCheck_s1_address),                          //      avalon_anti_slave_0.address
		.av_write               (pressureCheck_s1_write),                            //                         .write
		.av_readdata            (pressureCheck_s1_readdata),                         //                         .readdata
		.av_writedata           (pressureCheck_s1_writedata),                        //                         .writedata
		.av_chipselect          (pressureCheck_s1_chipselect),                       //                         .chipselect
		.av_read                (),                                                  //              (terminated)
		.av_begintransfer       (),                                                  //              (terminated)
		.av_beginbursttransfer  (),                                                  //              (terminated)
		.av_burstcount          (),                                                  //              (terminated)
		.av_byteenable          (),                                                  //              (terminated)
		.av_readdatavalid       (1'b0),                                              //              (terminated)
		.av_waitrequest         (1'b0),                                              //              (terminated)
		.av_writebyteenable     (),                                                  //              (terminated)
		.av_lock                (),                                                  //              (terminated)
		.av_clken               (),                                                  //              (terminated)
		.uav_clken              (1'b0),                                              //              (terminated)
		.av_debugaccess         (),                                                  //              (terminated)
		.av_outputenable        (),                                                  //              (terminated)
		.uav_response           (),                                                  //              (terminated)
		.av_response            (2'b00),                                             //              (terminated)
		.uav_writeresponsevalid (),                                                  //              (terminated)
		.av_writeresponsevalid  (1'b0)                                               //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (14),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) innerdoorswitch_s1_translator (
		.clk                    (clk_0_clk_clk),                                     //                      clk.clk
		.reset                  (nios2_processor_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (innerdoorswitch_s1_agent_m0_address),               // avalon_universal_slave_0.address
		.uav_burstcount         (innerdoorswitch_s1_agent_m0_burstcount),            //                         .burstcount
		.uav_read               (innerdoorswitch_s1_agent_m0_read),                  //                         .read
		.uav_write              (innerdoorswitch_s1_agent_m0_write),                 //                         .write
		.uav_waitrequest        (innerdoorswitch_s1_agent_m0_waitrequest),           //                         .waitrequest
		.uav_readdatavalid      (innerdoorswitch_s1_agent_m0_readdatavalid),         //                         .readdatavalid
		.uav_byteenable         (innerdoorswitch_s1_agent_m0_byteenable),            //                         .byteenable
		.uav_readdata           (innerdoorswitch_s1_agent_m0_readdata),              //                         .readdata
		.uav_writedata          (innerdoorswitch_s1_agent_m0_writedata),             //                         .writedata
		.uav_lock               (innerdoorswitch_s1_agent_m0_lock),                  //                         .lock
		.uav_debugaccess        (innerdoorswitch_s1_agent_m0_debugaccess),           //                         .debugaccess
		.av_address             (innerDoorSwitch_s1_address),                        //      avalon_anti_slave_0.address
		.av_write               (innerDoorSwitch_s1_write),                          //                         .write
		.av_readdata            (innerDoorSwitch_s1_readdata),                       //                         .readdata
		.av_writedata           (innerDoorSwitch_s1_writedata),                      //                         .writedata
		.av_chipselect          (innerDoorSwitch_s1_chipselect),                     //                         .chipselect
		.av_read                (),                                                  //              (terminated)
		.av_begintransfer       (),                                                  //              (terminated)
		.av_beginbursttransfer  (),                                                  //              (terminated)
		.av_burstcount          (),                                                  //              (terminated)
		.av_byteenable          (),                                                  //              (terminated)
		.av_readdatavalid       (1'b0),                                              //              (terminated)
		.av_waitrequest         (1'b0),                                              //              (terminated)
		.av_writebyteenable     (),                                                  //              (terminated)
		.av_lock                (),                                                  //              (terminated)
		.av_clken               (),                                                  //              (terminated)
		.uav_clken              (1'b0),                                              //              (terminated)
		.av_debugaccess         (),                                                  //              (terminated)
		.av_outputenable        (),                                                  //              (terminated)
		.uav_response           (),                                                  //              (terminated)
		.av_response            (2'b00),                                             //              (terminated)
		.uav_writeresponsevalid (),                                                  //              (terminated)
		.av_writeresponsevalid  (1'b0)                                               //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (14),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) outerdoorswitch_s1_translator (
		.clk                    (clk_0_clk_clk),                                     //                      clk.clk
		.reset                  (nios2_processor_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (outerdoorswitch_s1_agent_m0_address),               // avalon_universal_slave_0.address
		.uav_burstcount         (outerdoorswitch_s1_agent_m0_burstcount),            //                         .burstcount
		.uav_read               (outerdoorswitch_s1_agent_m0_read),                  //                         .read
		.uav_write              (outerdoorswitch_s1_agent_m0_write),                 //                         .write
		.uav_waitrequest        (outerdoorswitch_s1_agent_m0_waitrequest),           //                         .waitrequest
		.uav_readdatavalid      (outerdoorswitch_s1_agent_m0_readdatavalid),         //                         .readdatavalid
		.uav_byteenable         (outerdoorswitch_s1_agent_m0_byteenable),            //                         .byteenable
		.uav_readdata           (outerdoorswitch_s1_agent_m0_readdata),              //                         .readdata
		.uav_writedata          (outerdoorswitch_s1_agent_m0_writedata),             //                         .writedata
		.uav_lock               (outerdoorswitch_s1_agent_m0_lock),                  //                         .lock
		.uav_debugaccess        (outerdoorswitch_s1_agent_m0_debugaccess),           //                         .debugaccess
		.av_address             (outerDoorSwitch_s1_address),                        //      avalon_anti_slave_0.address
		.av_write               (outerDoorSwitch_s1_write),                          //                         .write
		.av_readdata            (outerDoorSwitch_s1_readdata),                       //                         .readdata
		.av_writedata           (outerDoorSwitch_s1_writedata),                      //                         .writedata
		.av_chipselect          (outerDoorSwitch_s1_chipselect),                     //                         .chipselect
		.av_read                (),                                                  //              (terminated)
		.av_begintransfer       (),                                                  //              (terminated)
		.av_beginbursttransfer  (),                                                  //              (terminated)
		.av_burstcount          (),                                                  //              (terminated)
		.av_byteenable          (),                                                  //              (terminated)
		.av_readdatavalid       (1'b0),                                              //              (terminated)
		.av_waitrequest         (1'b0),                                              //              (terminated)
		.av_writebyteenable     (),                                                  //              (terminated)
		.av_lock                (),                                                  //              (terminated)
		.av_clken               (),                                                  //              (terminated)
		.uav_clken              (1'b0),                                              //              (terminated)
		.av_debugaccess         (),                                                  //              (terminated)
		.av_outputenable        (),                                                  //              (terminated)
		.uav_response           (),                                                  //              (terminated)
		.av_response            (2'b00),                                             //              (terminated)
		.uav_writeresponsevalid (),                                                  //              (terminated)
		.av_writeresponsevalid  (1'b0)                                               //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (14),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) drainfinished_s1_translator (
		.clk                    (clk_0_clk_clk),                                     //                      clk.clk
		.reset                  (nios2_processor_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (drainfinished_s1_agent_m0_address),                 // avalon_universal_slave_0.address
		.uav_burstcount         (drainfinished_s1_agent_m0_burstcount),              //                         .burstcount
		.uav_read               (drainfinished_s1_agent_m0_read),                    //                         .read
		.uav_write              (drainfinished_s1_agent_m0_write),                   //                         .write
		.uav_waitrequest        (drainfinished_s1_agent_m0_waitrequest),             //                         .waitrequest
		.uav_readdatavalid      (drainfinished_s1_agent_m0_readdatavalid),           //                         .readdatavalid
		.uav_byteenable         (drainfinished_s1_agent_m0_byteenable),              //                         .byteenable
		.uav_readdata           (drainfinished_s1_agent_m0_readdata),                //                         .readdata
		.uav_writedata          (drainfinished_s1_agent_m0_writedata),               //                         .writedata
		.uav_lock               (drainfinished_s1_agent_m0_lock),                    //                         .lock
		.uav_debugaccess        (drainfinished_s1_agent_m0_debugaccess),             //                         .debugaccess
		.av_address             (drainFinished_s1_address),                          //      avalon_anti_slave_0.address
		.av_write               (drainFinished_s1_write),                            //                         .write
		.av_readdata            (drainFinished_s1_readdata),                         //                         .readdata
		.av_writedata           (drainFinished_s1_writedata),                        //                         .writedata
		.av_chipselect          (drainFinished_s1_chipselect),                       //                         .chipselect
		.av_read                (),                                                  //              (terminated)
		.av_begintransfer       (),                                                  //              (terminated)
		.av_beginbursttransfer  (),                                                  //              (terminated)
		.av_burstcount          (),                                                  //              (terminated)
		.av_byteenable          (),                                                  //              (terminated)
		.av_readdatavalid       (1'b0),                                              //              (terminated)
		.av_waitrequest         (1'b0),                                              //              (terminated)
		.av_writebyteenable     (),                                                  //              (terminated)
		.av_lock                (),                                                  //              (terminated)
		.av_clken               (),                                                  //              (terminated)
		.uav_clken              (1'b0),                                              //              (terminated)
		.av_debugaccess         (),                                                  //              (terminated)
		.av_outputenable        (),                                                  //              (terminated)
		.uav_response           (),                                                  //              (terminated)
		.av_response            (2'b00),                                             //              (terminated)
		.uav_writeresponsevalid (),                                                  //              (terminated)
		.av_writeresponsevalid  (1'b0)                                               //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (14),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) fillfinished_s1_translator (
		.clk                    (clk_0_clk_clk),                                     //                      clk.clk
		.reset                  (nios2_processor_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (fillfinished_s1_agent_m0_address),                  // avalon_universal_slave_0.address
		.uav_burstcount         (fillfinished_s1_agent_m0_burstcount),               //                         .burstcount
		.uav_read               (fillfinished_s1_agent_m0_read),                     //                         .read
		.uav_write              (fillfinished_s1_agent_m0_write),                    //                         .write
		.uav_waitrequest        (fillfinished_s1_agent_m0_waitrequest),              //                         .waitrequest
		.uav_readdatavalid      (fillfinished_s1_agent_m0_readdatavalid),            //                         .readdatavalid
		.uav_byteenable         (fillfinished_s1_agent_m0_byteenable),               //                         .byteenable
		.uav_readdata           (fillfinished_s1_agent_m0_readdata),                 //                         .readdata
		.uav_writedata          (fillfinished_s1_agent_m0_writedata),                //                         .writedata
		.uav_lock               (fillfinished_s1_agent_m0_lock),                     //                         .lock
		.uav_debugaccess        (fillfinished_s1_agent_m0_debugaccess),              //                         .debugaccess
		.av_address             (fillFinished_s1_address),                           //      avalon_anti_slave_0.address
		.av_write               (fillFinished_s1_write),                             //                         .write
		.av_readdata            (fillFinished_s1_readdata),                          //                         .readdata
		.av_writedata           (fillFinished_s1_writedata),                         //                         .writedata
		.av_chipselect          (fillFinished_s1_chipselect),                        //                         .chipselect
		.av_read                (),                                                  //              (terminated)
		.av_begintransfer       (),                                                  //              (terminated)
		.av_beginbursttransfer  (),                                                  //              (terminated)
		.av_burstcount          (),                                                  //              (terminated)
		.av_byteenable          (),                                                  //              (terminated)
		.av_readdatavalid       (1'b0),                                              //              (terminated)
		.av_waitrequest         (1'b0),                                              //              (terminated)
		.av_writebyteenable     (),                                                  //              (terminated)
		.av_lock                (),                                                  //              (terminated)
		.av_clken               (),                                                  //              (terminated)
		.uav_clken              (1'b0),                                              //              (terminated)
		.av_debugaccess         (),                                                  //              (terminated)
		.av_outputenable        (),                                                  //              (terminated)
		.uav_response           (),                                                  //              (terminated)
		.av_response            (2'b00),                                             //              (terminated)
		.uav_writeresponsevalid (),                                                  //              (terminated)
		.av_writeresponsevalid  (1'b0)                                               //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (14),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) waitfinished_s1_translator (
		.clk                    (clk_0_clk_clk),                                     //                      clk.clk
		.reset                  (nios2_processor_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (waitfinished_s1_agent_m0_address),                  // avalon_universal_slave_0.address
		.uav_burstcount         (waitfinished_s1_agent_m0_burstcount),               //                         .burstcount
		.uav_read               (waitfinished_s1_agent_m0_read),                     //                         .read
		.uav_write              (waitfinished_s1_agent_m0_write),                    //                         .write
		.uav_waitrequest        (waitfinished_s1_agent_m0_waitrequest),              //                         .waitrequest
		.uav_readdatavalid      (waitfinished_s1_agent_m0_readdatavalid),            //                         .readdatavalid
		.uav_byteenable         (waitfinished_s1_agent_m0_byteenable),               //                         .byteenable
		.uav_readdata           (waitfinished_s1_agent_m0_readdata),                 //                         .readdata
		.uav_writedata          (waitfinished_s1_agent_m0_writedata),                //                         .writedata
		.uav_lock               (waitfinished_s1_agent_m0_lock),                     //                         .lock
		.uav_debugaccess        (waitfinished_s1_agent_m0_debugaccess),              //                         .debugaccess
		.av_address             (waitFinished_s1_address),                           //      avalon_anti_slave_0.address
		.av_write               (waitFinished_s1_write),                             //                         .write
		.av_readdata            (waitFinished_s1_readdata),                          //                         .readdata
		.av_writedata           (waitFinished_s1_writedata),                         //                         .writedata
		.av_chipselect          (waitFinished_s1_chipselect),                        //                         .chipselect
		.av_read                (),                                                  //              (terminated)
		.av_begintransfer       (),                                                  //              (terminated)
		.av_beginbursttransfer  (),                                                  //              (terminated)
		.av_burstcount          (),                                                  //              (terminated)
		.av_byteenable          (),                                                  //              (terminated)
		.av_readdatavalid       (1'b0),                                              //              (terminated)
		.av_waitrequest         (1'b0),                                              //              (terminated)
		.av_writebyteenable     (),                                                  //              (terminated)
		.av_lock                (),                                                  //              (terminated)
		.av_clken               (),                                                  //              (terminated)
		.uav_clken              (1'b0),                                              //              (terminated)
		.av_debugaccess         (),                                                  //              (terminated)
		.av_outputenable        (),                                                  //              (terminated)
		.uav_response           (),                                                  //              (terminated)
		.av_response            (2'b00),                                             //              (terminated)
		.uav_writeresponsevalid (),                                                  //              (terminated)
		.av_writeresponsevalid  (1'b0)                                               //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (14),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) waiting_s1_translator (
		.clk                    (clk_0_clk_clk),                                     //                      clk.clk
		.reset                  (nios2_processor_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (waiting_s1_agent_m0_address),                       // avalon_universal_slave_0.address
		.uav_burstcount         (waiting_s1_agent_m0_burstcount),                    //                         .burstcount
		.uav_read               (waiting_s1_agent_m0_read),                          //                         .read
		.uav_write              (waiting_s1_agent_m0_write),                         //                         .write
		.uav_waitrequest        (waiting_s1_agent_m0_waitrequest),                   //                         .waitrequest
		.uav_readdatavalid      (waiting_s1_agent_m0_readdatavalid),                 //                         .readdatavalid
		.uav_byteenable         (waiting_s1_agent_m0_byteenable),                    //                         .byteenable
		.uav_readdata           (waiting_s1_agent_m0_readdata),                      //                         .readdata
		.uav_writedata          (waiting_s1_agent_m0_writedata),                     //                         .writedata
		.uav_lock               (waiting_s1_agent_m0_lock),                          //                         .lock
		.uav_debugaccess        (waiting_s1_agent_m0_debugaccess),                   //                         .debugaccess
		.av_address             (waiting_s1_address),                                //      avalon_anti_slave_0.address
		.av_readdata            (waiting_s1_readdata),                               //                         .readdata
		.av_write               (),                                                  //              (terminated)
		.av_read                (),                                                  //              (terminated)
		.av_writedata           (),                                                  //              (terminated)
		.av_begintransfer       (),                                                  //              (terminated)
		.av_beginbursttransfer  (),                                                  //              (terminated)
		.av_burstcount          (),                                                  //              (terminated)
		.av_byteenable          (),                                                  //              (terminated)
		.av_readdatavalid       (1'b0),                                              //              (terminated)
		.av_waitrequest         (1'b0),                                              //              (terminated)
		.av_writebyteenable     (),                                                  //              (terminated)
		.av_lock                (),                                                  //              (terminated)
		.av_chipselect          (),                                                  //              (terminated)
		.av_clken               (),                                                  //              (terminated)
		.uav_clken              (1'b0),                                              //              (terminated)
		.av_debugaccess         (),                                                  //              (terminated)
		.av_outputenable        (),                                                  //              (terminated)
		.uav_response           (),                                                  //              (terminated)
		.av_response            (2'b00),                                             //              (terminated)
		.uav_writeresponsevalid (),                                                  //              (terminated)
		.av_writeresponsevalid  (1'b0)                                               //              (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (93),
		.PKT_ORI_BURST_SIZE_L      (91),
		.PKT_RESPONSE_STATUS_H     (90),
		.PKT_RESPONSE_STATUS_L     (89),
		.PKT_QOS_H                 (70),
		.PKT_QOS_L                 (70),
		.PKT_DATA_SIDEBAND_H       (68),
		.PKT_DATA_SIDEBAND_L       (68),
		.PKT_ADDR_SIDEBAND_H       (67),
		.PKT_ADDR_SIDEBAND_L       (67),
		.PKT_BURST_TYPE_H          (66),
		.PKT_BURST_TYPE_L          (65),
		.PKT_CACHE_H               (88),
		.PKT_CACHE_L               (85),
		.PKT_THREAD_ID_H           (81),
		.PKT_THREAD_ID_L           (81),
		.PKT_BURST_SIZE_H          (64),
		.PKT_BURST_SIZE_L          (62),
		.PKT_TRANS_EXCLUSIVE       (55),
		.PKT_TRANS_LOCK            (54),
		.PKT_BEGIN_BURST           (69),
		.PKT_PROTECTION_H          (84),
		.PKT_PROTECTION_L          (82),
		.PKT_BURSTWRAP_H           (61),
		.PKT_BURSTWRAP_L           (59),
		.PKT_BYTE_CNT_H            (58),
		.PKT_BYTE_CNT_L            (56),
		.PKT_ADDR_H                (49),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (50),
		.PKT_TRANS_POSTED          (51),
		.PKT_TRANS_WRITE           (52),
		.PKT_TRANS_READ            (53),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (75),
		.PKT_SRC_ID_L              (71),
		.PKT_DEST_ID_H             (80),
		.PKT_DEST_ID_L             (76),
		.ST_DATA_W                 (94),
		.ST_CHANNEL_W              (18),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (0),
		.BURSTWRAP_VALUE           (7),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) nios2_processor_data_master_agent (
		.clk                   (clk_0_clk_clk),                                                                  //       clk.clk
		.reset                 (nios2_processor_reset_reset_bridge_in_reset_reset),                              // clk_reset.reset
		.av_address            (nios2_processor_data_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (nios2_processor_data_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (nios2_processor_data_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (nios2_processor_data_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (nios2_processor_data_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (nios2_processor_data_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (nios2_processor_data_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (nios2_processor_data_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (nios2_processor_data_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (nios2_processor_data_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (nios2_processor_data_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (nios2_processor_data_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (nios2_processor_data_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (nios2_processor_data_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (nios2_processor_data_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (nios2_processor_data_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_src_valid),                                                              //        rp.valid
		.rp_data               (rsp_mux_src_data),                                                               //          .data
		.rp_channel            (rsp_mux_src_channel),                                                            //          .channel
		.rp_startofpacket      (rsp_mux_src_startofpacket),                                                      //          .startofpacket
		.rp_endofpacket        (rsp_mux_src_endofpacket),                                                        //          .endofpacket
		.rp_ready              (rsp_mux_src_ready),                                                              //          .ready
		.av_response           (),                                                                               // (terminated)
		.av_writeresponsevalid ()                                                                                // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (93),
		.PKT_ORI_BURST_SIZE_L      (91),
		.PKT_RESPONSE_STATUS_H     (90),
		.PKT_RESPONSE_STATUS_L     (89),
		.PKT_QOS_H                 (70),
		.PKT_QOS_L                 (70),
		.PKT_DATA_SIDEBAND_H       (68),
		.PKT_DATA_SIDEBAND_L       (68),
		.PKT_ADDR_SIDEBAND_H       (67),
		.PKT_ADDR_SIDEBAND_L       (67),
		.PKT_BURST_TYPE_H          (66),
		.PKT_BURST_TYPE_L          (65),
		.PKT_CACHE_H               (88),
		.PKT_CACHE_L               (85),
		.PKT_THREAD_ID_H           (81),
		.PKT_THREAD_ID_L           (81),
		.PKT_BURST_SIZE_H          (64),
		.PKT_BURST_SIZE_L          (62),
		.PKT_TRANS_EXCLUSIVE       (55),
		.PKT_TRANS_LOCK            (54),
		.PKT_BEGIN_BURST           (69),
		.PKT_PROTECTION_H          (84),
		.PKT_PROTECTION_L          (82),
		.PKT_BURSTWRAP_H           (61),
		.PKT_BURSTWRAP_L           (59),
		.PKT_BYTE_CNT_H            (58),
		.PKT_BYTE_CNT_L            (56),
		.PKT_ADDR_H                (49),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (50),
		.PKT_TRANS_POSTED          (51),
		.PKT_TRANS_WRITE           (52),
		.PKT_TRANS_READ            (53),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (75),
		.PKT_SRC_ID_L              (71),
		.PKT_DEST_ID_H             (80),
		.PKT_DEST_ID_L             (76),
		.ST_DATA_W                 (94),
		.ST_CHANNEL_W              (18),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (1),
		.BURSTWRAP_VALUE           (3),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) nios2_processor_instruction_master_agent (
		.clk                   (clk_0_clk_clk),                                                                         //       clk.clk
		.reset                 (nios2_processor_reset_reset_bridge_in_reset_reset),                                     // clk_reset.reset
		.av_address            (nios2_processor_instruction_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (nios2_processor_instruction_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (nios2_processor_instruction_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (nios2_processor_instruction_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (nios2_processor_instruction_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (nios2_processor_instruction_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (nios2_processor_instruction_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (nios2_processor_instruction_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (nios2_processor_instruction_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (nios2_processor_instruction_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (nios2_processor_instruction_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (nios2_processor_instruction_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (nios2_processor_instruction_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (nios2_processor_instruction_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (nios2_processor_instruction_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (nios2_processor_instruction_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_001_src_valid),                                                                 //        rp.valid
		.rp_data               (rsp_mux_001_src_data),                                                                  //          .data
		.rp_channel            (rsp_mux_001_src_channel),                                                               //          .channel
		.rp_startofpacket      (rsp_mux_001_src_startofpacket),                                                         //          .startofpacket
		.rp_endofpacket        (rsp_mux_001_src_endofpacket),                                                           //          .endofpacket
		.rp_ready              (rsp_mux_001_src_ready),                                                                 //          .ready
		.av_response           (),                                                                                      // (terminated)
		.av_writeresponsevalid ()                                                                                       // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (93),
		.PKT_ORI_BURST_SIZE_L      (91),
		.PKT_RESPONSE_STATUS_H     (90),
		.PKT_RESPONSE_STATUS_L     (89),
		.PKT_BURST_SIZE_H          (64),
		.PKT_BURST_SIZE_L          (62),
		.PKT_TRANS_LOCK            (54),
		.PKT_BEGIN_BURST           (69),
		.PKT_PROTECTION_H          (84),
		.PKT_PROTECTION_L          (82),
		.PKT_BURSTWRAP_H           (61),
		.PKT_BURSTWRAP_L           (59),
		.PKT_BYTE_CNT_H            (58),
		.PKT_BYTE_CNT_L            (56),
		.PKT_ADDR_H                (49),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (50),
		.PKT_TRANS_POSTED          (51),
		.PKT_TRANS_WRITE           (52),
		.PKT_TRANS_READ            (53),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (75),
		.PKT_SRC_ID_L              (71),
		.PKT_DEST_ID_H             (80),
		.PKT_DEST_ID_L             (76),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (18),
		.ST_DATA_W                 (94),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) jtag_uart_avalon_jtag_slave_agent (
		.clk                     (clk_0_clk_clk),                                                //             clk.clk
		.reset                   (nios2_processor_reset_reset_bridge_in_reset_reset),            //       clk_reset.reset
		.m0_address              (jtag_uart_avalon_jtag_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (jtag_uart_avalon_jtag_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (jtag_uart_avalon_jtag_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (jtag_uart_avalon_jtag_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (jtag_uart_avalon_jtag_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (jtag_uart_avalon_jtag_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (jtag_uart_avalon_jtag_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (jtag_uart_avalon_jtag_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (jtag_uart_avalon_jtag_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (jtag_uart_avalon_jtag_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (jtag_uart_avalon_jtag_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (jtag_uart_avalon_jtag_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (jtag_uart_avalon_jtag_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (jtag_uart_avalon_jtag_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (jtag_uart_avalon_jtag_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (jtag_uart_avalon_jtag_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_src_ready),                                            //              cp.ready
		.cp_valid                (cmd_mux_src_valid),                                            //                .valid
		.cp_data                 (cmd_mux_src_data),                                             //                .data
		.cp_startofpacket        (cmd_mux_src_startofpacket),                                    //                .startofpacket
		.cp_endofpacket          (cmd_mux_src_endofpacket),                                      //                .endofpacket
		.cp_channel              (cmd_mux_src_channel),                                          //                .channel
		.rf_sink_ready           (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (jtag_uart_avalon_jtag_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (jtag_uart_avalon_jtag_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (jtag_uart_avalon_jtag_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (jtag_uart_avalon_jtag_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (jtag_uart_avalon_jtag_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_out_0_ready),                                // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_out_0_valid),                                //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_out_0_data),                                 //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_out_0_error),                                //                .error
		.rdata_fifo_src_ready    (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                        //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                          //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (95),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) jtag_uart_avalon_jtag_slave_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                //       clk.clk
		.reset             (nios2_processor_reset_reset_bridge_in_reset_reset),            // clk_reset.reset
		.in_data           (jtag_uart_avalon_jtag_slave_agent_rf_source_data),             //        in.data
		.in_valid          (jtag_uart_avalon_jtag_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (jtag_uart_avalon_jtag_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (jtag_uart_avalon_jtag_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (jtag_uart_avalon_jtag_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                        // (terminated)
		.csr_read          (1'b0),                                                         // (terminated)
		.csr_write         (1'b0),                                                         // (terminated)
		.csr_readdata      (),                                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                         // (terminated)
		.almost_full_data  (),                                                             // (terminated)
		.almost_empty_data (),                                                             // (terminated)
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.in_error          (1'b0),                                                         // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_channel        (1'b0),                                                         // (terminated)
		.out_channel       ()                                                              // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (93),
		.PKT_ORI_BURST_SIZE_L      (91),
		.PKT_RESPONSE_STATUS_H     (90),
		.PKT_RESPONSE_STATUS_L     (89),
		.PKT_BURST_SIZE_H          (64),
		.PKT_BURST_SIZE_L          (62),
		.PKT_TRANS_LOCK            (54),
		.PKT_BEGIN_BURST           (69),
		.PKT_PROTECTION_H          (84),
		.PKT_PROTECTION_L          (82),
		.PKT_BURSTWRAP_H           (61),
		.PKT_BURSTWRAP_L           (59),
		.PKT_BYTE_CNT_H            (58),
		.PKT_BYTE_CNT_L            (56),
		.PKT_ADDR_H                (49),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (50),
		.PKT_TRANS_POSTED          (51),
		.PKT_TRANS_WRITE           (52),
		.PKT_TRANS_READ            (53),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (75),
		.PKT_SRC_ID_L              (71),
		.PKT_DEST_ID_H             (80),
		.PKT_DEST_ID_L             (76),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (18),
		.ST_DATA_W                 (94),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) nios2_processor_debug_mem_slave_agent (
		.clk                     (clk_0_clk_clk),                                                    //             clk.clk
		.reset                   (nios2_processor_reset_reset_bridge_in_reset_reset),                //       clk_reset.reset
		.m0_address              (nios2_processor_debug_mem_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (nios2_processor_debug_mem_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (nios2_processor_debug_mem_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (nios2_processor_debug_mem_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (nios2_processor_debug_mem_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (nios2_processor_debug_mem_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (nios2_processor_debug_mem_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (nios2_processor_debug_mem_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (nios2_processor_debug_mem_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (nios2_processor_debug_mem_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (nios2_processor_debug_mem_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (nios2_processor_debug_mem_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (nios2_processor_debug_mem_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (nios2_processor_debug_mem_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (nios2_processor_debug_mem_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (nios2_processor_debug_mem_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_001_src_ready),                                            //              cp.ready
		.cp_valid                (cmd_mux_001_src_valid),                                            //                .valid
		.cp_data                 (cmd_mux_001_src_data),                                             //                .data
		.cp_startofpacket        (cmd_mux_001_src_startofpacket),                                    //                .startofpacket
		.cp_endofpacket          (cmd_mux_001_src_endofpacket),                                      //                .endofpacket
		.cp_channel              (cmd_mux_001_src_channel),                                          //                .channel
		.rf_sink_ready           (nios2_processor_debug_mem_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (nios2_processor_debug_mem_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (nios2_processor_debug_mem_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (nios2_processor_debug_mem_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (nios2_processor_debug_mem_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (nios2_processor_debug_mem_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (nios2_processor_debug_mem_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (nios2_processor_debug_mem_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (nios2_processor_debug_mem_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (nios2_processor_debug_mem_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_001_out_0_ready),                                // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_001_out_0_valid),                                //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_001_out_0_data),                                 //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_001_out_0_error),                                //                .error
		.rdata_fifo_src_ready    (nios2_processor_debug_mem_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (nios2_processor_debug_mem_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (nios2_processor_debug_mem_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                            //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                              //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (95),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) nios2_processor_debug_mem_slave_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                    //       clk.clk
		.reset             (nios2_processor_reset_reset_bridge_in_reset_reset),                // clk_reset.reset
		.in_data           (nios2_processor_debug_mem_slave_agent_rf_source_data),             //        in.data
		.in_valid          (nios2_processor_debug_mem_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (nios2_processor_debug_mem_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (nios2_processor_debug_mem_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (nios2_processor_debug_mem_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (nios2_processor_debug_mem_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (nios2_processor_debug_mem_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (nios2_processor_debug_mem_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (nios2_processor_debug_mem_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (nios2_processor_debug_mem_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                            // (terminated)
		.csr_read          (1'b0),                                                             // (terminated)
		.csr_write         (1'b0),                                                             // (terminated)
		.csr_readdata      (),                                                                 // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                             // (terminated)
		.almost_full_data  (),                                                                 // (terminated)
		.almost_empty_data (),                                                                 // (terminated)
		.in_empty          (1'b0),                                                             // (terminated)
		.out_empty         (),                                                                 // (terminated)
		.in_error          (1'b0),                                                             // (terminated)
		.out_error         (),                                                                 // (terminated)
		.in_channel        (1'b0),                                                             // (terminated)
		.out_channel       ()                                                                  // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (93),
		.PKT_ORI_BURST_SIZE_L      (91),
		.PKT_RESPONSE_STATUS_H     (90),
		.PKT_RESPONSE_STATUS_L     (89),
		.PKT_BURST_SIZE_H          (64),
		.PKT_BURST_SIZE_L          (62),
		.PKT_TRANS_LOCK            (54),
		.PKT_BEGIN_BURST           (69),
		.PKT_PROTECTION_H          (84),
		.PKT_PROTECTION_L          (82),
		.PKT_BURSTWRAP_H           (61),
		.PKT_BURSTWRAP_L           (59),
		.PKT_BYTE_CNT_H            (58),
		.PKT_BYTE_CNT_L            (56),
		.PKT_ADDR_H                (49),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (50),
		.PKT_TRANS_POSTED          (51),
		.PKT_TRANS_WRITE           (52),
		.PKT_TRANS_READ            (53),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (75),
		.PKT_SRC_ID_L              (71),
		.PKT_DEST_ID_H             (80),
		.PKT_DEST_ID_L             (76),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (18),
		.ST_DATA_W                 (94),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) onchip_memory_s1_agent (
		.clk                     (clk_0_clk_clk),                                     //             clk.clk
		.reset                   (nios2_processor_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (onchip_memory_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (onchip_memory_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (onchip_memory_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (onchip_memory_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (onchip_memory_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (onchip_memory_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (onchip_memory_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (onchip_memory_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (onchip_memory_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (onchip_memory_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (onchip_memory_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (onchip_memory_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (onchip_memory_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (onchip_memory_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (onchip_memory_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (onchip_memory_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_002_src_ready),                             //              cp.ready
		.cp_valid                (cmd_mux_002_src_valid),                             //                .valid
		.cp_data                 (cmd_mux_002_src_data),                              //                .data
		.cp_startofpacket        (cmd_mux_002_src_startofpacket),                     //                .startofpacket
		.cp_endofpacket          (cmd_mux_002_src_endofpacket),                       //                .endofpacket
		.cp_channel              (cmd_mux_002_src_channel),                           //                .channel
		.rf_sink_ready           (onchip_memory_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (onchip_memory_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (onchip_memory_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (onchip_memory_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (onchip_memory_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (onchip_memory_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (onchip_memory_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (onchip_memory_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (onchip_memory_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (onchip_memory_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_002_out_0_ready),                 // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_002_out_0_valid),                 //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_002_out_0_data),                  //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_002_out_0_error),                 //                .error
		.rdata_fifo_src_ready    (onchip_memory_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (onchip_memory_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (onchip_memory_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                             //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                               //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (95),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) onchip_memory_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                     //       clk.clk
		.reset             (nios2_processor_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (onchip_memory_s1_agent_rf_source_data),             //        in.data
		.in_valid          (onchip_memory_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (onchip_memory_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (onchip_memory_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (onchip_memory_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (onchip_memory_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (onchip_memory_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (onchip_memory_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (onchip_memory_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (onchip_memory_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                             // (terminated)
		.csr_read          (1'b0),                                              // (terminated)
		.csr_write         (1'b0),                                              // (terminated)
		.csr_readdata      (),                                                  // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),              // (terminated)
		.almost_full_data  (),                                                  // (terminated)
		.almost_empty_data (),                                                  // (terminated)
		.in_empty          (1'b0),                                              // (terminated)
		.out_empty         (),                                                  // (terminated)
		.in_error          (1'b0),                                              // (terminated)
		.out_error         (),                                                  // (terminated)
		.in_channel        (1'b0),                                              // (terminated)
		.out_channel       ()                                                   // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (93),
		.PKT_ORI_BURST_SIZE_L      (91),
		.PKT_RESPONSE_STATUS_H     (90),
		.PKT_RESPONSE_STATUS_L     (89),
		.PKT_BURST_SIZE_H          (64),
		.PKT_BURST_SIZE_L          (62),
		.PKT_TRANS_LOCK            (54),
		.PKT_BEGIN_BURST           (69),
		.PKT_PROTECTION_H          (84),
		.PKT_PROTECTION_L          (82),
		.PKT_BURSTWRAP_H           (61),
		.PKT_BURSTWRAP_L           (59),
		.PKT_BYTE_CNT_H            (58),
		.PKT_BYTE_CNT_L            (56),
		.PKT_ADDR_H                (49),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (50),
		.PKT_TRANS_POSTED          (51),
		.PKT_TRANS_WRITE           (52),
		.PKT_TRANS_READ            (53),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (75),
		.PKT_SRC_ID_L              (71),
		.PKT_DEST_ID_H             (80),
		.PKT_DEST_ID_L             (76),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (18),
		.ST_DATA_W                 (94),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) filling_s1_agent (
		.clk                     (clk_0_clk_clk),                                     //             clk.clk
		.reset                   (nios2_processor_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (filling_s1_agent_m0_address),                       //              m0.address
		.m0_burstcount           (filling_s1_agent_m0_burstcount),                    //                .burstcount
		.m0_byteenable           (filling_s1_agent_m0_byteenable),                    //                .byteenable
		.m0_debugaccess          (filling_s1_agent_m0_debugaccess),                   //                .debugaccess
		.m0_lock                 (filling_s1_agent_m0_lock),                          //                .lock
		.m0_readdata             (filling_s1_agent_m0_readdata),                      //                .readdata
		.m0_readdatavalid        (filling_s1_agent_m0_readdatavalid),                 //                .readdatavalid
		.m0_read                 (filling_s1_agent_m0_read),                          //                .read
		.m0_waitrequest          (filling_s1_agent_m0_waitrequest),                   //                .waitrequest
		.m0_writedata            (filling_s1_agent_m0_writedata),                     //                .writedata
		.m0_write                (filling_s1_agent_m0_write),                         //                .write
		.rp_endofpacket          (filling_s1_agent_rp_endofpacket),                   //              rp.endofpacket
		.rp_ready                (filling_s1_agent_rp_ready),                         //                .ready
		.rp_valid                (filling_s1_agent_rp_valid),                         //                .valid
		.rp_data                 (filling_s1_agent_rp_data),                          //                .data
		.rp_startofpacket        (filling_s1_agent_rp_startofpacket),                 //                .startofpacket
		.cp_ready                (cmd_mux_003_src_ready),                             //              cp.ready
		.cp_valid                (cmd_mux_003_src_valid),                             //                .valid
		.cp_data                 (cmd_mux_003_src_data),                              //                .data
		.cp_startofpacket        (cmd_mux_003_src_startofpacket),                     //                .startofpacket
		.cp_endofpacket          (cmd_mux_003_src_endofpacket),                       //                .endofpacket
		.cp_channel              (cmd_mux_003_src_channel),                           //                .channel
		.rf_sink_ready           (filling_s1_agent_rsp_fifo_out_ready),               //         rf_sink.ready
		.rf_sink_valid           (filling_s1_agent_rsp_fifo_out_valid),               //                .valid
		.rf_sink_startofpacket   (filling_s1_agent_rsp_fifo_out_startofpacket),       //                .startofpacket
		.rf_sink_endofpacket     (filling_s1_agent_rsp_fifo_out_endofpacket),         //                .endofpacket
		.rf_sink_data            (filling_s1_agent_rsp_fifo_out_data),                //                .data
		.rf_source_ready         (filling_s1_agent_rf_source_ready),                  //       rf_source.ready
		.rf_source_valid         (filling_s1_agent_rf_source_valid),                  //                .valid
		.rf_source_startofpacket (filling_s1_agent_rf_source_startofpacket),          //                .startofpacket
		.rf_source_endofpacket   (filling_s1_agent_rf_source_endofpacket),            //                .endofpacket
		.rf_source_data          (filling_s1_agent_rf_source_data),                   //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_003_out_0_ready),                 // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_003_out_0_valid),                 //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_003_out_0_data),                  //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_003_out_0_error),                 //                .error
		.rdata_fifo_src_ready    (filling_s1_agent_rdata_fifo_src_ready),             //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (filling_s1_agent_rdata_fifo_src_valid),             //                .valid
		.rdata_fifo_src_data     (filling_s1_agent_rdata_fifo_src_data),              //                .data
		.m0_response             (2'b00),                                             //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                               //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (95),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) filling_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                     //       clk.clk
		.reset             (nios2_processor_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (filling_s1_agent_rf_source_data),                   //        in.data
		.in_valid          (filling_s1_agent_rf_source_valid),                  //          .valid
		.in_ready          (filling_s1_agent_rf_source_ready),                  //          .ready
		.in_startofpacket  (filling_s1_agent_rf_source_startofpacket),          //          .startofpacket
		.in_endofpacket    (filling_s1_agent_rf_source_endofpacket),            //          .endofpacket
		.out_data          (filling_s1_agent_rsp_fifo_out_data),                //       out.data
		.out_valid         (filling_s1_agent_rsp_fifo_out_valid),               //          .valid
		.out_ready         (filling_s1_agent_rsp_fifo_out_ready),               //          .ready
		.out_startofpacket (filling_s1_agent_rsp_fifo_out_startofpacket),       //          .startofpacket
		.out_endofpacket   (filling_s1_agent_rsp_fifo_out_endofpacket),         //          .endofpacket
		.csr_address       (2'b00),                                             // (terminated)
		.csr_read          (1'b0),                                              // (terminated)
		.csr_write         (1'b0),                                              // (terminated)
		.csr_readdata      (),                                                  // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),              // (terminated)
		.almost_full_data  (),                                                  // (terminated)
		.almost_empty_data (),                                                  // (terminated)
		.in_empty          (1'b0),                                              // (terminated)
		.out_empty         (),                                                  // (terminated)
		.in_error          (1'b0),                                              // (terminated)
		.out_error         (),                                                  // (terminated)
		.in_channel        (1'b0),                                              // (terminated)
		.out_channel       ()                                                   // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (93),
		.PKT_ORI_BURST_SIZE_L      (91),
		.PKT_RESPONSE_STATUS_H     (90),
		.PKT_RESPONSE_STATUS_L     (89),
		.PKT_BURST_SIZE_H          (64),
		.PKT_BURST_SIZE_L          (62),
		.PKT_TRANS_LOCK            (54),
		.PKT_BEGIN_BURST           (69),
		.PKT_PROTECTION_H          (84),
		.PKT_PROTECTION_L          (82),
		.PKT_BURSTWRAP_H           (61),
		.PKT_BURSTWRAP_L           (59),
		.PKT_BYTE_CNT_H            (58),
		.PKT_BYTE_CNT_L            (56),
		.PKT_ADDR_H                (49),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (50),
		.PKT_TRANS_POSTED          (51),
		.PKT_TRANS_WRITE           (52),
		.PKT_TRANS_READ            (53),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (75),
		.PKT_SRC_ID_L              (71),
		.PKT_DEST_ID_H             (80),
		.PKT_DEST_ID_L             (76),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (18),
		.ST_DATA_W                 (94),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) draining_s1_agent (
		.clk                     (clk_0_clk_clk),                                     //             clk.clk
		.reset                   (nios2_processor_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (draining_s1_agent_m0_address),                      //              m0.address
		.m0_burstcount           (draining_s1_agent_m0_burstcount),                   //                .burstcount
		.m0_byteenable           (draining_s1_agent_m0_byteenable),                   //                .byteenable
		.m0_debugaccess          (draining_s1_agent_m0_debugaccess),                  //                .debugaccess
		.m0_lock                 (draining_s1_agent_m0_lock),                         //                .lock
		.m0_readdata             (draining_s1_agent_m0_readdata),                     //                .readdata
		.m0_readdatavalid        (draining_s1_agent_m0_readdatavalid),                //                .readdatavalid
		.m0_read                 (draining_s1_agent_m0_read),                         //                .read
		.m0_waitrequest          (draining_s1_agent_m0_waitrequest),                  //                .waitrequest
		.m0_writedata            (draining_s1_agent_m0_writedata),                    //                .writedata
		.m0_write                (draining_s1_agent_m0_write),                        //                .write
		.rp_endofpacket          (draining_s1_agent_rp_endofpacket),                  //              rp.endofpacket
		.rp_ready                (draining_s1_agent_rp_ready),                        //                .ready
		.rp_valid                (draining_s1_agent_rp_valid),                        //                .valid
		.rp_data                 (draining_s1_agent_rp_data),                         //                .data
		.rp_startofpacket        (draining_s1_agent_rp_startofpacket),                //                .startofpacket
		.cp_ready                (cmd_mux_004_src_ready),                             //              cp.ready
		.cp_valid                (cmd_mux_004_src_valid),                             //                .valid
		.cp_data                 (cmd_mux_004_src_data),                              //                .data
		.cp_startofpacket        (cmd_mux_004_src_startofpacket),                     //                .startofpacket
		.cp_endofpacket          (cmd_mux_004_src_endofpacket),                       //                .endofpacket
		.cp_channel              (cmd_mux_004_src_channel),                           //                .channel
		.rf_sink_ready           (draining_s1_agent_rsp_fifo_out_ready),              //         rf_sink.ready
		.rf_sink_valid           (draining_s1_agent_rsp_fifo_out_valid),              //                .valid
		.rf_sink_startofpacket   (draining_s1_agent_rsp_fifo_out_startofpacket),      //                .startofpacket
		.rf_sink_endofpacket     (draining_s1_agent_rsp_fifo_out_endofpacket),        //                .endofpacket
		.rf_sink_data            (draining_s1_agent_rsp_fifo_out_data),               //                .data
		.rf_source_ready         (draining_s1_agent_rf_source_ready),                 //       rf_source.ready
		.rf_source_valid         (draining_s1_agent_rf_source_valid),                 //                .valid
		.rf_source_startofpacket (draining_s1_agent_rf_source_startofpacket),         //                .startofpacket
		.rf_source_endofpacket   (draining_s1_agent_rf_source_endofpacket),           //                .endofpacket
		.rf_source_data          (draining_s1_agent_rf_source_data),                  //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_004_out_0_ready),                 // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_004_out_0_valid),                 //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_004_out_0_data),                  //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_004_out_0_error),                 //                .error
		.rdata_fifo_src_ready    (draining_s1_agent_rdata_fifo_src_ready),            //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (draining_s1_agent_rdata_fifo_src_valid),            //                .valid
		.rdata_fifo_src_data     (draining_s1_agent_rdata_fifo_src_data),             //                .data
		.m0_response             (2'b00),                                             //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                               //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (95),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) draining_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                     //       clk.clk
		.reset             (nios2_processor_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (draining_s1_agent_rf_source_data),                  //        in.data
		.in_valid          (draining_s1_agent_rf_source_valid),                 //          .valid
		.in_ready          (draining_s1_agent_rf_source_ready),                 //          .ready
		.in_startofpacket  (draining_s1_agent_rf_source_startofpacket),         //          .startofpacket
		.in_endofpacket    (draining_s1_agent_rf_source_endofpacket),           //          .endofpacket
		.out_data          (draining_s1_agent_rsp_fifo_out_data),               //       out.data
		.out_valid         (draining_s1_agent_rsp_fifo_out_valid),              //          .valid
		.out_ready         (draining_s1_agent_rsp_fifo_out_ready),              //          .ready
		.out_startofpacket (draining_s1_agent_rsp_fifo_out_startofpacket),      //          .startofpacket
		.out_endofpacket   (draining_s1_agent_rsp_fifo_out_endofpacket),        //          .endofpacket
		.csr_address       (2'b00),                                             // (terminated)
		.csr_read          (1'b0),                                              // (terminated)
		.csr_write         (1'b0),                                              // (terminated)
		.csr_readdata      (),                                                  // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),              // (terminated)
		.almost_full_data  (),                                                  // (terminated)
		.almost_empty_data (),                                                  // (terminated)
		.in_empty          (1'b0),                                              // (terminated)
		.out_empty         (),                                                  // (terminated)
		.in_error          (1'b0),                                              // (terminated)
		.out_error         (),                                                  // (terminated)
		.in_channel        (1'b0),                                              // (terminated)
		.out_channel       ()                                                   // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (93),
		.PKT_ORI_BURST_SIZE_L      (91),
		.PKT_RESPONSE_STATUS_H     (90),
		.PKT_RESPONSE_STATUS_L     (89),
		.PKT_BURST_SIZE_H          (64),
		.PKT_BURST_SIZE_L          (62),
		.PKT_TRANS_LOCK            (54),
		.PKT_BEGIN_BURST           (69),
		.PKT_PROTECTION_H          (84),
		.PKT_PROTECTION_L          (82),
		.PKT_BURSTWRAP_H           (61),
		.PKT_BURSTWRAP_L           (59),
		.PKT_BYTE_CNT_H            (58),
		.PKT_BYTE_CNT_L            (56),
		.PKT_ADDR_H                (49),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (50),
		.PKT_TRANS_POSTED          (51),
		.PKT_TRANS_WRITE           (52),
		.PKT_TRANS_READ            (53),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (75),
		.PKT_SRC_ID_L              (71),
		.PKT_DEST_ID_H             (80),
		.PKT_DEST_ID_L             (76),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (18),
		.ST_DATA_W                 (94),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) innerdoor_s1_agent (
		.clk                     (clk_0_clk_clk),                                     //             clk.clk
		.reset                   (nios2_processor_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (innerdoor_s1_agent_m0_address),                     //              m0.address
		.m0_burstcount           (innerdoor_s1_agent_m0_burstcount),                  //                .burstcount
		.m0_byteenable           (innerdoor_s1_agent_m0_byteenable),                  //                .byteenable
		.m0_debugaccess          (innerdoor_s1_agent_m0_debugaccess),                 //                .debugaccess
		.m0_lock                 (innerdoor_s1_agent_m0_lock),                        //                .lock
		.m0_readdata             (innerdoor_s1_agent_m0_readdata),                    //                .readdata
		.m0_readdatavalid        (innerdoor_s1_agent_m0_readdatavalid),               //                .readdatavalid
		.m0_read                 (innerdoor_s1_agent_m0_read),                        //                .read
		.m0_waitrequest          (innerdoor_s1_agent_m0_waitrequest),                 //                .waitrequest
		.m0_writedata            (innerdoor_s1_agent_m0_writedata),                   //                .writedata
		.m0_write                (innerdoor_s1_agent_m0_write),                       //                .write
		.rp_endofpacket          (innerdoor_s1_agent_rp_endofpacket),                 //              rp.endofpacket
		.rp_ready                (innerdoor_s1_agent_rp_ready),                       //                .ready
		.rp_valid                (innerdoor_s1_agent_rp_valid),                       //                .valid
		.rp_data                 (innerdoor_s1_agent_rp_data),                        //                .data
		.rp_startofpacket        (innerdoor_s1_agent_rp_startofpacket),               //                .startofpacket
		.cp_ready                (cmd_mux_005_src_ready),                             //              cp.ready
		.cp_valid                (cmd_mux_005_src_valid),                             //                .valid
		.cp_data                 (cmd_mux_005_src_data),                              //                .data
		.cp_startofpacket        (cmd_mux_005_src_startofpacket),                     //                .startofpacket
		.cp_endofpacket          (cmd_mux_005_src_endofpacket),                       //                .endofpacket
		.cp_channel              (cmd_mux_005_src_channel),                           //                .channel
		.rf_sink_ready           (innerdoor_s1_agent_rsp_fifo_out_ready),             //         rf_sink.ready
		.rf_sink_valid           (innerdoor_s1_agent_rsp_fifo_out_valid),             //                .valid
		.rf_sink_startofpacket   (innerdoor_s1_agent_rsp_fifo_out_startofpacket),     //                .startofpacket
		.rf_sink_endofpacket     (innerdoor_s1_agent_rsp_fifo_out_endofpacket),       //                .endofpacket
		.rf_sink_data            (innerdoor_s1_agent_rsp_fifo_out_data),              //                .data
		.rf_source_ready         (innerdoor_s1_agent_rf_source_ready),                //       rf_source.ready
		.rf_source_valid         (innerdoor_s1_agent_rf_source_valid),                //                .valid
		.rf_source_startofpacket (innerdoor_s1_agent_rf_source_startofpacket),        //                .startofpacket
		.rf_source_endofpacket   (innerdoor_s1_agent_rf_source_endofpacket),          //                .endofpacket
		.rf_source_data          (innerdoor_s1_agent_rf_source_data),                 //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_005_out_0_ready),                 // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_005_out_0_valid),                 //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_005_out_0_data),                  //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_005_out_0_error),                 //                .error
		.rdata_fifo_src_ready    (innerdoor_s1_agent_rdata_fifo_src_ready),           //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (innerdoor_s1_agent_rdata_fifo_src_valid),           //                .valid
		.rdata_fifo_src_data     (innerdoor_s1_agent_rdata_fifo_src_data),            //                .data
		.m0_response             (2'b00),                                             //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                               //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (95),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) innerdoor_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                     //       clk.clk
		.reset             (nios2_processor_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (innerdoor_s1_agent_rf_source_data),                 //        in.data
		.in_valid          (innerdoor_s1_agent_rf_source_valid),                //          .valid
		.in_ready          (innerdoor_s1_agent_rf_source_ready),                //          .ready
		.in_startofpacket  (innerdoor_s1_agent_rf_source_startofpacket),        //          .startofpacket
		.in_endofpacket    (innerdoor_s1_agent_rf_source_endofpacket),          //          .endofpacket
		.out_data          (innerdoor_s1_agent_rsp_fifo_out_data),              //       out.data
		.out_valid         (innerdoor_s1_agent_rsp_fifo_out_valid),             //          .valid
		.out_ready         (innerdoor_s1_agent_rsp_fifo_out_ready),             //          .ready
		.out_startofpacket (innerdoor_s1_agent_rsp_fifo_out_startofpacket),     //          .startofpacket
		.out_endofpacket   (innerdoor_s1_agent_rsp_fifo_out_endofpacket),       //          .endofpacket
		.csr_address       (2'b00),                                             // (terminated)
		.csr_read          (1'b0),                                              // (terminated)
		.csr_write         (1'b0),                                              // (terminated)
		.csr_readdata      (),                                                  // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),              // (terminated)
		.almost_full_data  (),                                                  // (terminated)
		.almost_empty_data (),                                                  // (terminated)
		.in_empty          (1'b0),                                              // (terminated)
		.out_empty         (),                                                  // (terminated)
		.in_error          (1'b0),                                              // (terminated)
		.out_error         (),                                                  // (terminated)
		.in_channel        (1'b0),                                              // (terminated)
		.out_channel       ()                                                   // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (93),
		.PKT_ORI_BURST_SIZE_L      (91),
		.PKT_RESPONSE_STATUS_H     (90),
		.PKT_RESPONSE_STATUS_L     (89),
		.PKT_BURST_SIZE_H          (64),
		.PKT_BURST_SIZE_L          (62),
		.PKT_TRANS_LOCK            (54),
		.PKT_BEGIN_BURST           (69),
		.PKT_PROTECTION_H          (84),
		.PKT_PROTECTION_L          (82),
		.PKT_BURSTWRAP_H           (61),
		.PKT_BURSTWRAP_L           (59),
		.PKT_BYTE_CNT_H            (58),
		.PKT_BYTE_CNT_L            (56),
		.PKT_ADDR_H                (49),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (50),
		.PKT_TRANS_POSTED          (51),
		.PKT_TRANS_WRITE           (52),
		.PKT_TRANS_READ            (53),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (75),
		.PKT_SRC_ID_L              (71),
		.PKT_DEST_ID_H             (80),
		.PKT_DEST_ID_L             (76),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (18),
		.ST_DATA_W                 (94),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) outerdoor_s1_agent (
		.clk                     (clk_0_clk_clk),                                     //             clk.clk
		.reset                   (nios2_processor_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (outerdoor_s1_agent_m0_address),                     //              m0.address
		.m0_burstcount           (outerdoor_s1_agent_m0_burstcount),                  //                .burstcount
		.m0_byteenable           (outerdoor_s1_agent_m0_byteenable),                  //                .byteenable
		.m0_debugaccess          (outerdoor_s1_agent_m0_debugaccess),                 //                .debugaccess
		.m0_lock                 (outerdoor_s1_agent_m0_lock),                        //                .lock
		.m0_readdata             (outerdoor_s1_agent_m0_readdata),                    //                .readdata
		.m0_readdatavalid        (outerdoor_s1_agent_m0_readdatavalid),               //                .readdatavalid
		.m0_read                 (outerdoor_s1_agent_m0_read),                        //                .read
		.m0_waitrequest          (outerdoor_s1_agent_m0_waitrequest),                 //                .waitrequest
		.m0_writedata            (outerdoor_s1_agent_m0_writedata),                   //                .writedata
		.m0_write                (outerdoor_s1_agent_m0_write),                       //                .write
		.rp_endofpacket          (outerdoor_s1_agent_rp_endofpacket),                 //              rp.endofpacket
		.rp_ready                (outerdoor_s1_agent_rp_ready),                       //                .ready
		.rp_valid                (outerdoor_s1_agent_rp_valid),                       //                .valid
		.rp_data                 (outerdoor_s1_agent_rp_data),                        //                .data
		.rp_startofpacket        (outerdoor_s1_agent_rp_startofpacket),               //                .startofpacket
		.cp_ready                (cmd_mux_006_src_ready),                             //              cp.ready
		.cp_valid                (cmd_mux_006_src_valid),                             //                .valid
		.cp_data                 (cmd_mux_006_src_data),                              //                .data
		.cp_startofpacket        (cmd_mux_006_src_startofpacket),                     //                .startofpacket
		.cp_endofpacket          (cmd_mux_006_src_endofpacket),                       //                .endofpacket
		.cp_channel              (cmd_mux_006_src_channel),                           //                .channel
		.rf_sink_ready           (outerdoor_s1_agent_rsp_fifo_out_ready),             //         rf_sink.ready
		.rf_sink_valid           (outerdoor_s1_agent_rsp_fifo_out_valid),             //                .valid
		.rf_sink_startofpacket   (outerdoor_s1_agent_rsp_fifo_out_startofpacket),     //                .startofpacket
		.rf_sink_endofpacket     (outerdoor_s1_agent_rsp_fifo_out_endofpacket),       //                .endofpacket
		.rf_sink_data            (outerdoor_s1_agent_rsp_fifo_out_data),              //                .data
		.rf_source_ready         (outerdoor_s1_agent_rf_source_ready),                //       rf_source.ready
		.rf_source_valid         (outerdoor_s1_agent_rf_source_valid),                //                .valid
		.rf_source_startofpacket (outerdoor_s1_agent_rf_source_startofpacket),        //                .startofpacket
		.rf_source_endofpacket   (outerdoor_s1_agent_rf_source_endofpacket),          //                .endofpacket
		.rf_source_data          (outerdoor_s1_agent_rf_source_data),                 //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_006_out_0_ready),                 // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_006_out_0_valid),                 //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_006_out_0_data),                  //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_006_out_0_error),                 //                .error
		.rdata_fifo_src_ready    (outerdoor_s1_agent_rdata_fifo_src_ready),           //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (outerdoor_s1_agent_rdata_fifo_src_valid),           //                .valid
		.rdata_fifo_src_data     (outerdoor_s1_agent_rdata_fifo_src_data),            //                .data
		.m0_response             (2'b00),                                             //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                               //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (95),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) outerdoor_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                     //       clk.clk
		.reset             (nios2_processor_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (outerdoor_s1_agent_rf_source_data),                 //        in.data
		.in_valid          (outerdoor_s1_agent_rf_source_valid),                //          .valid
		.in_ready          (outerdoor_s1_agent_rf_source_ready),                //          .ready
		.in_startofpacket  (outerdoor_s1_agent_rf_source_startofpacket),        //          .startofpacket
		.in_endofpacket    (outerdoor_s1_agent_rf_source_endofpacket),          //          .endofpacket
		.out_data          (outerdoor_s1_agent_rsp_fifo_out_data),              //       out.data
		.out_valid         (outerdoor_s1_agent_rsp_fifo_out_valid),             //          .valid
		.out_ready         (outerdoor_s1_agent_rsp_fifo_out_ready),             //          .ready
		.out_startofpacket (outerdoor_s1_agent_rsp_fifo_out_startofpacket),     //          .startofpacket
		.out_endofpacket   (outerdoor_s1_agent_rsp_fifo_out_endofpacket),       //          .endofpacket
		.csr_address       (2'b00),                                             // (terminated)
		.csr_read          (1'b0),                                              // (terminated)
		.csr_write         (1'b0),                                              // (terminated)
		.csr_readdata      (),                                                  // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),              // (terminated)
		.almost_full_data  (),                                                  // (terminated)
		.almost_empty_data (),                                                  // (terminated)
		.in_empty          (1'b0),                                              // (terminated)
		.out_empty         (),                                                  // (terminated)
		.in_error          (1'b0),                                              // (terminated)
		.out_error         (),                                                  // (terminated)
		.in_channel        (1'b0),                                              // (terminated)
		.out_channel       ()                                                   // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (93),
		.PKT_ORI_BURST_SIZE_L      (91),
		.PKT_RESPONSE_STATUS_H     (90),
		.PKT_RESPONSE_STATUS_L     (89),
		.PKT_BURST_SIZE_H          (64),
		.PKT_BURST_SIZE_L          (62),
		.PKT_TRANS_LOCK            (54),
		.PKT_BEGIN_BURST           (69),
		.PKT_PROTECTION_H          (84),
		.PKT_PROTECTION_L          (82),
		.PKT_BURSTWRAP_H           (61),
		.PKT_BURSTWRAP_L           (59),
		.PKT_BYTE_CNT_H            (58),
		.PKT_BYTE_CNT_L            (56),
		.PKT_ADDR_H                (49),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (50),
		.PKT_TRANS_POSTED          (51),
		.PKT_TRANS_WRITE           (52),
		.PKT_TRANS_READ            (53),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (75),
		.PKT_SRC_ID_L              (71),
		.PKT_DEST_ID_H             (80),
		.PKT_DEST_ID_L             (76),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (18),
		.ST_DATA_W                 (94),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) resetleds_s1_agent (
		.clk                     (clk_0_clk_clk),                                     //             clk.clk
		.reset                   (nios2_processor_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (resetleds_s1_agent_m0_address),                     //              m0.address
		.m0_burstcount           (resetleds_s1_agent_m0_burstcount),                  //                .burstcount
		.m0_byteenable           (resetleds_s1_agent_m0_byteenable),                  //                .byteenable
		.m0_debugaccess          (resetleds_s1_agent_m0_debugaccess),                 //                .debugaccess
		.m0_lock                 (resetleds_s1_agent_m0_lock),                        //                .lock
		.m0_readdata             (resetleds_s1_agent_m0_readdata),                    //                .readdata
		.m0_readdatavalid        (resetleds_s1_agent_m0_readdatavalid),               //                .readdatavalid
		.m0_read                 (resetleds_s1_agent_m0_read),                        //                .read
		.m0_waitrequest          (resetleds_s1_agent_m0_waitrequest),                 //                .waitrequest
		.m0_writedata            (resetleds_s1_agent_m0_writedata),                   //                .writedata
		.m0_write                (resetleds_s1_agent_m0_write),                       //                .write
		.rp_endofpacket          (resetleds_s1_agent_rp_endofpacket),                 //              rp.endofpacket
		.rp_ready                (resetleds_s1_agent_rp_ready),                       //                .ready
		.rp_valid                (resetleds_s1_agent_rp_valid),                       //                .valid
		.rp_data                 (resetleds_s1_agent_rp_data),                        //                .data
		.rp_startofpacket        (resetleds_s1_agent_rp_startofpacket),               //                .startofpacket
		.cp_ready                (cmd_mux_007_src_ready),                             //              cp.ready
		.cp_valid                (cmd_mux_007_src_valid),                             //                .valid
		.cp_data                 (cmd_mux_007_src_data),                              //                .data
		.cp_startofpacket        (cmd_mux_007_src_startofpacket),                     //                .startofpacket
		.cp_endofpacket          (cmd_mux_007_src_endofpacket),                       //                .endofpacket
		.cp_channel              (cmd_mux_007_src_channel),                           //                .channel
		.rf_sink_ready           (resetleds_s1_agent_rsp_fifo_out_ready),             //         rf_sink.ready
		.rf_sink_valid           (resetleds_s1_agent_rsp_fifo_out_valid),             //                .valid
		.rf_sink_startofpacket   (resetleds_s1_agent_rsp_fifo_out_startofpacket),     //                .startofpacket
		.rf_sink_endofpacket     (resetleds_s1_agent_rsp_fifo_out_endofpacket),       //                .endofpacket
		.rf_sink_data            (resetleds_s1_agent_rsp_fifo_out_data),              //                .data
		.rf_source_ready         (resetleds_s1_agent_rf_source_ready),                //       rf_source.ready
		.rf_source_valid         (resetleds_s1_agent_rf_source_valid),                //                .valid
		.rf_source_startofpacket (resetleds_s1_agent_rf_source_startofpacket),        //                .startofpacket
		.rf_source_endofpacket   (resetleds_s1_agent_rf_source_endofpacket),          //                .endofpacket
		.rf_source_data          (resetleds_s1_agent_rf_source_data),                 //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_007_out_0_ready),                 // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_007_out_0_valid),                 //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_007_out_0_data),                  //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_007_out_0_error),                 //                .error
		.rdata_fifo_src_ready    (resetleds_s1_agent_rdata_fifo_src_ready),           //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (resetleds_s1_agent_rdata_fifo_src_valid),           //                .valid
		.rdata_fifo_src_data     (resetleds_s1_agent_rdata_fifo_src_data),            //                .data
		.m0_response             (2'b00),                                             //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                               //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (95),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) resetleds_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                     //       clk.clk
		.reset             (nios2_processor_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (resetleds_s1_agent_rf_source_data),                 //        in.data
		.in_valid          (resetleds_s1_agent_rf_source_valid),                //          .valid
		.in_ready          (resetleds_s1_agent_rf_source_ready),                //          .ready
		.in_startofpacket  (resetleds_s1_agent_rf_source_startofpacket),        //          .startofpacket
		.in_endofpacket    (resetleds_s1_agent_rf_source_endofpacket),          //          .endofpacket
		.out_data          (resetleds_s1_agent_rsp_fifo_out_data),              //       out.data
		.out_valid         (resetleds_s1_agent_rsp_fifo_out_valid),             //          .valid
		.out_ready         (resetleds_s1_agent_rsp_fifo_out_ready),             //          .ready
		.out_startofpacket (resetleds_s1_agent_rsp_fifo_out_startofpacket),     //          .startofpacket
		.out_endofpacket   (resetleds_s1_agent_rsp_fifo_out_endofpacket),       //          .endofpacket
		.csr_address       (2'b00),                                             // (terminated)
		.csr_read          (1'b0),                                              // (terminated)
		.csr_write         (1'b0),                                              // (terminated)
		.csr_readdata      (),                                                  // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),              // (terminated)
		.almost_full_data  (),                                                  // (terminated)
		.almost_empty_data (),                                                  // (terminated)
		.in_empty          (1'b0),                                              // (terminated)
		.out_empty         (),                                                  // (terminated)
		.in_error          (1'b0),                                              // (terminated)
		.out_error         (),                                                  // (terminated)
		.in_channel        (1'b0),                                              // (terminated)
		.out_channel       ()                                                   // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (93),
		.PKT_ORI_BURST_SIZE_L      (91),
		.PKT_RESPONSE_STATUS_H     (90),
		.PKT_RESPONSE_STATUS_L     (89),
		.PKT_BURST_SIZE_H          (64),
		.PKT_BURST_SIZE_L          (62),
		.PKT_TRANS_LOCK            (54),
		.PKT_BEGIN_BURST           (69),
		.PKT_PROTECTION_H          (84),
		.PKT_PROTECTION_L          (82),
		.PKT_BURSTWRAP_H           (61),
		.PKT_BURSTWRAP_L           (59),
		.PKT_BYTE_CNT_H            (58),
		.PKT_BYTE_CNT_L            (56),
		.PKT_ADDR_H                (49),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (50),
		.PKT_TRANS_POSTED          (51),
		.PKT_TRANS_WRITE           (52),
		.PKT_TRANS_READ            (53),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (75),
		.PKT_SRC_ID_L              (71),
		.PKT_DEST_ID_H             (80),
		.PKT_DEST_ID_L             (76),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (18),
		.ST_DATA_W                 (94),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) bathleaving_s1_agent (
		.clk                     (clk_0_clk_clk),                                     //             clk.clk
		.reset                   (nios2_processor_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (bathleaving_s1_agent_m0_address),                   //              m0.address
		.m0_burstcount           (bathleaving_s1_agent_m0_burstcount),                //                .burstcount
		.m0_byteenable           (bathleaving_s1_agent_m0_byteenable),                //                .byteenable
		.m0_debugaccess          (bathleaving_s1_agent_m0_debugaccess),               //                .debugaccess
		.m0_lock                 (bathleaving_s1_agent_m0_lock),                      //                .lock
		.m0_readdata             (bathleaving_s1_agent_m0_readdata),                  //                .readdata
		.m0_readdatavalid        (bathleaving_s1_agent_m0_readdatavalid),             //                .readdatavalid
		.m0_read                 (bathleaving_s1_agent_m0_read),                      //                .read
		.m0_waitrequest          (bathleaving_s1_agent_m0_waitrequest),               //                .waitrequest
		.m0_writedata            (bathleaving_s1_agent_m0_writedata),                 //                .writedata
		.m0_write                (bathleaving_s1_agent_m0_write),                     //                .write
		.rp_endofpacket          (bathleaving_s1_agent_rp_endofpacket),               //              rp.endofpacket
		.rp_ready                (bathleaving_s1_agent_rp_ready),                     //                .ready
		.rp_valid                (bathleaving_s1_agent_rp_valid),                     //                .valid
		.rp_data                 (bathleaving_s1_agent_rp_data),                      //                .data
		.rp_startofpacket        (bathleaving_s1_agent_rp_startofpacket),             //                .startofpacket
		.cp_ready                (cmd_mux_008_src_ready),                             //              cp.ready
		.cp_valid                (cmd_mux_008_src_valid),                             //                .valid
		.cp_data                 (cmd_mux_008_src_data),                              //                .data
		.cp_startofpacket        (cmd_mux_008_src_startofpacket),                     //                .startofpacket
		.cp_endofpacket          (cmd_mux_008_src_endofpacket),                       //                .endofpacket
		.cp_channel              (cmd_mux_008_src_channel),                           //                .channel
		.rf_sink_ready           (bathleaving_s1_agent_rsp_fifo_out_ready),           //         rf_sink.ready
		.rf_sink_valid           (bathleaving_s1_agent_rsp_fifo_out_valid),           //                .valid
		.rf_sink_startofpacket   (bathleaving_s1_agent_rsp_fifo_out_startofpacket),   //                .startofpacket
		.rf_sink_endofpacket     (bathleaving_s1_agent_rsp_fifo_out_endofpacket),     //                .endofpacket
		.rf_sink_data            (bathleaving_s1_agent_rsp_fifo_out_data),            //                .data
		.rf_source_ready         (bathleaving_s1_agent_rf_source_ready),              //       rf_source.ready
		.rf_source_valid         (bathleaving_s1_agent_rf_source_valid),              //                .valid
		.rf_source_startofpacket (bathleaving_s1_agent_rf_source_startofpacket),      //                .startofpacket
		.rf_source_endofpacket   (bathleaving_s1_agent_rf_source_endofpacket),        //                .endofpacket
		.rf_source_data          (bathleaving_s1_agent_rf_source_data),               //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_008_out_0_ready),                 // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_008_out_0_valid),                 //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_008_out_0_data),                  //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_008_out_0_error),                 //                .error
		.rdata_fifo_src_ready    (bathleaving_s1_agent_rdata_fifo_src_ready),         //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (bathleaving_s1_agent_rdata_fifo_src_valid),         //                .valid
		.rdata_fifo_src_data     (bathleaving_s1_agent_rdata_fifo_src_data),          //                .data
		.m0_response             (2'b00),                                             //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                               //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (95),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) bathleaving_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                     //       clk.clk
		.reset             (nios2_processor_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (bathleaving_s1_agent_rf_source_data),               //        in.data
		.in_valid          (bathleaving_s1_agent_rf_source_valid),              //          .valid
		.in_ready          (bathleaving_s1_agent_rf_source_ready),              //          .ready
		.in_startofpacket  (bathleaving_s1_agent_rf_source_startofpacket),      //          .startofpacket
		.in_endofpacket    (bathleaving_s1_agent_rf_source_endofpacket),        //          .endofpacket
		.out_data          (bathleaving_s1_agent_rsp_fifo_out_data),            //       out.data
		.out_valid         (bathleaving_s1_agent_rsp_fifo_out_valid),           //          .valid
		.out_ready         (bathleaving_s1_agent_rsp_fifo_out_ready),           //          .ready
		.out_startofpacket (bathleaving_s1_agent_rsp_fifo_out_startofpacket),   //          .startofpacket
		.out_endofpacket   (bathleaving_s1_agent_rsp_fifo_out_endofpacket),     //          .endofpacket
		.csr_address       (2'b00),                                             // (terminated)
		.csr_read          (1'b0),                                              // (terminated)
		.csr_write         (1'b0),                                              // (terminated)
		.csr_readdata      (),                                                  // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),              // (terminated)
		.almost_full_data  (),                                                  // (terminated)
		.almost_empty_data (),                                                  // (terminated)
		.in_empty          (1'b0),                                              // (terminated)
		.out_empty         (),                                                  // (terminated)
		.in_error          (1'b0),                                              // (terminated)
		.out_error         (),                                                  // (terminated)
		.in_channel        (1'b0),                                              // (terminated)
		.out_channel       ()                                                   // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (93),
		.PKT_ORI_BURST_SIZE_L      (91),
		.PKT_RESPONSE_STATUS_H     (90),
		.PKT_RESPONSE_STATUS_L     (89),
		.PKT_BURST_SIZE_H          (64),
		.PKT_BURST_SIZE_L          (62),
		.PKT_TRANS_LOCK            (54),
		.PKT_BEGIN_BURST           (69),
		.PKT_PROTECTION_H          (84),
		.PKT_PROTECTION_L          (82),
		.PKT_BURSTWRAP_H           (61),
		.PKT_BURSTWRAP_L           (59),
		.PKT_BYTE_CNT_H            (58),
		.PKT_BYTE_CNT_L            (56),
		.PKT_ADDR_H                (49),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (50),
		.PKT_TRANS_POSTED          (51),
		.PKT_TRANS_WRITE           (52),
		.PKT_TRANS_READ            (53),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (75),
		.PKT_SRC_ID_L              (71),
		.PKT_DEST_ID_H             (80),
		.PKT_DEST_ID_L             (76),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (18),
		.ST_DATA_W                 (94),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) batharriving_s1_agent (
		.clk                     (clk_0_clk_clk),                                     //             clk.clk
		.reset                   (nios2_processor_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (batharriving_s1_agent_m0_address),                  //              m0.address
		.m0_burstcount           (batharriving_s1_agent_m0_burstcount),               //                .burstcount
		.m0_byteenable           (batharriving_s1_agent_m0_byteenable),               //                .byteenable
		.m0_debugaccess          (batharriving_s1_agent_m0_debugaccess),              //                .debugaccess
		.m0_lock                 (batharriving_s1_agent_m0_lock),                     //                .lock
		.m0_readdata             (batharriving_s1_agent_m0_readdata),                 //                .readdata
		.m0_readdatavalid        (batharriving_s1_agent_m0_readdatavalid),            //                .readdatavalid
		.m0_read                 (batharriving_s1_agent_m0_read),                     //                .read
		.m0_waitrequest          (batharriving_s1_agent_m0_waitrequest),              //                .waitrequest
		.m0_writedata            (batharriving_s1_agent_m0_writedata),                //                .writedata
		.m0_write                (batharriving_s1_agent_m0_write),                    //                .write
		.rp_endofpacket          (batharriving_s1_agent_rp_endofpacket),              //              rp.endofpacket
		.rp_ready                (batharriving_s1_agent_rp_ready),                    //                .ready
		.rp_valid                (batharriving_s1_agent_rp_valid),                    //                .valid
		.rp_data                 (batharriving_s1_agent_rp_data),                     //                .data
		.rp_startofpacket        (batharriving_s1_agent_rp_startofpacket),            //                .startofpacket
		.cp_ready                (cmd_mux_009_src_ready),                             //              cp.ready
		.cp_valid                (cmd_mux_009_src_valid),                             //                .valid
		.cp_data                 (cmd_mux_009_src_data),                              //                .data
		.cp_startofpacket        (cmd_mux_009_src_startofpacket),                     //                .startofpacket
		.cp_endofpacket          (cmd_mux_009_src_endofpacket),                       //                .endofpacket
		.cp_channel              (cmd_mux_009_src_channel),                           //                .channel
		.rf_sink_ready           (batharriving_s1_agent_rsp_fifo_out_ready),          //         rf_sink.ready
		.rf_sink_valid           (batharriving_s1_agent_rsp_fifo_out_valid),          //                .valid
		.rf_sink_startofpacket   (batharriving_s1_agent_rsp_fifo_out_startofpacket),  //                .startofpacket
		.rf_sink_endofpacket     (batharriving_s1_agent_rsp_fifo_out_endofpacket),    //                .endofpacket
		.rf_sink_data            (batharriving_s1_agent_rsp_fifo_out_data),           //                .data
		.rf_source_ready         (batharriving_s1_agent_rf_source_ready),             //       rf_source.ready
		.rf_source_valid         (batharriving_s1_agent_rf_source_valid),             //                .valid
		.rf_source_startofpacket (batharriving_s1_agent_rf_source_startofpacket),     //                .startofpacket
		.rf_source_endofpacket   (batharriving_s1_agent_rf_source_endofpacket),       //                .endofpacket
		.rf_source_data          (batharriving_s1_agent_rf_source_data),              //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_009_out_0_ready),                 // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_009_out_0_valid),                 //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_009_out_0_data),                  //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_009_out_0_error),                 //                .error
		.rdata_fifo_src_ready    (batharriving_s1_agent_rdata_fifo_src_ready),        //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (batharriving_s1_agent_rdata_fifo_src_valid),        //                .valid
		.rdata_fifo_src_data     (batharriving_s1_agent_rdata_fifo_src_data),         //                .data
		.m0_response             (2'b00),                                             //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                               //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (95),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) batharriving_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                     //       clk.clk
		.reset             (nios2_processor_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (batharriving_s1_agent_rf_source_data),              //        in.data
		.in_valid          (batharriving_s1_agent_rf_source_valid),             //          .valid
		.in_ready          (batharriving_s1_agent_rf_source_ready),             //          .ready
		.in_startofpacket  (batharriving_s1_agent_rf_source_startofpacket),     //          .startofpacket
		.in_endofpacket    (batharriving_s1_agent_rf_source_endofpacket),       //          .endofpacket
		.out_data          (batharriving_s1_agent_rsp_fifo_out_data),           //       out.data
		.out_valid         (batharriving_s1_agent_rsp_fifo_out_valid),          //          .valid
		.out_ready         (batharriving_s1_agent_rsp_fifo_out_ready),          //          .ready
		.out_startofpacket (batharriving_s1_agent_rsp_fifo_out_startofpacket),  //          .startofpacket
		.out_endofpacket   (batharriving_s1_agent_rsp_fifo_out_endofpacket),    //          .endofpacket
		.csr_address       (2'b00),                                             // (terminated)
		.csr_read          (1'b0),                                              // (terminated)
		.csr_write         (1'b0),                                              // (terminated)
		.csr_readdata      (),                                                  // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),              // (terminated)
		.almost_full_data  (),                                                  // (terminated)
		.almost_empty_data (),                                                  // (terminated)
		.in_empty          (1'b0),                                              // (terminated)
		.out_empty         (),                                                  // (terminated)
		.in_error          (1'b0),                                              // (terminated)
		.out_error         (),                                                  // (terminated)
		.in_channel        (1'b0),                                              // (terminated)
		.out_channel       ()                                                   // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (93),
		.PKT_ORI_BURST_SIZE_L      (91),
		.PKT_RESPONSE_STATUS_H     (90),
		.PKT_RESPONSE_STATUS_L     (89),
		.PKT_BURST_SIZE_H          (64),
		.PKT_BURST_SIZE_L          (62),
		.PKT_TRANS_LOCK            (54),
		.PKT_BEGIN_BURST           (69),
		.PKT_PROTECTION_H          (84),
		.PKT_PROTECTION_L          (82),
		.PKT_BURSTWRAP_H           (61),
		.PKT_BURSTWRAP_L           (59),
		.PKT_BYTE_CNT_H            (58),
		.PKT_BYTE_CNT_L            (56),
		.PKT_ADDR_H                (49),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (50),
		.PKT_TRANS_POSTED          (51),
		.PKT_TRANS_WRITE           (52),
		.PKT_TRANS_READ            (53),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (75),
		.PKT_SRC_ID_L              (71),
		.PKT_DEST_ID_H             (80),
		.PKT_DEST_ID_L             (76),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (18),
		.ST_DATA_W                 (94),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) personcheck_s1_agent (
		.clk                     (clk_0_clk_clk),                                     //             clk.clk
		.reset                   (nios2_processor_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (personcheck_s1_agent_m0_address),                   //              m0.address
		.m0_burstcount           (personcheck_s1_agent_m0_burstcount),                //                .burstcount
		.m0_byteenable           (personcheck_s1_agent_m0_byteenable),                //                .byteenable
		.m0_debugaccess          (personcheck_s1_agent_m0_debugaccess),               //                .debugaccess
		.m0_lock                 (personcheck_s1_agent_m0_lock),                      //                .lock
		.m0_readdata             (personcheck_s1_agent_m0_readdata),                  //                .readdata
		.m0_readdatavalid        (personcheck_s1_agent_m0_readdatavalid),             //                .readdatavalid
		.m0_read                 (personcheck_s1_agent_m0_read),                      //                .read
		.m0_waitrequest          (personcheck_s1_agent_m0_waitrequest),               //                .waitrequest
		.m0_writedata            (personcheck_s1_agent_m0_writedata),                 //                .writedata
		.m0_write                (personcheck_s1_agent_m0_write),                     //                .write
		.rp_endofpacket          (personcheck_s1_agent_rp_endofpacket),               //              rp.endofpacket
		.rp_ready                (personcheck_s1_agent_rp_ready),                     //                .ready
		.rp_valid                (personcheck_s1_agent_rp_valid),                     //                .valid
		.rp_data                 (personcheck_s1_agent_rp_data),                      //                .data
		.rp_startofpacket        (personcheck_s1_agent_rp_startofpacket),             //                .startofpacket
		.cp_ready                (cmd_mux_010_src_ready),                             //              cp.ready
		.cp_valid                (cmd_mux_010_src_valid),                             //                .valid
		.cp_data                 (cmd_mux_010_src_data),                              //                .data
		.cp_startofpacket        (cmd_mux_010_src_startofpacket),                     //                .startofpacket
		.cp_endofpacket          (cmd_mux_010_src_endofpacket),                       //                .endofpacket
		.cp_channel              (cmd_mux_010_src_channel),                           //                .channel
		.rf_sink_ready           (personcheck_s1_agent_rsp_fifo_out_ready),           //         rf_sink.ready
		.rf_sink_valid           (personcheck_s1_agent_rsp_fifo_out_valid),           //                .valid
		.rf_sink_startofpacket   (personcheck_s1_agent_rsp_fifo_out_startofpacket),   //                .startofpacket
		.rf_sink_endofpacket     (personcheck_s1_agent_rsp_fifo_out_endofpacket),     //                .endofpacket
		.rf_sink_data            (personcheck_s1_agent_rsp_fifo_out_data),            //                .data
		.rf_source_ready         (personcheck_s1_agent_rf_source_ready),              //       rf_source.ready
		.rf_source_valid         (personcheck_s1_agent_rf_source_valid),              //                .valid
		.rf_source_startofpacket (personcheck_s1_agent_rf_source_startofpacket),      //                .startofpacket
		.rf_source_endofpacket   (personcheck_s1_agent_rf_source_endofpacket),        //                .endofpacket
		.rf_source_data          (personcheck_s1_agent_rf_source_data),               //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_010_out_0_ready),                 // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_010_out_0_valid),                 //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_010_out_0_data),                  //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_010_out_0_error),                 //                .error
		.rdata_fifo_src_ready    (personcheck_s1_agent_rdata_fifo_src_ready),         //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (personcheck_s1_agent_rdata_fifo_src_valid),         //                .valid
		.rdata_fifo_src_data     (personcheck_s1_agent_rdata_fifo_src_data),          //                .data
		.m0_response             (2'b00),                                             //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                               //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (95),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) personcheck_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                     //       clk.clk
		.reset             (nios2_processor_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (personcheck_s1_agent_rf_source_data),               //        in.data
		.in_valid          (personcheck_s1_agent_rf_source_valid),              //          .valid
		.in_ready          (personcheck_s1_agent_rf_source_ready),              //          .ready
		.in_startofpacket  (personcheck_s1_agent_rf_source_startofpacket),      //          .startofpacket
		.in_endofpacket    (personcheck_s1_agent_rf_source_endofpacket),        //          .endofpacket
		.out_data          (personcheck_s1_agent_rsp_fifo_out_data),            //       out.data
		.out_valid         (personcheck_s1_agent_rsp_fifo_out_valid),           //          .valid
		.out_ready         (personcheck_s1_agent_rsp_fifo_out_ready),           //          .ready
		.out_startofpacket (personcheck_s1_agent_rsp_fifo_out_startofpacket),   //          .startofpacket
		.out_endofpacket   (personcheck_s1_agent_rsp_fifo_out_endofpacket),     //          .endofpacket
		.csr_address       (2'b00),                                             // (terminated)
		.csr_read          (1'b0),                                              // (terminated)
		.csr_write         (1'b0),                                              // (terminated)
		.csr_readdata      (),                                                  // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),              // (terminated)
		.almost_full_data  (),                                                  // (terminated)
		.almost_empty_data (),                                                  // (terminated)
		.in_empty          (1'b0),                                              // (terminated)
		.out_empty         (),                                                  // (terminated)
		.in_error          (1'b0),                                              // (terminated)
		.out_error         (),                                                  // (terminated)
		.in_channel        (1'b0),                                              // (terminated)
		.out_channel       ()                                                   // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (93),
		.PKT_ORI_BURST_SIZE_L      (91),
		.PKT_RESPONSE_STATUS_H     (90),
		.PKT_RESPONSE_STATUS_L     (89),
		.PKT_BURST_SIZE_H          (64),
		.PKT_BURST_SIZE_L          (62),
		.PKT_TRANS_LOCK            (54),
		.PKT_BEGIN_BURST           (69),
		.PKT_PROTECTION_H          (84),
		.PKT_PROTECTION_L          (82),
		.PKT_BURSTWRAP_H           (61),
		.PKT_BURSTWRAP_L           (59),
		.PKT_BYTE_CNT_H            (58),
		.PKT_BYTE_CNT_L            (56),
		.PKT_ADDR_H                (49),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (50),
		.PKT_TRANS_POSTED          (51),
		.PKT_TRANS_WRITE           (52),
		.PKT_TRANS_READ            (53),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (75),
		.PKT_SRC_ID_L              (71),
		.PKT_DEST_ID_H             (80),
		.PKT_DEST_ID_L             (76),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (18),
		.ST_DATA_W                 (94),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) pressurecheck_s1_agent (
		.clk                     (clk_0_clk_clk),                                     //             clk.clk
		.reset                   (nios2_processor_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (pressurecheck_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (pressurecheck_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (pressurecheck_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (pressurecheck_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (pressurecheck_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (pressurecheck_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (pressurecheck_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (pressurecheck_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (pressurecheck_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (pressurecheck_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (pressurecheck_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (pressurecheck_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (pressurecheck_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (pressurecheck_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (pressurecheck_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (pressurecheck_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_011_src_ready),                             //              cp.ready
		.cp_valid                (cmd_mux_011_src_valid),                             //                .valid
		.cp_data                 (cmd_mux_011_src_data),                              //                .data
		.cp_startofpacket        (cmd_mux_011_src_startofpacket),                     //                .startofpacket
		.cp_endofpacket          (cmd_mux_011_src_endofpacket),                       //                .endofpacket
		.cp_channel              (cmd_mux_011_src_channel),                           //                .channel
		.rf_sink_ready           (pressurecheck_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (pressurecheck_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (pressurecheck_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (pressurecheck_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (pressurecheck_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (pressurecheck_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (pressurecheck_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (pressurecheck_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (pressurecheck_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (pressurecheck_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_011_out_0_ready),                 // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_011_out_0_valid),                 //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_011_out_0_data),                  //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_011_out_0_error),                 //                .error
		.rdata_fifo_src_ready    (pressurecheck_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (pressurecheck_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (pressurecheck_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                             //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                               //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (95),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) pressurecheck_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                     //       clk.clk
		.reset             (nios2_processor_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (pressurecheck_s1_agent_rf_source_data),             //        in.data
		.in_valid          (pressurecheck_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (pressurecheck_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (pressurecheck_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (pressurecheck_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (pressurecheck_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (pressurecheck_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (pressurecheck_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (pressurecheck_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (pressurecheck_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                             // (terminated)
		.csr_read          (1'b0),                                              // (terminated)
		.csr_write         (1'b0),                                              // (terminated)
		.csr_readdata      (),                                                  // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),              // (terminated)
		.almost_full_data  (),                                                  // (terminated)
		.almost_empty_data (),                                                  // (terminated)
		.in_empty          (1'b0),                                              // (terminated)
		.out_empty         (),                                                  // (terminated)
		.in_error          (1'b0),                                              // (terminated)
		.out_error         (),                                                  // (terminated)
		.in_channel        (1'b0),                                              // (terminated)
		.out_channel       ()                                                   // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (93),
		.PKT_ORI_BURST_SIZE_L      (91),
		.PKT_RESPONSE_STATUS_H     (90),
		.PKT_RESPONSE_STATUS_L     (89),
		.PKT_BURST_SIZE_H          (64),
		.PKT_BURST_SIZE_L          (62),
		.PKT_TRANS_LOCK            (54),
		.PKT_BEGIN_BURST           (69),
		.PKT_PROTECTION_H          (84),
		.PKT_PROTECTION_L          (82),
		.PKT_BURSTWRAP_H           (61),
		.PKT_BURSTWRAP_L           (59),
		.PKT_BYTE_CNT_H            (58),
		.PKT_BYTE_CNT_L            (56),
		.PKT_ADDR_H                (49),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (50),
		.PKT_TRANS_POSTED          (51),
		.PKT_TRANS_WRITE           (52),
		.PKT_TRANS_READ            (53),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (75),
		.PKT_SRC_ID_L              (71),
		.PKT_DEST_ID_H             (80),
		.PKT_DEST_ID_L             (76),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (18),
		.ST_DATA_W                 (94),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) innerdoorswitch_s1_agent (
		.clk                     (clk_0_clk_clk),                                       //             clk.clk
		.reset                   (nios2_processor_reset_reset_bridge_in_reset_reset),   //       clk_reset.reset
		.m0_address              (innerdoorswitch_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (innerdoorswitch_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (innerdoorswitch_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (innerdoorswitch_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (innerdoorswitch_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (innerdoorswitch_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (innerdoorswitch_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (innerdoorswitch_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (innerdoorswitch_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (innerdoorswitch_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (innerdoorswitch_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (innerdoorswitch_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (innerdoorswitch_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (innerdoorswitch_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (innerdoorswitch_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (innerdoorswitch_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_012_src_ready),                               //              cp.ready
		.cp_valid                (cmd_mux_012_src_valid),                               //                .valid
		.cp_data                 (cmd_mux_012_src_data),                                //                .data
		.cp_startofpacket        (cmd_mux_012_src_startofpacket),                       //                .startofpacket
		.cp_endofpacket          (cmd_mux_012_src_endofpacket),                         //                .endofpacket
		.cp_channel              (cmd_mux_012_src_channel),                             //                .channel
		.rf_sink_ready           (innerdoorswitch_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (innerdoorswitch_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (innerdoorswitch_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (innerdoorswitch_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (innerdoorswitch_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (innerdoorswitch_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (innerdoorswitch_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (innerdoorswitch_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (innerdoorswitch_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (innerdoorswitch_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_012_out_0_ready),                   // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_012_out_0_valid),                   //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_012_out_0_data),                    //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_012_out_0_error),                   //                .error
		.rdata_fifo_src_ready    (innerdoorswitch_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (innerdoorswitch_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (innerdoorswitch_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                               //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                 //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (95),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) innerdoorswitch_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                       //       clk.clk
		.reset             (nios2_processor_reset_reset_bridge_in_reset_reset),   // clk_reset.reset
		.in_data           (innerdoorswitch_s1_agent_rf_source_data),             //        in.data
		.in_valid          (innerdoorswitch_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (innerdoorswitch_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (innerdoorswitch_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (innerdoorswitch_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (innerdoorswitch_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (innerdoorswitch_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (innerdoorswitch_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (innerdoorswitch_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (innerdoorswitch_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (93),
		.PKT_ORI_BURST_SIZE_L      (91),
		.PKT_RESPONSE_STATUS_H     (90),
		.PKT_RESPONSE_STATUS_L     (89),
		.PKT_BURST_SIZE_H          (64),
		.PKT_BURST_SIZE_L          (62),
		.PKT_TRANS_LOCK            (54),
		.PKT_BEGIN_BURST           (69),
		.PKT_PROTECTION_H          (84),
		.PKT_PROTECTION_L          (82),
		.PKT_BURSTWRAP_H           (61),
		.PKT_BURSTWRAP_L           (59),
		.PKT_BYTE_CNT_H            (58),
		.PKT_BYTE_CNT_L            (56),
		.PKT_ADDR_H                (49),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (50),
		.PKT_TRANS_POSTED          (51),
		.PKT_TRANS_WRITE           (52),
		.PKT_TRANS_READ            (53),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (75),
		.PKT_SRC_ID_L              (71),
		.PKT_DEST_ID_H             (80),
		.PKT_DEST_ID_L             (76),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (18),
		.ST_DATA_W                 (94),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) outerdoorswitch_s1_agent (
		.clk                     (clk_0_clk_clk),                                       //             clk.clk
		.reset                   (nios2_processor_reset_reset_bridge_in_reset_reset),   //       clk_reset.reset
		.m0_address              (outerdoorswitch_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (outerdoorswitch_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (outerdoorswitch_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (outerdoorswitch_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (outerdoorswitch_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (outerdoorswitch_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (outerdoorswitch_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (outerdoorswitch_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (outerdoorswitch_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (outerdoorswitch_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (outerdoorswitch_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (outerdoorswitch_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (outerdoorswitch_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (outerdoorswitch_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (outerdoorswitch_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (outerdoorswitch_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_013_src_ready),                               //              cp.ready
		.cp_valid                (cmd_mux_013_src_valid),                               //                .valid
		.cp_data                 (cmd_mux_013_src_data),                                //                .data
		.cp_startofpacket        (cmd_mux_013_src_startofpacket),                       //                .startofpacket
		.cp_endofpacket          (cmd_mux_013_src_endofpacket),                         //                .endofpacket
		.cp_channel              (cmd_mux_013_src_channel),                             //                .channel
		.rf_sink_ready           (outerdoorswitch_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (outerdoorswitch_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (outerdoorswitch_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (outerdoorswitch_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (outerdoorswitch_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (outerdoorswitch_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (outerdoorswitch_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (outerdoorswitch_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (outerdoorswitch_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (outerdoorswitch_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_013_out_0_ready),                   // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_013_out_0_valid),                   //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_013_out_0_data),                    //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_013_out_0_error),                   //                .error
		.rdata_fifo_src_ready    (outerdoorswitch_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (outerdoorswitch_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (outerdoorswitch_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                               //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                 //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (95),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) outerdoorswitch_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                       //       clk.clk
		.reset             (nios2_processor_reset_reset_bridge_in_reset_reset),   // clk_reset.reset
		.in_data           (outerdoorswitch_s1_agent_rf_source_data),             //        in.data
		.in_valid          (outerdoorswitch_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (outerdoorswitch_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (outerdoorswitch_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (outerdoorswitch_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (outerdoorswitch_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (outerdoorswitch_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (outerdoorswitch_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (outerdoorswitch_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (outerdoorswitch_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (93),
		.PKT_ORI_BURST_SIZE_L      (91),
		.PKT_RESPONSE_STATUS_H     (90),
		.PKT_RESPONSE_STATUS_L     (89),
		.PKT_BURST_SIZE_H          (64),
		.PKT_BURST_SIZE_L          (62),
		.PKT_TRANS_LOCK            (54),
		.PKT_BEGIN_BURST           (69),
		.PKT_PROTECTION_H          (84),
		.PKT_PROTECTION_L          (82),
		.PKT_BURSTWRAP_H           (61),
		.PKT_BURSTWRAP_L           (59),
		.PKT_BYTE_CNT_H            (58),
		.PKT_BYTE_CNT_L            (56),
		.PKT_ADDR_H                (49),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (50),
		.PKT_TRANS_POSTED          (51),
		.PKT_TRANS_WRITE           (52),
		.PKT_TRANS_READ            (53),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (75),
		.PKT_SRC_ID_L              (71),
		.PKT_DEST_ID_H             (80),
		.PKT_DEST_ID_L             (76),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (18),
		.ST_DATA_W                 (94),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) drainfinished_s1_agent (
		.clk                     (clk_0_clk_clk),                                     //             clk.clk
		.reset                   (nios2_processor_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (drainfinished_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (drainfinished_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (drainfinished_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (drainfinished_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (drainfinished_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (drainfinished_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (drainfinished_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (drainfinished_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (drainfinished_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (drainfinished_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (drainfinished_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (drainfinished_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (drainfinished_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (drainfinished_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (drainfinished_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (drainfinished_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_014_src_ready),                             //              cp.ready
		.cp_valid                (cmd_mux_014_src_valid),                             //                .valid
		.cp_data                 (cmd_mux_014_src_data),                              //                .data
		.cp_startofpacket        (cmd_mux_014_src_startofpacket),                     //                .startofpacket
		.cp_endofpacket          (cmd_mux_014_src_endofpacket),                       //                .endofpacket
		.cp_channel              (cmd_mux_014_src_channel),                           //                .channel
		.rf_sink_ready           (drainfinished_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (drainfinished_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (drainfinished_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (drainfinished_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (drainfinished_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (drainfinished_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (drainfinished_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (drainfinished_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (drainfinished_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (drainfinished_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_014_out_0_ready),                 // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_014_out_0_valid),                 //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_014_out_0_data),                  //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_014_out_0_error),                 //                .error
		.rdata_fifo_src_ready    (drainfinished_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (drainfinished_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (drainfinished_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                             //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                               //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (95),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) drainfinished_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                     //       clk.clk
		.reset             (nios2_processor_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (drainfinished_s1_agent_rf_source_data),             //        in.data
		.in_valid          (drainfinished_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (drainfinished_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (drainfinished_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (drainfinished_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (drainfinished_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (drainfinished_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (drainfinished_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (drainfinished_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (drainfinished_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                             // (terminated)
		.csr_read          (1'b0),                                              // (terminated)
		.csr_write         (1'b0),                                              // (terminated)
		.csr_readdata      (),                                                  // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),              // (terminated)
		.almost_full_data  (),                                                  // (terminated)
		.almost_empty_data (),                                                  // (terminated)
		.in_empty          (1'b0),                                              // (terminated)
		.out_empty         (),                                                  // (terminated)
		.in_error          (1'b0),                                              // (terminated)
		.out_error         (),                                                  // (terminated)
		.in_channel        (1'b0),                                              // (terminated)
		.out_channel       ()                                                   // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (93),
		.PKT_ORI_BURST_SIZE_L      (91),
		.PKT_RESPONSE_STATUS_H     (90),
		.PKT_RESPONSE_STATUS_L     (89),
		.PKT_BURST_SIZE_H          (64),
		.PKT_BURST_SIZE_L          (62),
		.PKT_TRANS_LOCK            (54),
		.PKT_BEGIN_BURST           (69),
		.PKT_PROTECTION_H          (84),
		.PKT_PROTECTION_L          (82),
		.PKT_BURSTWRAP_H           (61),
		.PKT_BURSTWRAP_L           (59),
		.PKT_BYTE_CNT_H            (58),
		.PKT_BYTE_CNT_L            (56),
		.PKT_ADDR_H                (49),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (50),
		.PKT_TRANS_POSTED          (51),
		.PKT_TRANS_WRITE           (52),
		.PKT_TRANS_READ            (53),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (75),
		.PKT_SRC_ID_L              (71),
		.PKT_DEST_ID_H             (80),
		.PKT_DEST_ID_L             (76),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (18),
		.ST_DATA_W                 (94),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) fillfinished_s1_agent (
		.clk                     (clk_0_clk_clk),                                     //             clk.clk
		.reset                   (nios2_processor_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (fillfinished_s1_agent_m0_address),                  //              m0.address
		.m0_burstcount           (fillfinished_s1_agent_m0_burstcount),               //                .burstcount
		.m0_byteenable           (fillfinished_s1_agent_m0_byteenable),               //                .byteenable
		.m0_debugaccess          (fillfinished_s1_agent_m0_debugaccess),              //                .debugaccess
		.m0_lock                 (fillfinished_s1_agent_m0_lock),                     //                .lock
		.m0_readdata             (fillfinished_s1_agent_m0_readdata),                 //                .readdata
		.m0_readdatavalid        (fillfinished_s1_agent_m0_readdatavalid),            //                .readdatavalid
		.m0_read                 (fillfinished_s1_agent_m0_read),                     //                .read
		.m0_waitrequest          (fillfinished_s1_agent_m0_waitrequest),              //                .waitrequest
		.m0_writedata            (fillfinished_s1_agent_m0_writedata),                //                .writedata
		.m0_write                (fillfinished_s1_agent_m0_write),                    //                .write
		.rp_endofpacket          (fillfinished_s1_agent_rp_endofpacket),              //              rp.endofpacket
		.rp_ready                (fillfinished_s1_agent_rp_ready),                    //                .ready
		.rp_valid                (fillfinished_s1_agent_rp_valid),                    //                .valid
		.rp_data                 (fillfinished_s1_agent_rp_data),                     //                .data
		.rp_startofpacket        (fillfinished_s1_agent_rp_startofpacket),            //                .startofpacket
		.cp_ready                (cmd_mux_015_src_ready),                             //              cp.ready
		.cp_valid                (cmd_mux_015_src_valid),                             //                .valid
		.cp_data                 (cmd_mux_015_src_data),                              //                .data
		.cp_startofpacket        (cmd_mux_015_src_startofpacket),                     //                .startofpacket
		.cp_endofpacket          (cmd_mux_015_src_endofpacket),                       //                .endofpacket
		.cp_channel              (cmd_mux_015_src_channel),                           //                .channel
		.rf_sink_ready           (fillfinished_s1_agent_rsp_fifo_out_ready),          //         rf_sink.ready
		.rf_sink_valid           (fillfinished_s1_agent_rsp_fifo_out_valid),          //                .valid
		.rf_sink_startofpacket   (fillfinished_s1_agent_rsp_fifo_out_startofpacket),  //                .startofpacket
		.rf_sink_endofpacket     (fillfinished_s1_agent_rsp_fifo_out_endofpacket),    //                .endofpacket
		.rf_sink_data            (fillfinished_s1_agent_rsp_fifo_out_data),           //                .data
		.rf_source_ready         (fillfinished_s1_agent_rf_source_ready),             //       rf_source.ready
		.rf_source_valid         (fillfinished_s1_agent_rf_source_valid),             //                .valid
		.rf_source_startofpacket (fillfinished_s1_agent_rf_source_startofpacket),     //                .startofpacket
		.rf_source_endofpacket   (fillfinished_s1_agent_rf_source_endofpacket),       //                .endofpacket
		.rf_source_data          (fillfinished_s1_agent_rf_source_data),              //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_015_out_0_ready),                 // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_015_out_0_valid),                 //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_015_out_0_data),                  //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_015_out_0_error),                 //                .error
		.rdata_fifo_src_ready    (fillfinished_s1_agent_rdata_fifo_src_ready),        //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (fillfinished_s1_agent_rdata_fifo_src_valid),        //                .valid
		.rdata_fifo_src_data     (fillfinished_s1_agent_rdata_fifo_src_data),         //                .data
		.m0_response             (2'b00),                                             //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                               //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (95),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) fillfinished_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                     //       clk.clk
		.reset             (nios2_processor_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (fillfinished_s1_agent_rf_source_data),              //        in.data
		.in_valid          (fillfinished_s1_agent_rf_source_valid),             //          .valid
		.in_ready          (fillfinished_s1_agent_rf_source_ready),             //          .ready
		.in_startofpacket  (fillfinished_s1_agent_rf_source_startofpacket),     //          .startofpacket
		.in_endofpacket    (fillfinished_s1_agent_rf_source_endofpacket),       //          .endofpacket
		.out_data          (fillfinished_s1_agent_rsp_fifo_out_data),           //       out.data
		.out_valid         (fillfinished_s1_agent_rsp_fifo_out_valid),          //          .valid
		.out_ready         (fillfinished_s1_agent_rsp_fifo_out_ready),          //          .ready
		.out_startofpacket (fillfinished_s1_agent_rsp_fifo_out_startofpacket),  //          .startofpacket
		.out_endofpacket   (fillfinished_s1_agent_rsp_fifo_out_endofpacket),    //          .endofpacket
		.csr_address       (2'b00),                                             // (terminated)
		.csr_read          (1'b0),                                              // (terminated)
		.csr_write         (1'b0),                                              // (terminated)
		.csr_readdata      (),                                                  // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),              // (terminated)
		.almost_full_data  (),                                                  // (terminated)
		.almost_empty_data (),                                                  // (terminated)
		.in_empty          (1'b0),                                              // (terminated)
		.out_empty         (),                                                  // (terminated)
		.in_error          (1'b0),                                              // (terminated)
		.out_error         (),                                                  // (terminated)
		.in_channel        (1'b0),                                              // (terminated)
		.out_channel       ()                                                   // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (93),
		.PKT_ORI_BURST_SIZE_L      (91),
		.PKT_RESPONSE_STATUS_H     (90),
		.PKT_RESPONSE_STATUS_L     (89),
		.PKT_BURST_SIZE_H          (64),
		.PKT_BURST_SIZE_L          (62),
		.PKT_TRANS_LOCK            (54),
		.PKT_BEGIN_BURST           (69),
		.PKT_PROTECTION_H          (84),
		.PKT_PROTECTION_L          (82),
		.PKT_BURSTWRAP_H           (61),
		.PKT_BURSTWRAP_L           (59),
		.PKT_BYTE_CNT_H            (58),
		.PKT_BYTE_CNT_L            (56),
		.PKT_ADDR_H                (49),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (50),
		.PKT_TRANS_POSTED          (51),
		.PKT_TRANS_WRITE           (52),
		.PKT_TRANS_READ            (53),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (75),
		.PKT_SRC_ID_L              (71),
		.PKT_DEST_ID_H             (80),
		.PKT_DEST_ID_L             (76),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (18),
		.ST_DATA_W                 (94),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) waitfinished_s1_agent (
		.clk                     (clk_0_clk_clk),                                     //             clk.clk
		.reset                   (nios2_processor_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (waitfinished_s1_agent_m0_address),                  //              m0.address
		.m0_burstcount           (waitfinished_s1_agent_m0_burstcount),               //                .burstcount
		.m0_byteenable           (waitfinished_s1_agent_m0_byteenable),               //                .byteenable
		.m0_debugaccess          (waitfinished_s1_agent_m0_debugaccess),              //                .debugaccess
		.m0_lock                 (waitfinished_s1_agent_m0_lock),                     //                .lock
		.m0_readdata             (waitfinished_s1_agent_m0_readdata),                 //                .readdata
		.m0_readdatavalid        (waitfinished_s1_agent_m0_readdatavalid),            //                .readdatavalid
		.m0_read                 (waitfinished_s1_agent_m0_read),                     //                .read
		.m0_waitrequest          (waitfinished_s1_agent_m0_waitrequest),              //                .waitrequest
		.m0_writedata            (waitfinished_s1_agent_m0_writedata),                //                .writedata
		.m0_write                (waitfinished_s1_agent_m0_write),                    //                .write
		.rp_endofpacket          (waitfinished_s1_agent_rp_endofpacket),              //              rp.endofpacket
		.rp_ready                (waitfinished_s1_agent_rp_ready),                    //                .ready
		.rp_valid                (waitfinished_s1_agent_rp_valid),                    //                .valid
		.rp_data                 (waitfinished_s1_agent_rp_data),                     //                .data
		.rp_startofpacket        (waitfinished_s1_agent_rp_startofpacket),            //                .startofpacket
		.cp_ready                (cmd_mux_016_src_ready),                             //              cp.ready
		.cp_valid                (cmd_mux_016_src_valid),                             //                .valid
		.cp_data                 (cmd_mux_016_src_data),                              //                .data
		.cp_startofpacket        (cmd_mux_016_src_startofpacket),                     //                .startofpacket
		.cp_endofpacket          (cmd_mux_016_src_endofpacket),                       //                .endofpacket
		.cp_channel              (cmd_mux_016_src_channel),                           //                .channel
		.rf_sink_ready           (waitfinished_s1_agent_rsp_fifo_out_ready),          //         rf_sink.ready
		.rf_sink_valid           (waitfinished_s1_agent_rsp_fifo_out_valid),          //                .valid
		.rf_sink_startofpacket   (waitfinished_s1_agent_rsp_fifo_out_startofpacket),  //                .startofpacket
		.rf_sink_endofpacket     (waitfinished_s1_agent_rsp_fifo_out_endofpacket),    //                .endofpacket
		.rf_sink_data            (waitfinished_s1_agent_rsp_fifo_out_data),           //                .data
		.rf_source_ready         (waitfinished_s1_agent_rf_source_ready),             //       rf_source.ready
		.rf_source_valid         (waitfinished_s1_agent_rf_source_valid),             //                .valid
		.rf_source_startofpacket (waitfinished_s1_agent_rf_source_startofpacket),     //                .startofpacket
		.rf_source_endofpacket   (waitfinished_s1_agent_rf_source_endofpacket),       //                .endofpacket
		.rf_source_data          (waitfinished_s1_agent_rf_source_data),              //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_016_out_0_ready),                 // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_016_out_0_valid),                 //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_016_out_0_data),                  //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_016_out_0_error),                 //                .error
		.rdata_fifo_src_ready    (waitfinished_s1_agent_rdata_fifo_src_ready),        //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (waitfinished_s1_agent_rdata_fifo_src_valid),        //                .valid
		.rdata_fifo_src_data     (waitfinished_s1_agent_rdata_fifo_src_data),         //                .data
		.m0_response             (2'b00),                                             //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                               //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (95),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) waitfinished_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                     //       clk.clk
		.reset             (nios2_processor_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (waitfinished_s1_agent_rf_source_data),              //        in.data
		.in_valid          (waitfinished_s1_agent_rf_source_valid),             //          .valid
		.in_ready          (waitfinished_s1_agent_rf_source_ready),             //          .ready
		.in_startofpacket  (waitfinished_s1_agent_rf_source_startofpacket),     //          .startofpacket
		.in_endofpacket    (waitfinished_s1_agent_rf_source_endofpacket),       //          .endofpacket
		.out_data          (waitfinished_s1_agent_rsp_fifo_out_data),           //       out.data
		.out_valid         (waitfinished_s1_agent_rsp_fifo_out_valid),          //          .valid
		.out_ready         (waitfinished_s1_agent_rsp_fifo_out_ready),          //          .ready
		.out_startofpacket (waitfinished_s1_agent_rsp_fifo_out_startofpacket),  //          .startofpacket
		.out_endofpacket   (waitfinished_s1_agent_rsp_fifo_out_endofpacket),    //          .endofpacket
		.csr_address       (2'b00),                                             // (terminated)
		.csr_read          (1'b0),                                              // (terminated)
		.csr_write         (1'b0),                                              // (terminated)
		.csr_readdata      (),                                                  // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),              // (terminated)
		.almost_full_data  (),                                                  // (terminated)
		.almost_empty_data (),                                                  // (terminated)
		.in_empty          (1'b0),                                              // (terminated)
		.out_empty         (),                                                  // (terminated)
		.in_error          (1'b0),                                              // (terminated)
		.out_error         (),                                                  // (terminated)
		.in_channel        (1'b0),                                              // (terminated)
		.out_channel       ()                                                   // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (93),
		.PKT_ORI_BURST_SIZE_L      (91),
		.PKT_RESPONSE_STATUS_H     (90),
		.PKT_RESPONSE_STATUS_L     (89),
		.PKT_BURST_SIZE_H          (64),
		.PKT_BURST_SIZE_L          (62),
		.PKT_TRANS_LOCK            (54),
		.PKT_BEGIN_BURST           (69),
		.PKT_PROTECTION_H          (84),
		.PKT_PROTECTION_L          (82),
		.PKT_BURSTWRAP_H           (61),
		.PKT_BURSTWRAP_L           (59),
		.PKT_BYTE_CNT_H            (58),
		.PKT_BYTE_CNT_L            (56),
		.PKT_ADDR_H                (49),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (50),
		.PKT_TRANS_POSTED          (51),
		.PKT_TRANS_WRITE           (52),
		.PKT_TRANS_READ            (53),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (75),
		.PKT_SRC_ID_L              (71),
		.PKT_DEST_ID_H             (80),
		.PKT_DEST_ID_L             (76),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (18),
		.ST_DATA_W                 (94),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) waiting_s1_agent (
		.clk                     (clk_0_clk_clk),                                     //             clk.clk
		.reset                   (nios2_processor_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (waiting_s1_agent_m0_address),                       //              m0.address
		.m0_burstcount           (waiting_s1_agent_m0_burstcount),                    //                .burstcount
		.m0_byteenable           (waiting_s1_agent_m0_byteenable),                    //                .byteenable
		.m0_debugaccess          (waiting_s1_agent_m0_debugaccess),                   //                .debugaccess
		.m0_lock                 (waiting_s1_agent_m0_lock),                          //                .lock
		.m0_readdata             (waiting_s1_agent_m0_readdata),                      //                .readdata
		.m0_readdatavalid        (waiting_s1_agent_m0_readdatavalid),                 //                .readdatavalid
		.m0_read                 (waiting_s1_agent_m0_read),                          //                .read
		.m0_waitrequest          (waiting_s1_agent_m0_waitrequest),                   //                .waitrequest
		.m0_writedata            (waiting_s1_agent_m0_writedata),                     //                .writedata
		.m0_write                (waiting_s1_agent_m0_write),                         //                .write
		.rp_endofpacket          (waiting_s1_agent_rp_endofpacket),                   //              rp.endofpacket
		.rp_ready                (waiting_s1_agent_rp_ready),                         //                .ready
		.rp_valid                (waiting_s1_agent_rp_valid),                         //                .valid
		.rp_data                 (waiting_s1_agent_rp_data),                          //                .data
		.rp_startofpacket        (waiting_s1_agent_rp_startofpacket),                 //                .startofpacket
		.cp_ready                (cmd_mux_017_src_ready),                             //              cp.ready
		.cp_valid                (cmd_mux_017_src_valid),                             //                .valid
		.cp_data                 (cmd_mux_017_src_data),                              //                .data
		.cp_startofpacket        (cmd_mux_017_src_startofpacket),                     //                .startofpacket
		.cp_endofpacket          (cmd_mux_017_src_endofpacket),                       //                .endofpacket
		.cp_channel              (cmd_mux_017_src_channel),                           //                .channel
		.rf_sink_ready           (waiting_s1_agent_rsp_fifo_out_ready),               //         rf_sink.ready
		.rf_sink_valid           (waiting_s1_agent_rsp_fifo_out_valid),               //                .valid
		.rf_sink_startofpacket   (waiting_s1_agent_rsp_fifo_out_startofpacket),       //                .startofpacket
		.rf_sink_endofpacket     (waiting_s1_agent_rsp_fifo_out_endofpacket),         //                .endofpacket
		.rf_sink_data            (waiting_s1_agent_rsp_fifo_out_data),                //                .data
		.rf_source_ready         (waiting_s1_agent_rf_source_ready),                  //       rf_source.ready
		.rf_source_valid         (waiting_s1_agent_rf_source_valid),                  //                .valid
		.rf_source_startofpacket (waiting_s1_agent_rf_source_startofpacket),          //                .startofpacket
		.rf_source_endofpacket   (waiting_s1_agent_rf_source_endofpacket),            //                .endofpacket
		.rf_source_data          (waiting_s1_agent_rf_source_data),                   //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_017_out_0_ready),                 // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_017_out_0_valid),                 //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_017_out_0_data),                  //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_017_out_0_error),                 //                .error
		.rdata_fifo_src_ready    (waiting_s1_agent_rdata_fifo_src_ready),             //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (waiting_s1_agent_rdata_fifo_src_valid),             //                .valid
		.rdata_fifo_src_data     (waiting_s1_agent_rdata_fifo_src_data),              //                .data
		.m0_response             (2'b00),                                             //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                               //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (95),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) waiting_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                     //       clk.clk
		.reset             (nios2_processor_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (waiting_s1_agent_rf_source_data),                   //        in.data
		.in_valid          (waiting_s1_agent_rf_source_valid),                  //          .valid
		.in_ready          (waiting_s1_agent_rf_source_ready),                  //          .ready
		.in_startofpacket  (waiting_s1_agent_rf_source_startofpacket),          //          .startofpacket
		.in_endofpacket    (waiting_s1_agent_rf_source_endofpacket),            //          .endofpacket
		.out_data          (waiting_s1_agent_rsp_fifo_out_data),                //       out.data
		.out_valid         (waiting_s1_agent_rsp_fifo_out_valid),               //          .valid
		.out_ready         (waiting_s1_agent_rsp_fifo_out_ready),               //          .ready
		.out_startofpacket (waiting_s1_agent_rsp_fifo_out_startofpacket),       //          .startofpacket
		.out_endofpacket   (waiting_s1_agent_rsp_fifo_out_endofpacket),         //          .endofpacket
		.csr_address       (2'b00),                                             // (terminated)
		.csr_read          (1'b0),                                              // (terminated)
		.csr_write         (1'b0),                                              // (terminated)
		.csr_readdata      (),                                                  // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),              // (terminated)
		.almost_full_data  (),                                                  // (terminated)
		.almost_empty_data (),                                                  // (terminated)
		.in_empty          (1'b0),                                              // (terminated)
		.out_empty         (),                                                  // (terminated)
		.in_error          (1'b0),                                              // (terminated)
		.out_error         (),                                                  // (terminated)
		.in_channel        (1'b0),                                              // (terminated)
		.out_channel       ()                                                   // (terminated)
	);

	microprocessor_mm_interconnect_0_router router (
		.sink_ready         (nios2_processor_data_master_agent_cp_ready),         //      sink.ready
		.sink_valid         (nios2_processor_data_master_agent_cp_valid),         //          .valid
		.sink_data          (nios2_processor_data_master_agent_cp_data),          //          .data
		.sink_startofpacket (nios2_processor_data_master_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (nios2_processor_data_master_agent_cp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                      //       clk.clk
		.reset              (nios2_processor_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.src_ready          (router_src_ready),                                   //       src.ready
		.src_valid          (router_src_valid),                                   //          .valid
		.src_data           (router_src_data),                                    //          .data
		.src_channel        (router_src_channel),                                 //          .channel
		.src_startofpacket  (router_src_startofpacket),                           //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                              //          .endofpacket
	);

	microprocessor_mm_interconnect_0_router_001 router_001 (
		.sink_ready         (nios2_processor_instruction_master_agent_cp_ready),         //      sink.ready
		.sink_valid         (nios2_processor_instruction_master_agent_cp_valid),         //          .valid
		.sink_data          (nios2_processor_instruction_master_agent_cp_data),          //          .data
		.sink_startofpacket (nios2_processor_instruction_master_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (nios2_processor_instruction_master_agent_cp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                             //       clk.clk
		.reset              (nios2_processor_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.src_ready          (router_001_src_ready),                                      //       src.ready
		.src_valid          (router_001_src_valid),                                      //          .valid
		.src_data           (router_001_src_data),                                       //          .data
		.src_channel        (router_001_src_channel),                                    //          .channel
		.src_startofpacket  (router_001_src_startofpacket),                              //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                                 //          .endofpacket
	);

	microprocessor_mm_interconnect_0_router_002 router_002 (
		.sink_ready         (jtag_uart_avalon_jtag_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (jtag_uart_avalon_jtag_slave_agent_rp_valid),         //          .valid
		.sink_data          (jtag_uart_avalon_jtag_slave_agent_rp_data),          //          .data
		.sink_startofpacket (jtag_uart_avalon_jtag_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (jtag_uart_avalon_jtag_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                      //       clk.clk
		.reset              (nios2_processor_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.src_ready          (router_002_src_ready),                               //       src.ready
		.src_valid          (router_002_src_valid),                               //          .valid
		.src_data           (router_002_src_data),                                //          .data
		.src_channel        (router_002_src_channel),                             //          .channel
		.src_startofpacket  (router_002_src_startofpacket),                       //          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                          //          .endofpacket
	);

	microprocessor_mm_interconnect_0_router_003 router_003 (
		.sink_ready         (nios2_processor_debug_mem_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (nios2_processor_debug_mem_slave_agent_rp_valid),         //          .valid
		.sink_data          (nios2_processor_debug_mem_slave_agent_rp_data),          //          .data
		.sink_startofpacket (nios2_processor_debug_mem_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (nios2_processor_debug_mem_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                          //       clk.clk
		.reset              (nios2_processor_reset_reset_bridge_in_reset_reset),      // clk_reset.reset
		.src_ready          (router_003_src_ready),                                   //       src.ready
		.src_valid          (router_003_src_valid),                                   //          .valid
		.src_data           (router_003_src_data),                                    //          .data
		.src_channel        (router_003_src_channel),                                 //          .channel
		.src_startofpacket  (router_003_src_startofpacket),                           //          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)                              //          .endofpacket
	);

	microprocessor_mm_interconnect_0_router_003 router_004 (
		.sink_ready         (onchip_memory_s1_agent_rp_ready),                   //      sink.ready
		.sink_valid         (onchip_memory_s1_agent_rp_valid),                   //          .valid
		.sink_data          (onchip_memory_s1_agent_rp_data),                    //          .data
		.sink_startofpacket (onchip_memory_s1_agent_rp_startofpacket),           //          .startofpacket
		.sink_endofpacket   (onchip_memory_s1_agent_rp_endofpacket),             //          .endofpacket
		.clk                (clk_0_clk_clk),                                     //       clk.clk
		.reset              (nios2_processor_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_004_src_ready),                              //       src.ready
		.src_valid          (router_004_src_valid),                              //          .valid
		.src_data           (router_004_src_data),                               //          .data
		.src_channel        (router_004_src_channel),                            //          .channel
		.src_startofpacket  (router_004_src_startofpacket),                      //          .startofpacket
		.src_endofpacket    (router_004_src_endofpacket)                         //          .endofpacket
	);

	microprocessor_mm_interconnect_0_router_002 router_005 (
		.sink_ready         (filling_s1_agent_rp_ready),                         //      sink.ready
		.sink_valid         (filling_s1_agent_rp_valid),                         //          .valid
		.sink_data          (filling_s1_agent_rp_data),                          //          .data
		.sink_startofpacket (filling_s1_agent_rp_startofpacket),                 //          .startofpacket
		.sink_endofpacket   (filling_s1_agent_rp_endofpacket),                   //          .endofpacket
		.clk                (clk_0_clk_clk),                                     //       clk.clk
		.reset              (nios2_processor_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_005_src_ready),                              //       src.ready
		.src_valid          (router_005_src_valid),                              //          .valid
		.src_data           (router_005_src_data),                               //          .data
		.src_channel        (router_005_src_channel),                            //          .channel
		.src_startofpacket  (router_005_src_startofpacket),                      //          .startofpacket
		.src_endofpacket    (router_005_src_endofpacket)                         //          .endofpacket
	);

	microprocessor_mm_interconnect_0_router_002 router_006 (
		.sink_ready         (draining_s1_agent_rp_ready),                        //      sink.ready
		.sink_valid         (draining_s1_agent_rp_valid),                        //          .valid
		.sink_data          (draining_s1_agent_rp_data),                         //          .data
		.sink_startofpacket (draining_s1_agent_rp_startofpacket),                //          .startofpacket
		.sink_endofpacket   (draining_s1_agent_rp_endofpacket),                  //          .endofpacket
		.clk                (clk_0_clk_clk),                                     //       clk.clk
		.reset              (nios2_processor_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_006_src_ready),                              //       src.ready
		.src_valid          (router_006_src_valid),                              //          .valid
		.src_data           (router_006_src_data),                               //          .data
		.src_channel        (router_006_src_channel),                            //          .channel
		.src_startofpacket  (router_006_src_startofpacket),                      //          .startofpacket
		.src_endofpacket    (router_006_src_endofpacket)                         //          .endofpacket
	);

	microprocessor_mm_interconnect_0_router_002 router_007 (
		.sink_ready         (innerdoor_s1_agent_rp_ready),                       //      sink.ready
		.sink_valid         (innerdoor_s1_agent_rp_valid),                       //          .valid
		.sink_data          (innerdoor_s1_agent_rp_data),                        //          .data
		.sink_startofpacket (innerdoor_s1_agent_rp_startofpacket),               //          .startofpacket
		.sink_endofpacket   (innerdoor_s1_agent_rp_endofpacket),                 //          .endofpacket
		.clk                (clk_0_clk_clk),                                     //       clk.clk
		.reset              (nios2_processor_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_007_src_ready),                              //       src.ready
		.src_valid          (router_007_src_valid),                              //          .valid
		.src_data           (router_007_src_data),                               //          .data
		.src_channel        (router_007_src_channel),                            //          .channel
		.src_startofpacket  (router_007_src_startofpacket),                      //          .startofpacket
		.src_endofpacket    (router_007_src_endofpacket)                         //          .endofpacket
	);

	microprocessor_mm_interconnect_0_router_002 router_008 (
		.sink_ready         (outerdoor_s1_agent_rp_ready),                       //      sink.ready
		.sink_valid         (outerdoor_s1_agent_rp_valid),                       //          .valid
		.sink_data          (outerdoor_s1_agent_rp_data),                        //          .data
		.sink_startofpacket (outerdoor_s1_agent_rp_startofpacket),               //          .startofpacket
		.sink_endofpacket   (outerdoor_s1_agent_rp_endofpacket),                 //          .endofpacket
		.clk                (clk_0_clk_clk),                                     //       clk.clk
		.reset              (nios2_processor_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_008_src_ready),                              //       src.ready
		.src_valid          (router_008_src_valid),                              //          .valid
		.src_data           (router_008_src_data),                               //          .data
		.src_channel        (router_008_src_channel),                            //          .channel
		.src_startofpacket  (router_008_src_startofpacket),                      //          .startofpacket
		.src_endofpacket    (router_008_src_endofpacket)                         //          .endofpacket
	);

	microprocessor_mm_interconnect_0_router_002 router_009 (
		.sink_ready         (resetleds_s1_agent_rp_ready),                       //      sink.ready
		.sink_valid         (resetleds_s1_agent_rp_valid),                       //          .valid
		.sink_data          (resetleds_s1_agent_rp_data),                        //          .data
		.sink_startofpacket (resetleds_s1_agent_rp_startofpacket),               //          .startofpacket
		.sink_endofpacket   (resetleds_s1_agent_rp_endofpacket),                 //          .endofpacket
		.clk                (clk_0_clk_clk),                                     //       clk.clk
		.reset              (nios2_processor_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_009_src_ready),                              //       src.ready
		.src_valid          (router_009_src_valid),                              //          .valid
		.src_data           (router_009_src_data),                               //          .data
		.src_channel        (router_009_src_channel),                            //          .channel
		.src_startofpacket  (router_009_src_startofpacket),                      //          .startofpacket
		.src_endofpacket    (router_009_src_endofpacket)                         //          .endofpacket
	);

	microprocessor_mm_interconnect_0_router_002 router_010 (
		.sink_ready         (bathleaving_s1_agent_rp_ready),                     //      sink.ready
		.sink_valid         (bathleaving_s1_agent_rp_valid),                     //          .valid
		.sink_data          (bathleaving_s1_agent_rp_data),                      //          .data
		.sink_startofpacket (bathleaving_s1_agent_rp_startofpacket),             //          .startofpacket
		.sink_endofpacket   (bathleaving_s1_agent_rp_endofpacket),               //          .endofpacket
		.clk                (clk_0_clk_clk),                                     //       clk.clk
		.reset              (nios2_processor_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_010_src_ready),                              //       src.ready
		.src_valid          (router_010_src_valid),                              //          .valid
		.src_data           (router_010_src_data),                               //          .data
		.src_channel        (router_010_src_channel),                            //          .channel
		.src_startofpacket  (router_010_src_startofpacket),                      //          .startofpacket
		.src_endofpacket    (router_010_src_endofpacket)                         //          .endofpacket
	);

	microprocessor_mm_interconnect_0_router_002 router_011 (
		.sink_ready         (batharriving_s1_agent_rp_ready),                    //      sink.ready
		.sink_valid         (batharriving_s1_agent_rp_valid),                    //          .valid
		.sink_data          (batharriving_s1_agent_rp_data),                     //          .data
		.sink_startofpacket (batharriving_s1_agent_rp_startofpacket),            //          .startofpacket
		.sink_endofpacket   (batharriving_s1_agent_rp_endofpacket),              //          .endofpacket
		.clk                (clk_0_clk_clk),                                     //       clk.clk
		.reset              (nios2_processor_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_011_src_ready),                              //       src.ready
		.src_valid          (router_011_src_valid),                              //          .valid
		.src_data           (router_011_src_data),                               //          .data
		.src_channel        (router_011_src_channel),                            //          .channel
		.src_startofpacket  (router_011_src_startofpacket),                      //          .startofpacket
		.src_endofpacket    (router_011_src_endofpacket)                         //          .endofpacket
	);

	microprocessor_mm_interconnect_0_router_002 router_012 (
		.sink_ready         (personcheck_s1_agent_rp_ready),                     //      sink.ready
		.sink_valid         (personcheck_s1_agent_rp_valid),                     //          .valid
		.sink_data          (personcheck_s1_agent_rp_data),                      //          .data
		.sink_startofpacket (personcheck_s1_agent_rp_startofpacket),             //          .startofpacket
		.sink_endofpacket   (personcheck_s1_agent_rp_endofpacket),               //          .endofpacket
		.clk                (clk_0_clk_clk),                                     //       clk.clk
		.reset              (nios2_processor_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_012_src_ready),                              //       src.ready
		.src_valid          (router_012_src_valid),                              //          .valid
		.src_data           (router_012_src_data),                               //          .data
		.src_channel        (router_012_src_channel),                            //          .channel
		.src_startofpacket  (router_012_src_startofpacket),                      //          .startofpacket
		.src_endofpacket    (router_012_src_endofpacket)                         //          .endofpacket
	);

	microprocessor_mm_interconnect_0_router_002 router_013 (
		.sink_ready         (pressurecheck_s1_agent_rp_ready),                   //      sink.ready
		.sink_valid         (pressurecheck_s1_agent_rp_valid),                   //          .valid
		.sink_data          (pressurecheck_s1_agent_rp_data),                    //          .data
		.sink_startofpacket (pressurecheck_s1_agent_rp_startofpacket),           //          .startofpacket
		.sink_endofpacket   (pressurecheck_s1_agent_rp_endofpacket),             //          .endofpacket
		.clk                (clk_0_clk_clk),                                     //       clk.clk
		.reset              (nios2_processor_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_013_src_ready),                              //       src.ready
		.src_valid          (router_013_src_valid),                              //          .valid
		.src_data           (router_013_src_data),                               //          .data
		.src_channel        (router_013_src_channel),                            //          .channel
		.src_startofpacket  (router_013_src_startofpacket),                      //          .startofpacket
		.src_endofpacket    (router_013_src_endofpacket)                         //          .endofpacket
	);

	microprocessor_mm_interconnect_0_router_002 router_014 (
		.sink_ready         (innerdoorswitch_s1_agent_rp_ready),                 //      sink.ready
		.sink_valid         (innerdoorswitch_s1_agent_rp_valid),                 //          .valid
		.sink_data          (innerdoorswitch_s1_agent_rp_data),                  //          .data
		.sink_startofpacket (innerdoorswitch_s1_agent_rp_startofpacket),         //          .startofpacket
		.sink_endofpacket   (innerdoorswitch_s1_agent_rp_endofpacket),           //          .endofpacket
		.clk                (clk_0_clk_clk),                                     //       clk.clk
		.reset              (nios2_processor_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_014_src_ready),                              //       src.ready
		.src_valid          (router_014_src_valid),                              //          .valid
		.src_data           (router_014_src_data),                               //          .data
		.src_channel        (router_014_src_channel),                            //          .channel
		.src_startofpacket  (router_014_src_startofpacket),                      //          .startofpacket
		.src_endofpacket    (router_014_src_endofpacket)                         //          .endofpacket
	);

	microprocessor_mm_interconnect_0_router_002 router_015 (
		.sink_ready         (outerdoorswitch_s1_agent_rp_ready),                 //      sink.ready
		.sink_valid         (outerdoorswitch_s1_agent_rp_valid),                 //          .valid
		.sink_data          (outerdoorswitch_s1_agent_rp_data),                  //          .data
		.sink_startofpacket (outerdoorswitch_s1_agent_rp_startofpacket),         //          .startofpacket
		.sink_endofpacket   (outerdoorswitch_s1_agent_rp_endofpacket),           //          .endofpacket
		.clk                (clk_0_clk_clk),                                     //       clk.clk
		.reset              (nios2_processor_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_015_src_ready),                              //       src.ready
		.src_valid          (router_015_src_valid),                              //          .valid
		.src_data           (router_015_src_data),                               //          .data
		.src_channel        (router_015_src_channel),                            //          .channel
		.src_startofpacket  (router_015_src_startofpacket),                      //          .startofpacket
		.src_endofpacket    (router_015_src_endofpacket)                         //          .endofpacket
	);

	microprocessor_mm_interconnect_0_router_002 router_016 (
		.sink_ready         (drainfinished_s1_agent_rp_ready),                   //      sink.ready
		.sink_valid         (drainfinished_s1_agent_rp_valid),                   //          .valid
		.sink_data          (drainfinished_s1_agent_rp_data),                    //          .data
		.sink_startofpacket (drainfinished_s1_agent_rp_startofpacket),           //          .startofpacket
		.sink_endofpacket   (drainfinished_s1_agent_rp_endofpacket),             //          .endofpacket
		.clk                (clk_0_clk_clk),                                     //       clk.clk
		.reset              (nios2_processor_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_016_src_ready),                              //       src.ready
		.src_valid          (router_016_src_valid),                              //          .valid
		.src_data           (router_016_src_data),                               //          .data
		.src_channel        (router_016_src_channel),                            //          .channel
		.src_startofpacket  (router_016_src_startofpacket),                      //          .startofpacket
		.src_endofpacket    (router_016_src_endofpacket)                         //          .endofpacket
	);

	microprocessor_mm_interconnect_0_router_002 router_017 (
		.sink_ready         (fillfinished_s1_agent_rp_ready),                    //      sink.ready
		.sink_valid         (fillfinished_s1_agent_rp_valid),                    //          .valid
		.sink_data          (fillfinished_s1_agent_rp_data),                     //          .data
		.sink_startofpacket (fillfinished_s1_agent_rp_startofpacket),            //          .startofpacket
		.sink_endofpacket   (fillfinished_s1_agent_rp_endofpacket),              //          .endofpacket
		.clk                (clk_0_clk_clk),                                     //       clk.clk
		.reset              (nios2_processor_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_017_src_ready),                              //       src.ready
		.src_valid          (router_017_src_valid),                              //          .valid
		.src_data           (router_017_src_data),                               //          .data
		.src_channel        (router_017_src_channel),                            //          .channel
		.src_startofpacket  (router_017_src_startofpacket),                      //          .startofpacket
		.src_endofpacket    (router_017_src_endofpacket)                         //          .endofpacket
	);

	microprocessor_mm_interconnect_0_router_002 router_018 (
		.sink_ready         (waitfinished_s1_agent_rp_ready),                    //      sink.ready
		.sink_valid         (waitfinished_s1_agent_rp_valid),                    //          .valid
		.sink_data          (waitfinished_s1_agent_rp_data),                     //          .data
		.sink_startofpacket (waitfinished_s1_agent_rp_startofpacket),            //          .startofpacket
		.sink_endofpacket   (waitfinished_s1_agent_rp_endofpacket),              //          .endofpacket
		.clk                (clk_0_clk_clk),                                     //       clk.clk
		.reset              (nios2_processor_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_018_src_ready),                              //       src.ready
		.src_valid          (router_018_src_valid),                              //          .valid
		.src_data           (router_018_src_data),                               //          .data
		.src_channel        (router_018_src_channel),                            //          .channel
		.src_startofpacket  (router_018_src_startofpacket),                      //          .startofpacket
		.src_endofpacket    (router_018_src_endofpacket)                         //          .endofpacket
	);

	microprocessor_mm_interconnect_0_router_002 router_019 (
		.sink_ready         (waiting_s1_agent_rp_ready),                         //      sink.ready
		.sink_valid         (waiting_s1_agent_rp_valid),                         //          .valid
		.sink_data          (waiting_s1_agent_rp_data),                          //          .data
		.sink_startofpacket (waiting_s1_agent_rp_startofpacket),                 //          .startofpacket
		.sink_endofpacket   (waiting_s1_agent_rp_endofpacket),                   //          .endofpacket
		.clk                (clk_0_clk_clk),                                     //       clk.clk
		.reset              (nios2_processor_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_019_src_ready),                              //       src.ready
		.src_valid          (router_019_src_valid),                              //          .valid
		.src_data           (router_019_src_data),                               //          .data
		.src_channel        (router_019_src_channel),                            //          .channel
		.src_startofpacket  (router_019_src_startofpacket),                      //          .startofpacket
		.src_endofpacket    (router_019_src_endofpacket)                         //          .endofpacket
	);

	microprocessor_mm_interconnect_0_cmd_demux cmd_demux (
		.clk                 (clk_0_clk_clk),                                     //       clk.clk
		.reset               (nios2_processor_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready          (router_src_ready),                                  //      sink.ready
		.sink_channel        (router_src_channel),                                //          .channel
		.sink_data           (router_src_data),                                   //          .data
		.sink_startofpacket  (router_src_startofpacket),                          //          .startofpacket
		.sink_endofpacket    (router_src_endofpacket),                            //          .endofpacket
		.sink_valid          (router_src_valid),                                  //          .valid
		.src0_ready          (cmd_demux_src0_ready),                              //      src0.ready
		.src0_valid          (cmd_demux_src0_valid),                              //          .valid
		.src0_data           (cmd_demux_src0_data),                               //          .data
		.src0_channel        (cmd_demux_src0_channel),                            //          .channel
		.src0_startofpacket  (cmd_demux_src0_startofpacket),                      //          .startofpacket
		.src0_endofpacket    (cmd_demux_src0_endofpacket),                        //          .endofpacket
		.src1_ready          (cmd_demux_src1_ready),                              //      src1.ready
		.src1_valid          (cmd_demux_src1_valid),                              //          .valid
		.src1_data           (cmd_demux_src1_data),                               //          .data
		.src1_channel        (cmd_demux_src1_channel),                            //          .channel
		.src1_startofpacket  (cmd_demux_src1_startofpacket),                      //          .startofpacket
		.src1_endofpacket    (cmd_demux_src1_endofpacket),                        //          .endofpacket
		.src2_ready          (cmd_demux_src2_ready),                              //      src2.ready
		.src2_valid          (cmd_demux_src2_valid),                              //          .valid
		.src2_data           (cmd_demux_src2_data),                               //          .data
		.src2_channel        (cmd_demux_src2_channel),                            //          .channel
		.src2_startofpacket  (cmd_demux_src2_startofpacket),                      //          .startofpacket
		.src2_endofpacket    (cmd_demux_src2_endofpacket),                        //          .endofpacket
		.src3_ready          (cmd_demux_src3_ready),                              //      src3.ready
		.src3_valid          (cmd_demux_src3_valid),                              //          .valid
		.src3_data           (cmd_demux_src3_data),                               //          .data
		.src3_channel        (cmd_demux_src3_channel),                            //          .channel
		.src3_startofpacket  (cmd_demux_src3_startofpacket),                      //          .startofpacket
		.src3_endofpacket    (cmd_demux_src3_endofpacket),                        //          .endofpacket
		.src4_ready          (cmd_demux_src4_ready),                              //      src4.ready
		.src4_valid          (cmd_demux_src4_valid),                              //          .valid
		.src4_data           (cmd_demux_src4_data),                               //          .data
		.src4_channel        (cmd_demux_src4_channel),                            //          .channel
		.src4_startofpacket  (cmd_demux_src4_startofpacket),                      //          .startofpacket
		.src4_endofpacket    (cmd_demux_src4_endofpacket),                        //          .endofpacket
		.src5_ready          (cmd_demux_src5_ready),                              //      src5.ready
		.src5_valid          (cmd_demux_src5_valid),                              //          .valid
		.src5_data           (cmd_demux_src5_data),                               //          .data
		.src5_channel        (cmd_demux_src5_channel),                            //          .channel
		.src5_startofpacket  (cmd_demux_src5_startofpacket),                      //          .startofpacket
		.src5_endofpacket    (cmd_demux_src5_endofpacket),                        //          .endofpacket
		.src6_ready          (cmd_demux_src6_ready),                              //      src6.ready
		.src6_valid          (cmd_demux_src6_valid),                              //          .valid
		.src6_data           (cmd_demux_src6_data),                               //          .data
		.src6_channel        (cmd_demux_src6_channel),                            //          .channel
		.src6_startofpacket  (cmd_demux_src6_startofpacket),                      //          .startofpacket
		.src6_endofpacket    (cmd_demux_src6_endofpacket),                        //          .endofpacket
		.src7_ready          (cmd_demux_src7_ready),                              //      src7.ready
		.src7_valid          (cmd_demux_src7_valid),                              //          .valid
		.src7_data           (cmd_demux_src7_data),                               //          .data
		.src7_channel        (cmd_demux_src7_channel),                            //          .channel
		.src7_startofpacket  (cmd_demux_src7_startofpacket),                      //          .startofpacket
		.src7_endofpacket    (cmd_demux_src7_endofpacket),                        //          .endofpacket
		.src8_ready          (cmd_demux_src8_ready),                              //      src8.ready
		.src8_valid          (cmd_demux_src8_valid),                              //          .valid
		.src8_data           (cmd_demux_src8_data),                               //          .data
		.src8_channel        (cmd_demux_src8_channel),                            //          .channel
		.src8_startofpacket  (cmd_demux_src8_startofpacket),                      //          .startofpacket
		.src8_endofpacket    (cmd_demux_src8_endofpacket),                        //          .endofpacket
		.src9_ready          (cmd_demux_src9_ready),                              //      src9.ready
		.src9_valid          (cmd_demux_src9_valid),                              //          .valid
		.src9_data           (cmd_demux_src9_data),                               //          .data
		.src9_channel        (cmd_demux_src9_channel),                            //          .channel
		.src9_startofpacket  (cmd_demux_src9_startofpacket),                      //          .startofpacket
		.src9_endofpacket    (cmd_demux_src9_endofpacket),                        //          .endofpacket
		.src10_ready         (cmd_demux_src10_ready),                             //     src10.ready
		.src10_valid         (cmd_demux_src10_valid),                             //          .valid
		.src10_data          (cmd_demux_src10_data),                              //          .data
		.src10_channel       (cmd_demux_src10_channel),                           //          .channel
		.src10_startofpacket (cmd_demux_src10_startofpacket),                     //          .startofpacket
		.src10_endofpacket   (cmd_demux_src10_endofpacket),                       //          .endofpacket
		.src11_ready         (cmd_demux_src11_ready),                             //     src11.ready
		.src11_valid         (cmd_demux_src11_valid),                             //          .valid
		.src11_data          (cmd_demux_src11_data),                              //          .data
		.src11_channel       (cmd_demux_src11_channel),                           //          .channel
		.src11_startofpacket (cmd_demux_src11_startofpacket),                     //          .startofpacket
		.src11_endofpacket   (cmd_demux_src11_endofpacket),                       //          .endofpacket
		.src12_ready         (cmd_demux_src12_ready),                             //     src12.ready
		.src12_valid         (cmd_demux_src12_valid),                             //          .valid
		.src12_data          (cmd_demux_src12_data),                              //          .data
		.src12_channel       (cmd_demux_src12_channel),                           //          .channel
		.src12_startofpacket (cmd_demux_src12_startofpacket),                     //          .startofpacket
		.src12_endofpacket   (cmd_demux_src12_endofpacket),                       //          .endofpacket
		.src13_ready         (cmd_demux_src13_ready),                             //     src13.ready
		.src13_valid         (cmd_demux_src13_valid),                             //          .valid
		.src13_data          (cmd_demux_src13_data),                              //          .data
		.src13_channel       (cmd_demux_src13_channel),                           //          .channel
		.src13_startofpacket (cmd_demux_src13_startofpacket),                     //          .startofpacket
		.src13_endofpacket   (cmd_demux_src13_endofpacket),                       //          .endofpacket
		.src14_ready         (cmd_demux_src14_ready),                             //     src14.ready
		.src14_valid         (cmd_demux_src14_valid),                             //          .valid
		.src14_data          (cmd_demux_src14_data),                              //          .data
		.src14_channel       (cmd_demux_src14_channel),                           //          .channel
		.src14_startofpacket (cmd_demux_src14_startofpacket),                     //          .startofpacket
		.src14_endofpacket   (cmd_demux_src14_endofpacket),                       //          .endofpacket
		.src15_ready         (cmd_demux_src15_ready),                             //     src15.ready
		.src15_valid         (cmd_demux_src15_valid),                             //          .valid
		.src15_data          (cmd_demux_src15_data),                              //          .data
		.src15_channel       (cmd_demux_src15_channel),                           //          .channel
		.src15_startofpacket (cmd_demux_src15_startofpacket),                     //          .startofpacket
		.src15_endofpacket   (cmd_demux_src15_endofpacket),                       //          .endofpacket
		.src16_ready         (cmd_demux_src16_ready),                             //     src16.ready
		.src16_valid         (cmd_demux_src16_valid),                             //          .valid
		.src16_data          (cmd_demux_src16_data),                              //          .data
		.src16_channel       (cmd_demux_src16_channel),                           //          .channel
		.src16_startofpacket (cmd_demux_src16_startofpacket),                     //          .startofpacket
		.src16_endofpacket   (cmd_demux_src16_endofpacket),                       //          .endofpacket
		.src17_ready         (cmd_demux_src17_ready),                             //     src17.ready
		.src17_valid         (cmd_demux_src17_valid),                             //          .valid
		.src17_data          (cmd_demux_src17_data),                              //          .data
		.src17_channel       (cmd_demux_src17_channel),                           //          .channel
		.src17_startofpacket (cmd_demux_src17_startofpacket),                     //          .startofpacket
		.src17_endofpacket   (cmd_demux_src17_endofpacket)                        //          .endofpacket
	);

	microprocessor_mm_interconnect_0_cmd_demux_001 cmd_demux_001 (
		.clk                (clk_0_clk_clk),                                     //       clk.clk
		.reset              (nios2_processor_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_001_src_ready),                              //      sink.ready
		.sink_channel       (router_001_src_channel),                            //          .channel
		.sink_data          (router_001_src_data),                               //          .data
		.sink_startofpacket (router_001_src_startofpacket),                      //          .startofpacket
		.sink_endofpacket   (router_001_src_endofpacket),                        //          .endofpacket
		.sink_valid         (router_001_src_valid),                              //          .valid
		.src0_ready         (cmd_demux_001_src0_ready),                          //      src0.ready
		.src0_valid         (cmd_demux_001_src0_valid),                          //          .valid
		.src0_data          (cmd_demux_001_src0_data),                           //          .data
		.src0_channel       (cmd_demux_001_src0_channel),                        //          .channel
		.src0_startofpacket (cmd_demux_001_src0_startofpacket),                  //          .startofpacket
		.src0_endofpacket   (cmd_demux_001_src0_endofpacket),                    //          .endofpacket
		.src1_ready         (cmd_demux_001_src1_ready),                          //      src1.ready
		.src1_valid         (cmd_demux_001_src1_valid),                          //          .valid
		.src1_data          (cmd_demux_001_src1_data),                           //          .data
		.src1_channel       (cmd_demux_001_src1_channel),                        //          .channel
		.src1_startofpacket (cmd_demux_001_src1_startofpacket),                  //          .startofpacket
		.src1_endofpacket   (cmd_demux_001_src1_endofpacket)                     //          .endofpacket
	);

	microprocessor_mm_interconnect_0_cmd_mux cmd_mux (
		.clk                 (clk_0_clk_clk),                                     //       clk.clk
		.reset               (nios2_processor_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                                 //       src.ready
		.src_valid           (cmd_mux_src_valid),                                 //          .valid
		.src_data            (cmd_mux_src_data),                                  //          .data
		.src_channel         (cmd_mux_src_channel),                               //          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                         //          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                           //          .endofpacket
		.sink0_ready         (cmd_demux_src0_ready),                              //     sink0.ready
		.sink0_valid         (cmd_demux_src0_valid),                              //          .valid
		.sink0_channel       (cmd_demux_src0_channel),                            //          .channel
		.sink0_data          (cmd_demux_src0_data),                               //          .data
		.sink0_startofpacket (cmd_demux_src0_startofpacket),                      //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src0_endofpacket)                         //          .endofpacket
	);

	microprocessor_mm_interconnect_0_cmd_mux_001 cmd_mux_001 (
		.clk                 (clk_0_clk_clk),                                     //       clk.clk
		.reset               (nios2_processor_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                             //       src.ready
		.src_valid           (cmd_mux_001_src_valid),                             //          .valid
		.src_data            (cmd_mux_001_src_data),                              //          .data
		.src_channel         (cmd_mux_001_src_channel),                           //          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),                     //          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),                       //          .endofpacket
		.sink0_ready         (cmd_demux_src1_ready),                              //     sink0.ready
		.sink0_valid         (cmd_demux_src1_valid),                              //          .valid
		.sink0_channel       (cmd_demux_src1_channel),                            //          .channel
		.sink0_data          (cmd_demux_src1_data),                               //          .data
		.sink0_startofpacket (cmd_demux_src1_startofpacket),                      //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src1_endofpacket),                        //          .endofpacket
		.sink1_ready         (cmd_demux_001_src0_ready),                          //     sink1.ready
		.sink1_valid         (cmd_demux_001_src0_valid),                          //          .valid
		.sink1_channel       (cmd_demux_001_src0_channel),                        //          .channel
		.sink1_data          (cmd_demux_001_src0_data),                           //          .data
		.sink1_startofpacket (cmd_demux_001_src0_startofpacket),                  //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src0_endofpacket)                     //          .endofpacket
	);

	microprocessor_mm_interconnect_0_cmd_mux_001 cmd_mux_002 (
		.clk                 (clk_0_clk_clk),                                     //       clk.clk
		.reset               (nios2_processor_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_002_src_ready),                             //       src.ready
		.src_valid           (cmd_mux_002_src_valid),                             //          .valid
		.src_data            (cmd_mux_002_src_data),                              //          .data
		.src_channel         (cmd_mux_002_src_channel),                           //          .channel
		.src_startofpacket   (cmd_mux_002_src_startofpacket),                     //          .startofpacket
		.src_endofpacket     (cmd_mux_002_src_endofpacket),                       //          .endofpacket
		.sink0_ready         (cmd_demux_src2_ready),                              //     sink0.ready
		.sink0_valid         (cmd_demux_src2_valid),                              //          .valid
		.sink0_channel       (cmd_demux_src2_channel),                            //          .channel
		.sink0_data          (cmd_demux_src2_data),                               //          .data
		.sink0_startofpacket (cmd_demux_src2_startofpacket),                      //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src2_endofpacket),                        //          .endofpacket
		.sink1_ready         (cmd_demux_001_src1_ready),                          //     sink1.ready
		.sink1_valid         (cmd_demux_001_src1_valid),                          //          .valid
		.sink1_channel       (cmd_demux_001_src1_channel),                        //          .channel
		.sink1_data          (cmd_demux_001_src1_data),                           //          .data
		.sink1_startofpacket (cmd_demux_001_src1_startofpacket),                  //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src1_endofpacket)                     //          .endofpacket
	);

	microprocessor_mm_interconnect_0_cmd_mux cmd_mux_003 (
		.clk                 (clk_0_clk_clk),                                     //       clk.clk
		.reset               (nios2_processor_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_003_src_ready),                             //       src.ready
		.src_valid           (cmd_mux_003_src_valid),                             //          .valid
		.src_data            (cmd_mux_003_src_data),                              //          .data
		.src_channel         (cmd_mux_003_src_channel),                           //          .channel
		.src_startofpacket   (cmd_mux_003_src_startofpacket),                     //          .startofpacket
		.src_endofpacket     (cmd_mux_003_src_endofpacket),                       //          .endofpacket
		.sink0_ready         (cmd_demux_src3_ready),                              //     sink0.ready
		.sink0_valid         (cmd_demux_src3_valid),                              //          .valid
		.sink0_channel       (cmd_demux_src3_channel),                            //          .channel
		.sink0_data          (cmd_demux_src3_data),                               //          .data
		.sink0_startofpacket (cmd_demux_src3_startofpacket),                      //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src3_endofpacket)                         //          .endofpacket
	);

	microprocessor_mm_interconnect_0_cmd_mux cmd_mux_004 (
		.clk                 (clk_0_clk_clk),                                     //       clk.clk
		.reset               (nios2_processor_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_004_src_ready),                             //       src.ready
		.src_valid           (cmd_mux_004_src_valid),                             //          .valid
		.src_data            (cmd_mux_004_src_data),                              //          .data
		.src_channel         (cmd_mux_004_src_channel),                           //          .channel
		.src_startofpacket   (cmd_mux_004_src_startofpacket),                     //          .startofpacket
		.src_endofpacket     (cmd_mux_004_src_endofpacket),                       //          .endofpacket
		.sink0_ready         (cmd_demux_src4_ready),                              //     sink0.ready
		.sink0_valid         (cmd_demux_src4_valid),                              //          .valid
		.sink0_channel       (cmd_demux_src4_channel),                            //          .channel
		.sink0_data          (cmd_demux_src4_data),                               //          .data
		.sink0_startofpacket (cmd_demux_src4_startofpacket),                      //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src4_endofpacket)                         //          .endofpacket
	);

	microprocessor_mm_interconnect_0_cmd_mux cmd_mux_005 (
		.clk                 (clk_0_clk_clk),                                     //       clk.clk
		.reset               (nios2_processor_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_005_src_ready),                             //       src.ready
		.src_valid           (cmd_mux_005_src_valid),                             //          .valid
		.src_data            (cmd_mux_005_src_data),                              //          .data
		.src_channel         (cmd_mux_005_src_channel),                           //          .channel
		.src_startofpacket   (cmd_mux_005_src_startofpacket),                     //          .startofpacket
		.src_endofpacket     (cmd_mux_005_src_endofpacket),                       //          .endofpacket
		.sink0_ready         (cmd_demux_src5_ready),                              //     sink0.ready
		.sink0_valid         (cmd_demux_src5_valid),                              //          .valid
		.sink0_channel       (cmd_demux_src5_channel),                            //          .channel
		.sink0_data          (cmd_demux_src5_data),                               //          .data
		.sink0_startofpacket (cmd_demux_src5_startofpacket),                      //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src5_endofpacket)                         //          .endofpacket
	);

	microprocessor_mm_interconnect_0_cmd_mux cmd_mux_006 (
		.clk                 (clk_0_clk_clk),                                     //       clk.clk
		.reset               (nios2_processor_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_006_src_ready),                             //       src.ready
		.src_valid           (cmd_mux_006_src_valid),                             //          .valid
		.src_data            (cmd_mux_006_src_data),                              //          .data
		.src_channel         (cmd_mux_006_src_channel),                           //          .channel
		.src_startofpacket   (cmd_mux_006_src_startofpacket),                     //          .startofpacket
		.src_endofpacket     (cmd_mux_006_src_endofpacket),                       //          .endofpacket
		.sink0_ready         (cmd_demux_src6_ready),                              //     sink0.ready
		.sink0_valid         (cmd_demux_src6_valid),                              //          .valid
		.sink0_channel       (cmd_demux_src6_channel),                            //          .channel
		.sink0_data          (cmd_demux_src6_data),                               //          .data
		.sink0_startofpacket (cmd_demux_src6_startofpacket),                      //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src6_endofpacket)                         //          .endofpacket
	);

	microprocessor_mm_interconnect_0_cmd_mux cmd_mux_007 (
		.clk                 (clk_0_clk_clk),                                     //       clk.clk
		.reset               (nios2_processor_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_007_src_ready),                             //       src.ready
		.src_valid           (cmd_mux_007_src_valid),                             //          .valid
		.src_data            (cmd_mux_007_src_data),                              //          .data
		.src_channel         (cmd_mux_007_src_channel),                           //          .channel
		.src_startofpacket   (cmd_mux_007_src_startofpacket),                     //          .startofpacket
		.src_endofpacket     (cmd_mux_007_src_endofpacket),                       //          .endofpacket
		.sink0_ready         (cmd_demux_src7_ready),                              //     sink0.ready
		.sink0_valid         (cmd_demux_src7_valid),                              //          .valid
		.sink0_channel       (cmd_demux_src7_channel),                            //          .channel
		.sink0_data          (cmd_demux_src7_data),                               //          .data
		.sink0_startofpacket (cmd_demux_src7_startofpacket),                      //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src7_endofpacket)                         //          .endofpacket
	);

	microprocessor_mm_interconnect_0_cmd_mux cmd_mux_008 (
		.clk                 (clk_0_clk_clk),                                     //       clk.clk
		.reset               (nios2_processor_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_008_src_ready),                             //       src.ready
		.src_valid           (cmd_mux_008_src_valid),                             //          .valid
		.src_data            (cmd_mux_008_src_data),                              //          .data
		.src_channel         (cmd_mux_008_src_channel),                           //          .channel
		.src_startofpacket   (cmd_mux_008_src_startofpacket),                     //          .startofpacket
		.src_endofpacket     (cmd_mux_008_src_endofpacket),                       //          .endofpacket
		.sink0_ready         (cmd_demux_src8_ready),                              //     sink0.ready
		.sink0_valid         (cmd_demux_src8_valid),                              //          .valid
		.sink0_channel       (cmd_demux_src8_channel),                            //          .channel
		.sink0_data          (cmd_demux_src8_data),                               //          .data
		.sink0_startofpacket (cmd_demux_src8_startofpacket),                      //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src8_endofpacket)                         //          .endofpacket
	);

	microprocessor_mm_interconnect_0_cmd_mux cmd_mux_009 (
		.clk                 (clk_0_clk_clk),                                     //       clk.clk
		.reset               (nios2_processor_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_009_src_ready),                             //       src.ready
		.src_valid           (cmd_mux_009_src_valid),                             //          .valid
		.src_data            (cmd_mux_009_src_data),                              //          .data
		.src_channel         (cmd_mux_009_src_channel),                           //          .channel
		.src_startofpacket   (cmd_mux_009_src_startofpacket),                     //          .startofpacket
		.src_endofpacket     (cmd_mux_009_src_endofpacket),                       //          .endofpacket
		.sink0_ready         (cmd_demux_src9_ready),                              //     sink0.ready
		.sink0_valid         (cmd_demux_src9_valid),                              //          .valid
		.sink0_channel       (cmd_demux_src9_channel),                            //          .channel
		.sink0_data          (cmd_demux_src9_data),                               //          .data
		.sink0_startofpacket (cmd_demux_src9_startofpacket),                      //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src9_endofpacket)                         //          .endofpacket
	);

	microprocessor_mm_interconnect_0_cmd_mux cmd_mux_010 (
		.clk                 (clk_0_clk_clk),                                     //       clk.clk
		.reset               (nios2_processor_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_010_src_ready),                             //       src.ready
		.src_valid           (cmd_mux_010_src_valid),                             //          .valid
		.src_data            (cmd_mux_010_src_data),                              //          .data
		.src_channel         (cmd_mux_010_src_channel),                           //          .channel
		.src_startofpacket   (cmd_mux_010_src_startofpacket),                     //          .startofpacket
		.src_endofpacket     (cmd_mux_010_src_endofpacket),                       //          .endofpacket
		.sink0_ready         (cmd_demux_src10_ready),                             //     sink0.ready
		.sink0_valid         (cmd_demux_src10_valid),                             //          .valid
		.sink0_channel       (cmd_demux_src10_channel),                           //          .channel
		.sink0_data          (cmd_demux_src10_data),                              //          .data
		.sink0_startofpacket (cmd_demux_src10_startofpacket),                     //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src10_endofpacket)                        //          .endofpacket
	);

	microprocessor_mm_interconnect_0_cmd_mux cmd_mux_011 (
		.clk                 (clk_0_clk_clk),                                     //       clk.clk
		.reset               (nios2_processor_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_011_src_ready),                             //       src.ready
		.src_valid           (cmd_mux_011_src_valid),                             //          .valid
		.src_data            (cmd_mux_011_src_data),                              //          .data
		.src_channel         (cmd_mux_011_src_channel),                           //          .channel
		.src_startofpacket   (cmd_mux_011_src_startofpacket),                     //          .startofpacket
		.src_endofpacket     (cmd_mux_011_src_endofpacket),                       //          .endofpacket
		.sink0_ready         (cmd_demux_src11_ready),                             //     sink0.ready
		.sink0_valid         (cmd_demux_src11_valid),                             //          .valid
		.sink0_channel       (cmd_demux_src11_channel),                           //          .channel
		.sink0_data          (cmd_demux_src11_data),                              //          .data
		.sink0_startofpacket (cmd_demux_src11_startofpacket),                     //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src11_endofpacket)                        //          .endofpacket
	);

	microprocessor_mm_interconnect_0_cmd_mux cmd_mux_012 (
		.clk                 (clk_0_clk_clk),                                     //       clk.clk
		.reset               (nios2_processor_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_012_src_ready),                             //       src.ready
		.src_valid           (cmd_mux_012_src_valid),                             //          .valid
		.src_data            (cmd_mux_012_src_data),                              //          .data
		.src_channel         (cmd_mux_012_src_channel),                           //          .channel
		.src_startofpacket   (cmd_mux_012_src_startofpacket),                     //          .startofpacket
		.src_endofpacket     (cmd_mux_012_src_endofpacket),                       //          .endofpacket
		.sink0_ready         (cmd_demux_src12_ready),                             //     sink0.ready
		.sink0_valid         (cmd_demux_src12_valid),                             //          .valid
		.sink0_channel       (cmd_demux_src12_channel),                           //          .channel
		.sink0_data          (cmd_demux_src12_data),                              //          .data
		.sink0_startofpacket (cmd_demux_src12_startofpacket),                     //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src12_endofpacket)                        //          .endofpacket
	);

	microprocessor_mm_interconnect_0_cmd_mux cmd_mux_013 (
		.clk                 (clk_0_clk_clk),                                     //       clk.clk
		.reset               (nios2_processor_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_013_src_ready),                             //       src.ready
		.src_valid           (cmd_mux_013_src_valid),                             //          .valid
		.src_data            (cmd_mux_013_src_data),                              //          .data
		.src_channel         (cmd_mux_013_src_channel),                           //          .channel
		.src_startofpacket   (cmd_mux_013_src_startofpacket),                     //          .startofpacket
		.src_endofpacket     (cmd_mux_013_src_endofpacket),                       //          .endofpacket
		.sink0_ready         (cmd_demux_src13_ready),                             //     sink0.ready
		.sink0_valid         (cmd_demux_src13_valid),                             //          .valid
		.sink0_channel       (cmd_demux_src13_channel),                           //          .channel
		.sink0_data          (cmd_demux_src13_data),                              //          .data
		.sink0_startofpacket (cmd_demux_src13_startofpacket),                     //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src13_endofpacket)                        //          .endofpacket
	);

	microprocessor_mm_interconnect_0_cmd_mux cmd_mux_014 (
		.clk                 (clk_0_clk_clk),                                     //       clk.clk
		.reset               (nios2_processor_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_014_src_ready),                             //       src.ready
		.src_valid           (cmd_mux_014_src_valid),                             //          .valid
		.src_data            (cmd_mux_014_src_data),                              //          .data
		.src_channel         (cmd_mux_014_src_channel),                           //          .channel
		.src_startofpacket   (cmd_mux_014_src_startofpacket),                     //          .startofpacket
		.src_endofpacket     (cmd_mux_014_src_endofpacket),                       //          .endofpacket
		.sink0_ready         (cmd_demux_src14_ready),                             //     sink0.ready
		.sink0_valid         (cmd_demux_src14_valid),                             //          .valid
		.sink0_channel       (cmd_demux_src14_channel),                           //          .channel
		.sink0_data          (cmd_demux_src14_data),                              //          .data
		.sink0_startofpacket (cmd_demux_src14_startofpacket),                     //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src14_endofpacket)                        //          .endofpacket
	);

	microprocessor_mm_interconnect_0_cmd_mux cmd_mux_015 (
		.clk                 (clk_0_clk_clk),                                     //       clk.clk
		.reset               (nios2_processor_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_015_src_ready),                             //       src.ready
		.src_valid           (cmd_mux_015_src_valid),                             //          .valid
		.src_data            (cmd_mux_015_src_data),                              //          .data
		.src_channel         (cmd_mux_015_src_channel),                           //          .channel
		.src_startofpacket   (cmd_mux_015_src_startofpacket),                     //          .startofpacket
		.src_endofpacket     (cmd_mux_015_src_endofpacket),                       //          .endofpacket
		.sink0_ready         (cmd_demux_src15_ready),                             //     sink0.ready
		.sink0_valid         (cmd_demux_src15_valid),                             //          .valid
		.sink0_channel       (cmd_demux_src15_channel),                           //          .channel
		.sink0_data          (cmd_demux_src15_data),                              //          .data
		.sink0_startofpacket (cmd_demux_src15_startofpacket),                     //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src15_endofpacket)                        //          .endofpacket
	);

	microprocessor_mm_interconnect_0_cmd_mux cmd_mux_016 (
		.clk                 (clk_0_clk_clk),                                     //       clk.clk
		.reset               (nios2_processor_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_016_src_ready),                             //       src.ready
		.src_valid           (cmd_mux_016_src_valid),                             //          .valid
		.src_data            (cmd_mux_016_src_data),                              //          .data
		.src_channel         (cmd_mux_016_src_channel),                           //          .channel
		.src_startofpacket   (cmd_mux_016_src_startofpacket),                     //          .startofpacket
		.src_endofpacket     (cmd_mux_016_src_endofpacket),                       //          .endofpacket
		.sink0_ready         (cmd_demux_src16_ready),                             //     sink0.ready
		.sink0_valid         (cmd_demux_src16_valid),                             //          .valid
		.sink0_channel       (cmd_demux_src16_channel),                           //          .channel
		.sink0_data          (cmd_demux_src16_data),                              //          .data
		.sink0_startofpacket (cmd_demux_src16_startofpacket),                     //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src16_endofpacket)                        //          .endofpacket
	);

	microprocessor_mm_interconnect_0_cmd_mux cmd_mux_017 (
		.clk                 (clk_0_clk_clk),                                     //       clk.clk
		.reset               (nios2_processor_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_017_src_ready),                             //       src.ready
		.src_valid           (cmd_mux_017_src_valid),                             //          .valid
		.src_data            (cmd_mux_017_src_data),                              //          .data
		.src_channel         (cmd_mux_017_src_channel),                           //          .channel
		.src_startofpacket   (cmd_mux_017_src_startofpacket),                     //          .startofpacket
		.src_endofpacket     (cmd_mux_017_src_endofpacket),                       //          .endofpacket
		.sink0_ready         (cmd_demux_src17_ready),                             //     sink0.ready
		.sink0_valid         (cmd_demux_src17_valid),                             //          .valid
		.sink0_channel       (cmd_demux_src17_channel),                           //          .channel
		.sink0_data          (cmd_demux_src17_data),                              //          .data
		.sink0_startofpacket (cmd_demux_src17_startofpacket),                     //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src17_endofpacket)                        //          .endofpacket
	);

	microprocessor_mm_interconnect_0_rsp_demux rsp_demux (
		.clk                (clk_0_clk_clk),                                     //       clk.clk
		.reset              (nios2_processor_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_002_src_ready),                              //      sink.ready
		.sink_channel       (router_002_src_channel),                            //          .channel
		.sink_data          (router_002_src_data),                               //          .data
		.sink_startofpacket (router_002_src_startofpacket),                      //          .startofpacket
		.sink_endofpacket   (router_002_src_endofpacket),                        //          .endofpacket
		.sink_valid         (router_002_src_valid),                              //          .valid
		.src0_ready         (rsp_demux_src0_ready),                              //      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                              //          .valid
		.src0_data          (rsp_demux_src0_data),                               //          .data
		.src0_channel       (rsp_demux_src0_channel),                            //          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                      //          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket)                         //          .endofpacket
	);

	microprocessor_mm_interconnect_0_cmd_demux_001 rsp_demux_001 (
		.clk                (clk_0_clk_clk),                                     //       clk.clk
		.reset              (nios2_processor_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_003_src_ready),                              //      sink.ready
		.sink_channel       (router_003_src_channel),                            //          .channel
		.sink_data          (router_003_src_data),                               //          .data
		.sink_startofpacket (router_003_src_startofpacket),                      //          .startofpacket
		.sink_endofpacket   (router_003_src_endofpacket),                        //          .endofpacket
		.sink_valid         (router_003_src_valid),                              //          .valid
		.src0_ready         (rsp_demux_001_src0_ready),                          //      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),                          //          .valid
		.src0_data          (rsp_demux_001_src0_data),                           //          .data
		.src0_channel       (rsp_demux_001_src0_channel),                        //          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),                  //          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket),                    //          .endofpacket
		.src1_ready         (rsp_demux_001_src1_ready),                          //      src1.ready
		.src1_valid         (rsp_demux_001_src1_valid),                          //          .valid
		.src1_data          (rsp_demux_001_src1_data),                           //          .data
		.src1_channel       (rsp_demux_001_src1_channel),                        //          .channel
		.src1_startofpacket (rsp_demux_001_src1_startofpacket),                  //          .startofpacket
		.src1_endofpacket   (rsp_demux_001_src1_endofpacket)                     //          .endofpacket
	);

	microprocessor_mm_interconnect_0_cmd_demux_001 rsp_demux_002 (
		.clk                (clk_0_clk_clk),                                     //       clk.clk
		.reset              (nios2_processor_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_004_src_ready),                              //      sink.ready
		.sink_channel       (router_004_src_channel),                            //          .channel
		.sink_data          (router_004_src_data),                               //          .data
		.sink_startofpacket (router_004_src_startofpacket),                      //          .startofpacket
		.sink_endofpacket   (router_004_src_endofpacket),                        //          .endofpacket
		.sink_valid         (router_004_src_valid),                              //          .valid
		.src0_ready         (rsp_demux_002_src0_ready),                          //      src0.ready
		.src0_valid         (rsp_demux_002_src0_valid),                          //          .valid
		.src0_data          (rsp_demux_002_src0_data),                           //          .data
		.src0_channel       (rsp_demux_002_src0_channel),                        //          .channel
		.src0_startofpacket (rsp_demux_002_src0_startofpacket),                  //          .startofpacket
		.src0_endofpacket   (rsp_demux_002_src0_endofpacket),                    //          .endofpacket
		.src1_ready         (rsp_demux_002_src1_ready),                          //      src1.ready
		.src1_valid         (rsp_demux_002_src1_valid),                          //          .valid
		.src1_data          (rsp_demux_002_src1_data),                           //          .data
		.src1_channel       (rsp_demux_002_src1_channel),                        //          .channel
		.src1_startofpacket (rsp_demux_002_src1_startofpacket),                  //          .startofpacket
		.src1_endofpacket   (rsp_demux_002_src1_endofpacket)                     //          .endofpacket
	);

	microprocessor_mm_interconnect_0_rsp_demux rsp_demux_003 (
		.clk                (clk_0_clk_clk),                                     //       clk.clk
		.reset              (nios2_processor_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_005_src_ready),                              //      sink.ready
		.sink_channel       (router_005_src_channel),                            //          .channel
		.sink_data          (router_005_src_data),                               //          .data
		.sink_startofpacket (router_005_src_startofpacket),                      //          .startofpacket
		.sink_endofpacket   (router_005_src_endofpacket),                        //          .endofpacket
		.sink_valid         (router_005_src_valid),                              //          .valid
		.src0_ready         (rsp_demux_003_src0_ready),                          //      src0.ready
		.src0_valid         (rsp_demux_003_src0_valid),                          //          .valid
		.src0_data          (rsp_demux_003_src0_data),                           //          .data
		.src0_channel       (rsp_demux_003_src0_channel),                        //          .channel
		.src0_startofpacket (rsp_demux_003_src0_startofpacket),                  //          .startofpacket
		.src0_endofpacket   (rsp_demux_003_src0_endofpacket)                     //          .endofpacket
	);

	microprocessor_mm_interconnect_0_rsp_demux rsp_demux_004 (
		.clk                (clk_0_clk_clk),                                     //       clk.clk
		.reset              (nios2_processor_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_006_src_ready),                              //      sink.ready
		.sink_channel       (router_006_src_channel),                            //          .channel
		.sink_data          (router_006_src_data),                               //          .data
		.sink_startofpacket (router_006_src_startofpacket),                      //          .startofpacket
		.sink_endofpacket   (router_006_src_endofpacket),                        //          .endofpacket
		.sink_valid         (router_006_src_valid),                              //          .valid
		.src0_ready         (rsp_demux_004_src0_ready),                          //      src0.ready
		.src0_valid         (rsp_demux_004_src0_valid),                          //          .valid
		.src0_data          (rsp_demux_004_src0_data),                           //          .data
		.src0_channel       (rsp_demux_004_src0_channel),                        //          .channel
		.src0_startofpacket (rsp_demux_004_src0_startofpacket),                  //          .startofpacket
		.src0_endofpacket   (rsp_demux_004_src0_endofpacket)                     //          .endofpacket
	);

	microprocessor_mm_interconnect_0_rsp_demux rsp_demux_005 (
		.clk                (clk_0_clk_clk),                                     //       clk.clk
		.reset              (nios2_processor_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_007_src_ready),                              //      sink.ready
		.sink_channel       (router_007_src_channel),                            //          .channel
		.sink_data          (router_007_src_data),                               //          .data
		.sink_startofpacket (router_007_src_startofpacket),                      //          .startofpacket
		.sink_endofpacket   (router_007_src_endofpacket),                        //          .endofpacket
		.sink_valid         (router_007_src_valid),                              //          .valid
		.src0_ready         (rsp_demux_005_src0_ready),                          //      src0.ready
		.src0_valid         (rsp_demux_005_src0_valid),                          //          .valid
		.src0_data          (rsp_demux_005_src0_data),                           //          .data
		.src0_channel       (rsp_demux_005_src0_channel),                        //          .channel
		.src0_startofpacket (rsp_demux_005_src0_startofpacket),                  //          .startofpacket
		.src0_endofpacket   (rsp_demux_005_src0_endofpacket)                     //          .endofpacket
	);

	microprocessor_mm_interconnect_0_rsp_demux rsp_demux_006 (
		.clk                (clk_0_clk_clk),                                     //       clk.clk
		.reset              (nios2_processor_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_008_src_ready),                              //      sink.ready
		.sink_channel       (router_008_src_channel),                            //          .channel
		.sink_data          (router_008_src_data),                               //          .data
		.sink_startofpacket (router_008_src_startofpacket),                      //          .startofpacket
		.sink_endofpacket   (router_008_src_endofpacket),                        //          .endofpacket
		.sink_valid         (router_008_src_valid),                              //          .valid
		.src0_ready         (rsp_demux_006_src0_ready),                          //      src0.ready
		.src0_valid         (rsp_demux_006_src0_valid),                          //          .valid
		.src0_data          (rsp_demux_006_src0_data),                           //          .data
		.src0_channel       (rsp_demux_006_src0_channel),                        //          .channel
		.src0_startofpacket (rsp_demux_006_src0_startofpacket),                  //          .startofpacket
		.src0_endofpacket   (rsp_demux_006_src0_endofpacket)                     //          .endofpacket
	);

	microprocessor_mm_interconnect_0_rsp_demux rsp_demux_007 (
		.clk                (clk_0_clk_clk),                                     //       clk.clk
		.reset              (nios2_processor_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_009_src_ready),                              //      sink.ready
		.sink_channel       (router_009_src_channel),                            //          .channel
		.sink_data          (router_009_src_data),                               //          .data
		.sink_startofpacket (router_009_src_startofpacket),                      //          .startofpacket
		.sink_endofpacket   (router_009_src_endofpacket),                        //          .endofpacket
		.sink_valid         (router_009_src_valid),                              //          .valid
		.src0_ready         (rsp_demux_007_src0_ready),                          //      src0.ready
		.src0_valid         (rsp_demux_007_src0_valid),                          //          .valid
		.src0_data          (rsp_demux_007_src0_data),                           //          .data
		.src0_channel       (rsp_demux_007_src0_channel),                        //          .channel
		.src0_startofpacket (rsp_demux_007_src0_startofpacket),                  //          .startofpacket
		.src0_endofpacket   (rsp_demux_007_src0_endofpacket)                     //          .endofpacket
	);

	microprocessor_mm_interconnect_0_rsp_demux rsp_demux_008 (
		.clk                (clk_0_clk_clk),                                     //       clk.clk
		.reset              (nios2_processor_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_010_src_ready),                              //      sink.ready
		.sink_channel       (router_010_src_channel),                            //          .channel
		.sink_data          (router_010_src_data),                               //          .data
		.sink_startofpacket (router_010_src_startofpacket),                      //          .startofpacket
		.sink_endofpacket   (router_010_src_endofpacket),                        //          .endofpacket
		.sink_valid         (router_010_src_valid),                              //          .valid
		.src0_ready         (rsp_demux_008_src0_ready),                          //      src0.ready
		.src0_valid         (rsp_demux_008_src0_valid),                          //          .valid
		.src0_data          (rsp_demux_008_src0_data),                           //          .data
		.src0_channel       (rsp_demux_008_src0_channel),                        //          .channel
		.src0_startofpacket (rsp_demux_008_src0_startofpacket),                  //          .startofpacket
		.src0_endofpacket   (rsp_demux_008_src0_endofpacket)                     //          .endofpacket
	);

	microprocessor_mm_interconnect_0_rsp_demux rsp_demux_009 (
		.clk                (clk_0_clk_clk),                                     //       clk.clk
		.reset              (nios2_processor_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_011_src_ready),                              //      sink.ready
		.sink_channel       (router_011_src_channel),                            //          .channel
		.sink_data          (router_011_src_data),                               //          .data
		.sink_startofpacket (router_011_src_startofpacket),                      //          .startofpacket
		.sink_endofpacket   (router_011_src_endofpacket),                        //          .endofpacket
		.sink_valid         (router_011_src_valid),                              //          .valid
		.src0_ready         (rsp_demux_009_src0_ready),                          //      src0.ready
		.src0_valid         (rsp_demux_009_src0_valid),                          //          .valid
		.src0_data          (rsp_demux_009_src0_data),                           //          .data
		.src0_channel       (rsp_demux_009_src0_channel),                        //          .channel
		.src0_startofpacket (rsp_demux_009_src0_startofpacket),                  //          .startofpacket
		.src0_endofpacket   (rsp_demux_009_src0_endofpacket)                     //          .endofpacket
	);

	microprocessor_mm_interconnect_0_rsp_demux rsp_demux_010 (
		.clk                (clk_0_clk_clk),                                     //       clk.clk
		.reset              (nios2_processor_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_012_src_ready),                              //      sink.ready
		.sink_channel       (router_012_src_channel),                            //          .channel
		.sink_data          (router_012_src_data),                               //          .data
		.sink_startofpacket (router_012_src_startofpacket),                      //          .startofpacket
		.sink_endofpacket   (router_012_src_endofpacket),                        //          .endofpacket
		.sink_valid         (router_012_src_valid),                              //          .valid
		.src0_ready         (rsp_demux_010_src0_ready),                          //      src0.ready
		.src0_valid         (rsp_demux_010_src0_valid),                          //          .valid
		.src0_data          (rsp_demux_010_src0_data),                           //          .data
		.src0_channel       (rsp_demux_010_src0_channel),                        //          .channel
		.src0_startofpacket (rsp_demux_010_src0_startofpacket),                  //          .startofpacket
		.src0_endofpacket   (rsp_demux_010_src0_endofpacket)                     //          .endofpacket
	);

	microprocessor_mm_interconnect_0_rsp_demux rsp_demux_011 (
		.clk                (clk_0_clk_clk),                                     //       clk.clk
		.reset              (nios2_processor_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_013_src_ready),                              //      sink.ready
		.sink_channel       (router_013_src_channel),                            //          .channel
		.sink_data          (router_013_src_data),                               //          .data
		.sink_startofpacket (router_013_src_startofpacket),                      //          .startofpacket
		.sink_endofpacket   (router_013_src_endofpacket),                        //          .endofpacket
		.sink_valid         (router_013_src_valid),                              //          .valid
		.src0_ready         (rsp_demux_011_src0_ready),                          //      src0.ready
		.src0_valid         (rsp_demux_011_src0_valid),                          //          .valid
		.src0_data          (rsp_demux_011_src0_data),                           //          .data
		.src0_channel       (rsp_demux_011_src0_channel),                        //          .channel
		.src0_startofpacket (rsp_demux_011_src0_startofpacket),                  //          .startofpacket
		.src0_endofpacket   (rsp_demux_011_src0_endofpacket)                     //          .endofpacket
	);

	microprocessor_mm_interconnect_0_rsp_demux rsp_demux_012 (
		.clk                (clk_0_clk_clk),                                     //       clk.clk
		.reset              (nios2_processor_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_014_src_ready),                              //      sink.ready
		.sink_channel       (router_014_src_channel),                            //          .channel
		.sink_data          (router_014_src_data),                               //          .data
		.sink_startofpacket (router_014_src_startofpacket),                      //          .startofpacket
		.sink_endofpacket   (router_014_src_endofpacket),                        //          .endofpacket
		.sink_valid         (router_014_src_valid),                              //          .valid
		.src0_ready         (rsp_demux_012_src0_ready),                          //      src0.ready
		.src0_valid         (rsp_demux_012_src0_valid),                          //          .valid
		.src0_data          (rsp_demux_012_src0_data),                           //          .data
		.src0_channel       (rsp_demux_012_src0_channel),                        //          .channel
		.src0_startofpacket (rsp_demux_012_src0_startofpacket),                  //          .startofpacket
		.src0_endofpacket   (rsp_demux_012_src0_endofpacket)                     //          .endofpacket
	);

	microprocessor_mm_interconnect_0_rsp_demux rsp_demux_013 (
		.clk                (clk_0_clk_clk),                                     //       clk.clk
		.reset              (nios2_processor_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_015_src_ready),                              //      sink.ready
		.sink_channel       (router_015_src_channel),                            //          .channel
		.sink_data          (router_015_src_data),                               //          .data
		.sink_startofpacket (router_015_src_startofpacket),                      //          .startofpacket
		.sink_endofpacket   (router_015_src_endofpacket),                        //          .endofpacket
		.sink_valid         (router_015_src_valid),                              //          .valid
		.src0_ready         (rsp_demux_013_src0_ready),                          //      src0.ready
		.src0_valid         (rsp_demux_013_src0_valid),                          //          .valid
		.src0_data          (rsp_demux_013_src0_data),                           //          .data
		.src0_channel       (rsp_demux_013_src0_channel),                        //          .channel
		.src0_startofpacket (rsp_demux_013_src0_startofpacket),                  //          .startofpacket
		.src0_endofpacket   (rsp_demux_013_src0_endofpacket)                     //          .endofpacket
	);

	microprocessor_mm_interconnect_0_rsp_demux rsp_demux_014 (
		.clk                (clk_0_clk_clk),                                     //       clk.clk
		.reset              (nios2_processor_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_016_src_ready),                              //      sink.ready
		.sink_channel       (router_016_src_channel),                            //          .channel
		.sink_data          (router_016_src_data),                               //          .data
		.sink_startofpacket (router_016_src_startofpacket),                      //          .startofpacket
		.sink_endofpacket   (router_016_src_endofpacket),                        //          .endofpacket
		.sink_valid         (router_016_src_valid),                              //          .valid
		.src0_ready         (rsp_demux_014_src0_ready),                          //      src0.ready
		.src0_valid         (rsp_demux_014_src0_valid),                          //          .valid
		.src0_data          (rsp_demux_014_src0_data),                           //          .data
		.src0_channel       (rsp_demux_014_src0_channel),                        //          .channel
		.src0_startofpacket (rsp_demux_014_src0_startofpacket),                  //          .startofpacket
		.src0_endofpacket   (rsp_demux_014_src0_endofpacket)                     //          .endofpacket
	);

	microprocessor_mm_interconnect_0_rsp_demux rsp_demux_015 (
		.clk                (clk_0_clk_clk),                                     //       clk.clk
		.reset              (nios2_processor_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_017_src_ready),                              //      sink.ready
		.sink_channel       (router_017_src_channel),                            //          .channel
		.sink_data          (router_017_src_data),                               //          .data
		.sink_startofpacket (router_017_src_startofpacket),                      //          .startofpacket
		.sink_endofpacket   (router_017_src_endofpacket),                        //          .endofpacket
		.sink_valid         (router_017_src_valid),                              //          .valid
		.src0_ready         (rsp_demux_015_src0_ready),                          //      src0.ready
		.src0_valid         (rsp_demux_015_src0_valid),                          //          .valid
		.src0_data          (rsp_demux_015_src0_data),                           //          .data
		.src0_channel       (rsp_demux_015_src0_channel),                        //          .channel
		.src0_startofpacket (rsp_demux_015_src0_startofpacket),                  //          .startofpacket
		.src0_endofpacket   (rsp_demux_015_src0_endofpacket)                     //          .endofpacket
	);

	microprocessor_mm_interconnect_0_rsp_demux rsp_demux_016 (
		.clk                (clk_0_clk_clk),                                     //       clk.clk
		.reset              (nios2_processor_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_018_src_ready),                              //      sink.ready
		.sink_channel       (router_018_src_channel),                            //          .channel
		.sink_data          (router_018_src_data),                               //          .data
		.sink_startofpacket (router_018_src_startofpacket),                      //          .startofpacket
		.sink_endofpacket   (router_018_src_endofpacket),                        //          .endofpacket
		.sink_valid         (router_018_src_valid),                              //          .valid
		.src0_ready         (rsp_demux_016_src0_ready),                          //      src0.ready
		.src0_valid         (rsp_demux_016_src0_valid),                          //          .valid
		.src0_data          (rsp_demux_016_src0_data),                           //          .data
		.src0_channel       (rsp_demux_016_src0_channel),                        //          .channel
		.src0_startofpacket (rsp_demux_016_src0_startofpacket),                  //          .startofpacket
		.src0_endofpacket   (rsp_demux_016_src0_endofpacket)                     //          .endofpacket
	);

	microprocessor_mm_interconnect_0_rsp_demux rsp_demux_017 (
		.clk                (clk_0_clk_clk),                                     //       clk.clk
		.reset              (nios2_processor_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_019_src_ready),                              //      sink.ready
		.sink_channel       (router_019_src_channel),                            //          .channel
		.sink_data          (router_019_src_data),                               //          .data
		.sink_startofpacket (router_019_src_startofpacket),                      //          .startofpacket
		.sink_endofpacket   (router_019_src_endofpacket),                        //          .endofpacket
		.sink_valid         (router_019_src_valid),                              //          .valid
		.src0_ready         (rsp_demux_017_src0_ready),                          //      src0.ready
		.src0_valid         (rsp_demux_017_src0_valid),                          //          .valid
		.src0_data          (rsp_demux_017_src0_data),                           //          .data
		.src0_channel       (rsp_demux_017_src0_channel),                        //          .channel
		.src0_startofpacket (rsp_demux_017_src0_startofpacket),                  //          .startofpacket
		.src0_endofpacket   (rsp_demux_017_src0_endofpacket)                     //          .endofpacket
	);

	microprocessor_mm_interconnect_0_rsp_mux rsp_mux (
		.clk                  (clk_0_clk_clk),                                     //       clk.clk
		.reset                (nios2_processor_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready            (rsp_mux_src_ready),                                 //       src.ready
		.src_valid            (rsp_mux_src_valid),                                 //          .valid
		.src_data             (rsp_mux_src_data),                                  //          .data
		.src_channel          (rsp_mux_src_channel),                               //          .channel
		.src_startofpacket    (rsp_mux_src_startofpacket),                         //          .startofpacket
		.src_endofpacket      (rsp_mux_src_endofpacket),                           //          .endofpacket
		.sink0_ready          (rsp_demux_src0_ready),                              //     sink0.ready
		.sink0_valid          (rsp_demux_src0_valid),                              //          .valid
		.sink0_channel        (rsp_demux_src0_channel),                            //          .channel
		.sink0_data           (rsp_demux_src0_data),                               //          .data
		.sink0_startofpacket  (rsp_demux_src0_startofpacket),                      //          .startofpacket
		.sink0_endofpacket    (rsp_demux_src0_endofpacket),                        //          .endofpacket
		.sink1_ready          (rsp_demux_001_src0_ready),                          //     sink1.ready
		.sink1_valid          (rsp_demux_001_src0_valid),                          //          .valid
		.sink1_channel        (rsp_demux_001_src0_channel),                        //          .channel
		.sink1_data           (rsp_demux_001_src0_data),                           //          .data
		.sink1_startofpacket  (rsp_demux_001_src0_startofpacket),                  //          .startofpacket
		.sink1_endofpacket    (rsp_demux_001_src0_endofpacket),                    //          .endofpacket
		.sink2_ready          (rsp_demux_002_src0_ready),                          //     sink2.ready
		.sink2_valid          (rsp_demux_002_src0_valid),                          //          .valid
		.sink2_channel        (rsp_demux_002_src0_channel),                        //          .channel
		.sink2_data           (rsp_demux_002_src0_data),                           //          .data
		.sink2_startofpacket  (rsp_demux_002_src0_startofpacket),                  //          .startofpacket
		.sink2_endofpacket    (rsp_demux_002_src0_endofpacket),                    //          .endofpacket
		.sink3_ready          (rsp_demux_003_src0_ready),                          //     sink3.ready
		.sink3_valid          (rsp_demux_003_src0_valid),                          //          .valid
		.sink3_channel        (rsp_demux_003_src0_channel),                        //          .channel
		.sink3_data           (rsp_demux_003_src0_data),                           //          .data
		.sink3_startofpacket  (rsp_demux_003_src0_startofpacket),                  //          .startofpacket
		.sink3_endofpacket    (rsp_demux_003_src0_endofpacket),                    //          .endofpacket
		.sink4_ready          (rsp_demux_004_src0_ready),                          //     sink4.ready
		.sink4_valid          (rsp_demux_004_src0_valid),                          //          .valid
		.sink4_channel        (rsp_demux_004_src0_channel),                        //          .channel
		.sink4_data           (rsp_demux_004_src0_data),                           //          .data
		.sink4_startofpacket  (rsp_demux_004_src0_startofpacket),                  //          .startofpacket
		.sink4_endofpacket    (rsp_demux_004_src0_endofpacket),                    //          .endofpacket
		.sink5_ready          (rsp_demux_005_src0_ready),                          //     sink5.ready
		.sink5_valid          (rsp_demux_005_src0_valid),                          //          .valid
		.sink5_channel        (rsp_demux_005_src0_channel),                        //          .channel
		.sink5_data           (rsp_demux_005_src0_data),                           //          .data
		.sink5_startofpacket  (rsp_demux_005_src0_startofpacket),                  //          .startofpacket
		.sink5_endofpacket    (rsp_demux_005_src0_endofpacket),                    //          .endofpacket
		.sink6_ready          (rsp_demux_006_src0_ready),                          //     sink6.ready
		.sink6_valid          (rsp_demux_006_src0_valid),                          //          .valid
		.sink6_channel        (rsp_demux_006_src0_channel),                        //          .channel
		.sink6_data           (rsp_demux_006_src0_data),                           //          .data
		.sink6_startofpacket  (rsp_demux_006_src0_startofpacket),                  //          .startofpacket
		.sink6_endofpacket    (rsp_demux_006_src0_endofpacket),                    //          .endofpacket
		.sink7_ready          (rsp_demux_007_src0_ready),                          //     sink7.ready
		.sink7_valid          (rsp_demux_007_src0_valid),                          //          .valid
		.sink7_channel        (rsp_demux_007_src0_channel),                        //          .channel
		.sink7_data           (rsp_demux_007_src0_data),                           //          .data
		.sink7_startofpacket  (rsp_demux_007_src0_startofpacket),                  //          .startofpacket
		.sink7_endofpacket    (rsp_demux_007_src0_endofpacket),                    //          .endofpacket
		.sink8_ready          (rsp_demux_008_src0_ready),                          //     sink8.ready
		.sink8_valid          (rsp_demux_008_src0_valid),                          //          .valid
		.sink8_channel        (rsp_demux_008_src0_channel),                        //          .channel
		.sink8_data           (rsp_demux_008_src0_data),                           //          .data
		.sink8_startofpacket  (rsp_demux_008_src0_startofpacket),                  //          .startofpacket
		.sink8_endofpacket    (rsp_demux_008_src0_endofpacket),                    //          .endofpacket
		.sink9_ready          (rsp_demux_009_src0_ready),                          //     sink9.ready
		.sink9_valid          (rsp_demux_009_src0_valid),                          //          .valid
		.sink9_channel        (rsp_demux_009_src0_channel),                        //          .channel
		.sink9_data           (rsp_demux_009_src0_data),                           //          .data
		.sink9_startofpacket  (rsp_demux_009_src0_startofpacket),                  //          .startofpacket
		.sink9_endofpacket    (rsp_demux_009_src0_endofpacket),                    //          .endofpacket
		.sink10_ready         (rsp_demux_010_src0_ready),                          //    sink10.ready
		.sink10_valid         (rsp_demux_010_src0_valid),                          //          .valid
		.sink10_channel       (rsp_demux_010_src0_channel),                        //          .channel
		.sink10_data          (rsp_demux_010_src0_data),                           //          .data
		.sink10_startofpacket (rsp_demux_010_src0_startofpacket),                  //          .startofpacket
		.sink10_endofpacket   (rsp_demux_010_src0_endofpacket),                    //          .endofpacket
		.sink11_ready         (rsp_demux_011_src0_ready),                          //    sink11.ready
		.sink11_valid         (rsp_demux_011_src0_valid),                          //          .valid
		.sink11_channel       (rsp_demux_011_src0_channel),                        //          .channel
		.sink11_data          (rsp_demux_011_src0_data),                           //          .data
		.sink11_startofpacket (rsp_demux_011_src0_startofpacket),                  //          .startofpacket
		.sink11_endofpacket   (rsp_demux_011_src0_endofpacket),                    //          .endofpacket
		.sink12_ready         (rsp_demux_012_src0_ready),                          //    sink12.ready
		.sink12_valid         (rsp_demux_012_src0_valid),                          //          .valid
		.sink12_channel       (rsp_demux_012_src0_channel),                        //          .channel
		.sink12_data          (rsp_demux_012_src0_data),                           //          .data
		.sink12_startofpacket (rsp_demux_012_src0_startofpacket),                  //          .startofpacket
		.sink12_endofpacket   (rsp_demux_012_src0_endofpacket),                    //          .endofpacket
		.sink13_ready         (rsp_demux_013_src0_ready),                          //    sink13.ready
		.sink13_valid         (rsp_demux_013_src0_valid),                          //          .valid
		.sink13_channel       (rsp_demux_013_src0_channel),                        //          .channel
		.sink13_data          (rsp_demux_013_src0_data),                           //          .data
		.sink13_startofpacket (rsp_demux_013_src0_startofpacket),                  //          .startofpacket
		.sink13_endofpacket   (rsp_demux_013_src0_endofpacket),                    //          .endofpacket
		.sink14_ready         (rsp_demux_014_src0_ready),                          //    sink14.ready
		.sink14_valid         (rsp_demux_014_src0_valid),                          //          .valid
		.sink14_channel       (rsp_demux_014_src0_channel),                        //          .channel
		.sink14_data          (rsp_demux_014_src0_data),                           //          .data
		.sink14_startofpacket (rsp_demux_014_src0_startofpacket),                  //          .startofpacket
		.sink14_endofpacket   (rsp_demux_014_src0_endofpacket),                    //          .endofpacket
		.sink15_ready         (rsp_demux_015_src0_ready),                          //    sink15.ready
		.sink15_valid         (rsp_demux_015_src0_valid),                          //          .valid
		.sink15_channel       (rsp_demux_015_src0_channel),                        //          .channel
		.sink15_data          (rsp_demux_015_src0_data),                           //          .data
		.sink15_startofpacket (rsp_demux_015_src0_startofpacket),                  //          .startofpacket
		.sink15_endofpacket   (rsp_demux_015_src0_endofpacket),                    //          .endofpacket
		.sink16_ready         (rsp_demux_016_src0_ready),                          //    sink16.ready
		.sink16_valid         (rsp_demux_016_src0_valid),                          //          .valid
		.sink16_channel       (rsp_demux_016_src0_channel),                        //          .channel
		.sink16_data          (rsp_demux_016_src0_data),                           //          .data
		.sink16_startofpacket (rsp_demux_016_src0_startofpacket),                  //          .startofpacket
		.sink16_endofpacket   (rsp_demux_016_src0_endofpacket),                    //          .endofpacket
		.sink17_ready         (rsp_demux_017_src0_ready),                          //    sink17.ready
		.sink17_valid         (rsp_demux_017_src0_valid),                          //          .valid
		.sink17_channel       (rsp_demux_017_src0_channel),                        //          .channel
		.sink17_data          (rsp_demux_017_src0_data),                           //          .data
		.sink17_startofpacket (rsp_demux_017_src0_startofpacket),                  //          .startofpacket
		.sink17_endofpacket   (rsp_demux_017_src0_endofpacket)                     //          .endofpacket
	);

	microprocessor_mm_interconnect_0_rsp_mux_001 rsp_mux_001 (
		.clk                 (clk_0_clk_clk),                                     //       clk.clk
		.reset               (nios2_processor_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_001_src_ready),                             //       src.ready
		.src_valid           (rsp_mux_001_src_valid),                             //          .valid
		.src_data            (rsp_mux_001_src_data),                              //          .data
		.src_channel         (rsp_mux_001_src_channel),                           //          .channel
		.src_startofpacket   (rsp_mux_001_src_startofpacket),                     //          .startofpacket
		.src_endofpacket     (rsp_mux_001_src_endofpacket),                       //          .endofpacket
		.sink0_ready         (rsp_demux_001_src1_ready),                          //     sink0.ready
		.sink0_valid         (rsp_demux_001_src1_valid),                          //          .valid
		.sink0_channel       (rsp_demux_001_src1_channel),                        //          .channel
		.sink0_data          (rsp_demux_001_src1_data),                           //          .data
		.sink0_startofpacket (rsp_demux_001_src1_startofpacket),                  //          .startofpacket
		.sink0_endofpacket   (rsp_demux_001_src1_endofpacket),                    //          .endofpacket
		.sink1_ready         (rsp_demux_002_src1_ready),                          //     sink1.ready
		.sink1_valid         (rsp_demux_002_src1_valid),                          //          .valid
		.sink1_channel       (rsp_demux_002_src1_channel),                        //          .channel
		.sink1_data          (rsp_demux_002_src1_data),                           //          .data
		.sink1_startofpacket (rsp_demux_002_src1_startofpacket),                  //          .startofpacket
		.sink1_endofpacket   (rsp_demux_002_src1_endofpacket)                     //          .endofpacket
	);

	microprocessor_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter (
		.in_clk_0_clk   (clk_0_clk_clk),                                          // in_clk_0.clk
		.in_rst_0_reset (nios2_processor_reset_reset_bridge_in_reset_reset),      // in_rst_0.reset
		.in_0_data      (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_out_0_data),                           //    out_0.data
		.out_0_valid    (avalon_st_adapter_out_0_valid),                          //         .valid
		.out_0_ready    (avalon_st_adapter_out_0_ready),                          //         .ready
		.out_0_error    (avalon_st_adapter_out_0_error)                           //         .error
	);

	microprocessor_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_001 (
		.in_clk_0_clk   (clk_0_clk_clk),                                              // in_clk_0.clk
		.in_rst_0_reset (nios2_processor_reset_reset_bridge_in_reset_reset),          // in_rst_0.reset
		.in_0_data      (nios2_processor_debug_mem_slave_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (nios2_processor_debug_mem_slave_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (nios2_processor_debug_mem_slave_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_001_out_0_data),                           //    out_0.data
		.out_0_valid    (avalon_st_adapter_001_out_0_valid),                          //         .valid
		.out_0_ready    (avalon_st_adapter_001_out_0_ready),                          //         .ready
		.out_0_error    (avalon_st_adapter_001_out_0_error)                           //         .error
	);

	microprocessor_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_002 (
		.in_clk_0_clk   (clk_0_clk_clk),                                     // in_clk_0.clk
		.in_rst_0_reset (nios2_processor_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (onchip_memory_s1_agent_rdata_fifo_src_data),        //     in_0.data
		.in_0_valid     (onchip_memory_s1_agent_rdata_fifo_src_valid),       //         .valid
		.in_0_ready     (onchip_memory_s1_agent_rdata_fifo_src_ready),       //         .ready
		.out_0_data     (avalon_st_adapter_002_out_0_data),                  //    out_0.data
		.out_0_valid    (avalon_st_adapter_002_out_0_valid),                 //         .valid
		.out_0_ready    (avalon_st_adapter_002_out_0_ready),                 //         .ready
		.out_0_error    (avalon_st_adapter_002_out_0_error)                  //         .error
	);

	microprocessor_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_003 (
		.in_clk_0_clk   (clk_0_clk_clk),                                     // in_clk_0.clk
		.in_rst_0_reset (nios2_processor_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (filling_s1_agent_rdata_fifo_src_data),              //     in_0.data
		.in_0_valid     (filling_s1_agent_rdata_fifo_src_valid),             //         .valid
		.in_0_ready     (filling_s1_agent_rdata_fifo_src_ready),             //         .ready
		.out_0_data     (avalon_st_adapter_003_out_0_data),                  //    out_0.data
		.out_0_valid    (avalon_st_adapter_003_out_0_valid),                 //         .valid
		.out_0_ready    (avalon_st_adapter_003_out_0_ready),                 //         .ready
		.out_0_error    (avalon_st_adapter_003_out_0_error)                  //         .error
	);

	microprocessor_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_004 (
		.in_clk_0_clk   (clk_0_clk_clk),                                     // in_clk_0.clk
		.in_rst_0_reset (nios2_processor_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (draining_s1_agent_rdata_fifo_src_data),             //     in_0.data
		.in_0_valid     (draining_s1_agent_rdata_fifo_src_valid),            //         .valid
		.in_0_ready     (draining_s1_agent_rdata_fifo_src_ready),            //         .ready
		.out_0_data     (avalon_st_adapter_004_out_0_data),                  //    out_0.data
		.out_0_valid    (avalon_st_adapter_004_out_0_valid),                 //         .valid
		.out_0_ready    (avalon_st_adapter_004_out_0_ready),                 //         .ready
		.out_0_error    (avalon_st_adapter_004_out_0_error)                  //         .error
	);

	microprocessor_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_005 (
		.in_clk_0_clk   (clk_0_clk_clk),                                     // in_clk_0.clk
		.in_rst_0_reset (nios2_processor_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (innerdoor_s1_agent_rdata_fifo_src_data),            //     in_0.data
		.in_0_valid     (innerdoor_s1_agent_rdata_fifo_src_valid),           //         .valid
		.in_0_ready     (innerdoor_s1_agent_rdata_fifo_src_ready),           //         .ready
		.out_0_data     (avalon_st_adapter_005_out_0_data),                  //    out_0.data
		.out_0_valid    (avalon_st_adapter_005_out_0_valid),                 //         .valid
		.out_0_ready    (avalon_st_adapter_005_out_0_ready),                 //         .ready
		.out_0_error    (avalon_st_adapter_005_out_0_error)                  //         .error
	);

	microprocessor_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_006 (
		.in_clk_0_clk   (clk_0_clk_clk),                                     // in_clk_0.clk
		.in_rst_0_reset (nios2_processor_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (outerdoor_s1_agent_rdata_fifo_src_data),            //     in_0.data
		.in_0_valid     (outerdoor_s1_agent_rdata_fifo_src_valid),           //         .valid
		.in_0_ready     (outerdoor_s1_agent_rdata_fifo_src_ready),           //         .ready
		.out_0_data     (avalon_st_adapter_006_out_0_data),                  //    out_0.data
		.out_0_valid    (avalon_st_adapter_006_out_0_valid),                 //         .valid
		.out_0_ready    (avalon_st_adapter_006_out_0_ready),                 //         .ready
		.out_0_error    (avalon_st_adapter_006_out_0_error)                  //         .error
	);

	microprocessor_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_007 (
		.in_clk_0_clk   (clk_0_clk_clk),                                     // in_clk_0.clk
		.in_rst_0_reset (nios2_processor_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (resetleds_s1_agent_rdata_fifo_src_data),            //     in_0.data
		.in_0_valid     (resetleds_s1_agent_rdata_fifo_src_valid),           //         .valid
		.in_0_ready     (resetleds_s1_agent_rdata_fifo_src_ready),           //         .ready
		.out_0_data     (avalon_st_adapter_007_out_0_data),                  //    out_0.data
		.out_0_valid    (avalon_st_adapter_007_out_0_valid),                 //         .valid
		.out_0_ready    (avalon_st_adapter_007_out_0_ready),                 //         .ready
		.out_0_error    (avalon_st_adapter_007_out_0_error)                  //         .error
	);

	microprocessor_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_008 (
		.in_clk_0_clk   (clk_0_clk_clk),                                     // in_clk_0.clk
		.in_rst_0_reset (nios2_processor_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (bathleaving_s1_agent_rdata_fifo_src_data),          //     in_0.data
		.in_0_valid     (bathleaving_s1_agent_rdata_fifo_src_valid),         //         .valid
		.in_0_ready     (bathleaving_s1_agent_rdata_fifo_src_ready),         //         .ready
		.out_0_data     (avalon_st_adapter_008_out_0_data),                  //    out_0.data
		.out_0_valid    (avalon_st_adapter_008_out_0_valid),                 //         .valid
		.out_0_ready    (avalon_st_adapter_008_out_0_ready),                 //         .ready
		.out_0_error    (avalon_st_adapter_008_out_0_error)                  //         .error
	);

	microprocessor_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_009 (
		.in_clk_0_clk   (clk_0_clk_clk),                                     // in_clk_0.clk
		.in_rst_0_reset (nios2_processor_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (batharriving_s1_agent_rdata_fifo_src_data),         //     in_0.data
		.in_0_valid     (batharriving_s1_agent_rdata_fifo_src_valid),        //         .valid
		.in_0_ready     (batharriving_s1_agent_rdata_fifo_src_ready),        //         .ready
		.out_0_data     (avalon_st_adapter_009_out_0_data),                  //    out_0.data
		.out_0_valid    (avalon_st_adapter_009_out_0_valid),                 //         .valid
		.out_0_ready    (avalon_st_adapter_009_out_0_ready),                 //         .ready
		.out_0_error    (avalon_st_adapter_009_out_0_error)                  //         .error
	);

	microprocessor_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_010 (
		.in_clk_0_clk   (clk_0_clk_clk),                                     // in_clk_0.clk
		.in_rst_0_reset (nios2_processor_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (personcheck_s1_agent_rdata_fifo_src_data),          //     in_0.data
		.in_0_valid     (personcheck_s1_agent_rdata_fifo_src_valid),         //         .valid
		.in_0_ready     (personcheck_s1_agent_rdata_fifo_src_ready),         //         .ready
		.out_0_data     (avalon_st_adapter_010_out_0_data),                  //    out_0.data
		.out_0_valid    (avalon_st_adapter_010_out_0_valid),                 //         .valid
		.out_0_ready    (avalon_st_adapter_010_out_0_ready),                 //         .ready
		.out_0_error    (avalon_st_adapter_010_out_0_error)                  //         .error
	);

	microprocessor_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_011 (
		.in_clk_0_clk   (clk_0_clk_clk),                                     // in_clk_0.clk
		.in_rst_0_reset (nios2_processor_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (pressurecheck_s1_agent_rdata_fifo_src_data),        //     in_0.data
		.in_0_valid     (pressurecheck_s1_agent_rdata_fifo_src_valid),       //         .valid
		.in_0_ready     (pressurecheck_s1_agent_rdata_fifo_src_ready),       //         .ready
		.out_0_data     (avalon_st_adapter_011_out_0_data),                  //    out_0.data
		.out_0_valid    (avalon_st_adapter_011_out_0_valid),                 //         .valid
		.out_0_ready    (avalon_st_adapter_011_out_0_ready),                 //         .ready
		.out_0_error    (avalon_st_adapter_011_out_0_error)                  //         .error
	);

	microprocessor_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_012 (
		.in_clk_0_clk   (clk_0_clk_clk),                                     // in_clk_0.clk
		.in_rst_0_reset (nios2_processor_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (innerdoorswitch_s1_agent_rdata_fifo_src_data),      //     in_0.data
		.in_0_valid     (innerdoorswitch_s1_agent_rdata_fifo_src_valid),     //         .valid
		.in_0_ready     (innerdoorswitch_s1_agent_rdata_fifo_src_ready),     //         .ready
		.out_0_data     (avalon_st_adapter_012_out_0_data),                  //    out_0.data
		.out_0_valid    (avalon_st_adapter_012_out_0_valid),                 //         .valid
		.out_0_ready    (avalon_st_adapter_012_out_0_ready),                 //         .ready
		.out_0_error    (avalon_st_adapter_012_out_0_error)                  //         .error
	);

	microprocessor_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_013 (
		.in_clk_0_clk   (clk_0_clk_clk),                                     // in_clk_0.clk
		.in_rst_0_reset (nios2_processor_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (outerdoorswitch_s1_agent_rdata_fifo_src_data),      //     in_0.data
		.in_0_valid     (outerdoorswitch_s1_agent_rdata_fifo_src_valid),     //         .valid
		.in_0_ready     (outerdoorswitch_s1_agent_rdata_fifo_src_ready),     //         .ready
		.out_0_data     (avalon_st_adapter_013_out_0_data),                  //    out_0.data
		.out_0_valid    (avalon_st_adapter_013_out_0_valid),                 //         .valid
		.out_0_ready    (avalon_st_adapter_013_out_0_ready),                 //         .ready
		.out_0_error    (avalon_st_adapter_013_out_0_error)                  //         .error
	);

	microprocessor_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_014 (
		.in_clk_0_clk   (clk_0_clk_clk),                                     // in_clk_0.clk
		.in_rst_0_reset (nios2_processor_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (drainfinished_s1_agent_rdata_fifo_src_data),        //     in_0.data
		.in_0_valid     (drainfinished_s1_agent_rdata_fifo_src_valid),       //         .valid
		.in_0_ready     (drainfinished_s1_agent_rdata_fifo_src_ready),       //         .ready
		.out_0_data     (avalon_st_adapter_014_out_0_data),                  //    out_0.data
		.out_0_valid    (avalon_st_adapter_014_out_0_valid),                 //         .valid
		.out_0_ready    (avalon_st_adapter_014_out_0_ready),                 //         .ready
		.out_0_error    (avalon_st_adapter_014_out_0_error)                  //         .error
	);

	microprocessor_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_015 (
		.in_clk_0_clk   (clk_0_clk_clk),                                     // in_clk_0.clk
		.in_rst_0_reset (nios2_processor_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (fillfinished_s1_agent_rdata_fifo_src_data),         //     in_0.data
		.in_0_valid     (fillfinished_s1_agent_rdata_fifo_src_valid),        //         .valid
		.in_0_ready     (fillfinished_s1_agent_rdata_fifo_src_ready),        //         .ready
		.out_0_data     (avalon_st_adapter_015_out_0_data),                  //    out_0.data
		.out_0_valid    (avalon_st_adapter_015_out_0_valid),                 //         .valid
		.out_0_ready    (avalon_st_adapter_015_out_0_ready),                 //         .ready
		.out_0_error    (avalon_st_adapter_015_out_0_error)                  //         .error
	);

	microprocessor_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_016 (
		.in_clk_0_clk   (clk_0_clk_clk),                                     // in_clk_0.clk
		.in_rst_0_reset (nios2_processor_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (waitfinished_s1_agent_rdata_fifo_src_data),         //     in_0.data
		.in_0_valid     (waitfinished_s1_agent_rdata_fifo_src_valid),        //         .valid
		.in_0_ready     (waitfinished_s1_agent_rdata_fifo_src_ready),        //         .ready
		.out_0_data     (avalon_st_adapter_016_out_0_data),                  //    out_0.data
		.out_0_valid    (avalon_st_adapter_016_out_0_valid),                 //         .valid
		.out_0_ready    (avalon_st_adapter_016_out_0_ready),                 //         .ready
		.out_0_error    (avalon_st_adapter_016_out_0_error)                  //         .error
	);

	microprocessor_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_017 (
		.in_clk_0_clk   (clk_0_clk_clk),                                     // in_clk_0.clk
		.in_rst_0_reset (nios2_processor_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (waiting_s1_agent_rdata_fifo_src_data),              //     in_0.data
		.in_0_valid     (waiting_s1_agent_rdata_fifo_src_valid),             //         .valid
		.in_0_ready     (waiting_s1_agent_rdata_fifo_src_ready),             //         .ready
		.out_0_data     (avalon_st_adapter_017_out_0_data),                  //    out_0.data
		.out_0_valid    (avalon_st_adapter_017_out_0_valid),                 //         .valid
		.out_0_ready    (avalon_st_adapter_017_out_0_ready),                 //         .ready
		.out_0_error    (avalon_st_adapter_017_out_0_error)                  //         .error
	);

endmodule
