
hello_word.elf:     file format elf32-littlenios2
hello_word.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00001020

Program Header:
    LOAD off    0x00001000 vaddr 0x00001000 paddr 0x00001000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00001020 paddr 0x00001020 align 2**12
         filesz 0x0000051c memsz 0x0000051c flags r-x
    LOAD off    0x0000153c vaddr 0x0000153c paddr 0x000015ac align 2**12
         filesz 0x00000070 memsz 0x00000070 flags rw-
    LOAD off    0x0000161c vaddr 0x0000161c paddr 0x0000161c align 2**12
         filesz 0x00000000 memsz 0x0000000c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00001000  00001000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00001020  00001020  000015ac  2**0
                  CONTENTS
  2 .text         000004f8  00001020  00001020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000024  00001518  00001518  00001518  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000070  0000153c  000015ac  0000153c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000000c  0000161c  0000161c  0000161c  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory 00000000  00001628  00001628  000015ac  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  000015ac  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000001c8  00000000  00000000  000015d0  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00001343  00000000  00000000  00001798  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000856  00000000  00000000  00002adb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000091b  00000000  00000000  00003331  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000002e4  00000000  00000000  00003c4c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000007b5  00000000  00000000  00003f30  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000031  00000000  00000000  000046e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  00004718  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000040  00000000  00000000  00004728  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00005677  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000f  00000000  00000000  0000567a  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00005689  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0000568a  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000009  00000000  00000000  0000568b  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000009  00000000  00000000  00005694  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000009  00000000  00000000  0000569d  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000b  00000000  00000000  000056a6  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000021  00000000  00000000  000056b1  2**0
                  CONTENTS, READONLY
 26 .jdi          000045df  00000000  00000000  000056d2  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     0003871f  00000000  00000000  00009cb1  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00001000 l    d  .entry	00000000 .entry
00001020 l    d  .exceptions	00000000 .exceptions
00001020 l    d  .text	00000000 .text
00001518 l    d  .rodata	00000000 .rodata
0000153c l    d  .rwdata	00000000 .rwdata
0000161c l    d  .bss	00000000 .bss
00001628 l    d  .onchip_memory	00000000 .onchip_memory
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../hello_word_bsp//obj/HAL/src/crt0.o
00001058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 alt_getchar.c
00000000 l    df *ABS*	00000000 alt_load.c
00001138 l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00001494 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 strlen.c
0000121c g     F .text	0000004c alt_main
000015ac g       *ABS*	00000000 __flash_rwdata_start
00001268 g     F .text	00000048 alt_putstr
00001594 g     O .rwdata	00000004 jtag_uart
000014dc g     F .text	00000020 altera_nios2_gen2_irq_init
00001000 g     F .entry	0000000c __reset
00001020 g       *ABS*	00000000 __flash_exceptions_start
00001620 g     O .bss	00000004 alt_argv
00009594 g       *ABS*	00000000 _gp
00001564 g     O .rwdata	00000030 alt_fd_list
00001300 g     F .text	000000e4 altera_avalon_jtag_uart_read
000015a8 g     O .rwdata	00000004 alt_max_fd
00001628 g       *ABS*	00000000 __bss_end
000010d4 g     F .text	00000064 alt_getchar
0000153c g     O .rwdata	00000028 alt_dev_null
00001478 g     F .text	0000001c alt_dcache_flush_all
000015ac g       *ABS*	00000000 __ram_rwdata_end
00001000 g       *ABS*	00000000 __alt_mem_onchip_memory
000015a0 g     O .rwdata	00000008 alt_dev_list
0000153c g       *ABS*	00000000 __ram_rodata_end
00001628 g       *ABS*	00000000 end
00002000 g       *ABS*	00000000 __alt_stack_pointer
000013e4 g     F .text	00000094 altera_avalon_jtag_uart_write
00001020 g     F .text	0000003c _start
000012e4 g     F .text	0000001c alt_sys_init
0000153c g       *ABS*	00000000 __ram_rwdata_start
00001518 g       *ABS*	00000000 __ram_rodata_start
00001628 g       *ABS*	00000000 __alt_stack_base
0000161c g       *ABS*	00000000 __bss_start
0000105c g     F .text	00000078 main
00001624 g     O .bss	00000004 alt_envp
00001518 g       *ABS*	00000000 __flash_rodata_start
000012b0 g     F .text	00000034 alt_irq_init
0000161c g     O .bss	00000004 alt_argc
00001598 g     O .rwdata	00000008 alt_fs_list
00001020 g       *ABS*	00000000 __ram_exceptions_start
000015ac g       *ABS*	00000000 _edata
00001628 g       *ABS*	00000000 _end
00001020 g       *ABS*	00000000 __ram_exceptions_end
00002000 g       *ABS*	00000000 __alt_data_end
0000100c g       .entry	00000000 _exit
000014fc g     F .text	0000001c strlen
000014c0 g     F .text	0000001c alt_icache_flush_all
0000119c g     F .text	00000080 alt_load



Disassembly of section .entry:

00001000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    1000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    1004:	08440814 	ori	at,at,4128
    jmp r1
    1008:	0800683a 	jmp	at

0000100c <_exit>:
	...

Disassembly of section .text:

00001020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    1020:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    1024:	dec80014 	ori	sp,sp,8192
    movhi gp, %hi(_gp)
    1028:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
    102c:	d6a56514 	ori	gp,gp,38292
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    1030:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    1034:	10858714 	ori	r2,r2,5660

    movhi r3, %hi(__bss_end)
    1038:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    103c:	18c58a14 	ori	r3,r3,5672

    beq r2, r3, 1f
    1040:	10c00326 	beq	r2,r3,1050 <_start+0x30>

0:
    stw zero, (r2)
    1044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    1048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    104c:	10fffd36 	bltu	r2,r3,1044 <_gp+0xffff7ab0>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    1050:	000119c0 	call	119c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    1054:	000121c0 	call	121c <alt_main>

00001058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    1058:	003fff06 	br	1058 <_gp+0xffff7ac4>

0000105c <main>:
#define switches (volatile char *) 0x0003000
#define leds (volatile char *) 0x0003010

int main()
{ 
  alt_putstr("Hello from Nios II!\n");
    105c:	01000034 	movhi	r4,0
#include <stdlib.h>
#define switches (volatile char *) 0x0003000
#define leds (volatile char *) 0x0003010

int main()
{ 
    1060:	deffff04 	addi	sp,sp,-4
  alt_putstr("Hello from Nios II!\n");
    1064:	21054604 	addi	r4,r4,5400
#include <stdlib.h>
#define switches (volatile char *) 0x0003000
#define leds (volatile char *) 0x0003010

int main()
{ 
    1068:	dfc00015 	stw	ra,0(sp)
  alt_putstr("Hello from Nios II!\n");
    106c:	00012680 	call	1268 <alt_putstr>


  char c;
  c = alt_getchar();
    1070:	00010d40 	call	10d4 <alt_getchar>

  if (c == 'G') {
    1074:	10803fcc 	andi	r2,r2,255
    1078:	1080201c 	xori	r2,r2,128
    107c:	10bfe004 	addi	r2,r2,-128
    1080:	00c011c4 	movi	r3,71
    1084:	10c00f1e 	bne	r2,r3,10c4 <main+0x68>
	  while (1) {
		  if (((*switches) & 1) == 1) {
    1088:	00cc0004 	movi	r3,12288
    108c:	010c0404 	movi	r4,12304
    1090:	18800003 	ldbu	r2,0(r3)
    1094:	1080004c 	andi	r2,r2,1
    1098:	10000726 	beq	r2,zero,10b8 <main+0x5c>
			  *leds = 0 - (*switches >> 1);
    109c:	18800003 	ldbu	r2,0(r3)
    10a0:	10803fcc 	andi	r2,r2,255
    10a4:	1080201c 	xori	r2,r2,128
    10a8:	10bfe004 	addi	r2,r2,-128
    10ac:	1005d07a 	srai	r2,r2,1
    10b0:	0085c83a 	sub	r2,zero,r2
    10b4:	00000106 	br	10bc <main+0x60>
		  } else {
			  *leds = *switches;
    10b8:	18800003 	ldbu	r2,0(r3)
    10bc:	20800005 	stb	r2,0(r4)
    10c0:	003ff306 	br	1090 <_gp+0xffff7afc>
		  }
	  }
  }
  return 0;
}
    10c4:	0005883a 	mov	r2,zero
    10c8:	dfc00017 	ldw	ra,0(sp)
    10cc:	dec00104 	addi	sp,sp,4
    10d0:	f800283a 	ret

000010d4 <alt_getchar>:
 * Uses the ALT_DRIVER_READ() macro to call directly to driver if available.
 * Otherwise, uses newlib provided getchar() routine.
 */
int 
alt_getchar(void)
{
    10d4:	defffd04 	addi	sp,sp,-12
    10d8:	dfc00215 	stw	ra,8(sp)
    10dc:	df000115 	stw	fp,4(sp)
    10e0:	df000104 	addi	fp,sp,4
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
    10e4:	00800034 	movhi	r2,0
    10e8:	10855904 	addi	r2,r2,5476
    10ec:	10800217 	ldw	r2,8(r2)
    10f0:	01000034 	movhi	r4,0
    10f4:	21056504 	addi	r4,r4,5524
    10f8:	e17fff04 	addi	r5,fp,-4
    10fc:	01800044 	movi	r6,1
    1100:	100f883a 	mov	r7,r2
    1104:	00013000 	call	1300 <altera_avalon_jtag_uart_read>
    1108:	00800216 	blt	zero,r2,1114 <alt_getchar+0x40>
        return -1;
    110c:	00bfffc4 	movi	r2,-1
    1110:	00000406 	br	1124 <alt_getchar+0x50>
    }
    return c;
    1114:	e0bfff03 	ldbu	r2,-4(fp)
    1118:	10803fcc 	andi	r2,r2,255
    111c:	1080201c 	xori	r2,r2,128
    1120:	10bfe004 	addi	r2,r2,-128
#else
    return getchar();
#endif
#endif
}
    1124:	e037883a 	mov	sp,fp
    1128:	dfc00117 	ldw	ra,4(sp)
    112c:	df000017 	ldw	fp,0(sp)
    1130:	dec00204 	addi	sp,sp,8
    1134:	f800283a 	ret

00001138 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    1138:	defffc04 	addi	sp,sp,-16
    113c:	df000315 	stw	fp,12(sp)
    1140:	df000304 	addi	fp,sp,12
    1144:	e13ffd15 	stw	r4,-12(fp)
    1148:	e17ffe15 	stw	r5,-8(fp)
    114c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    1150:	e0fffe17 	ldw	r3,-8(fp)
    1154:	e0bffd17 	ldw	r2,-12(fp)
    1158:	18800c26 	beq	r3,r2,118c <alt_load_section+0x54>
  {
    while( to != end )
    115c:	00000806 	br	1180 <alt_load_section+0x48>
    {
      *to++ = *from++;
    1160:	e0bffe17 	ldw	r2,-8(fp)
    1164:	10c00104 	addi	r3,r2,4
    1168:	e0fffe15 	stw	r3,-8(fp)
    116c:	e0fffd17 	ldw	r3,-12(fp)
    1170:	19000104 	addi	r4,r3,4
    1174:	e13ffd15 	stw	r4,-12(fp)
    1178:	18c00017 	ldw	r3,0(r3)
    117c:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    1180:	e0fffe17 	ldw	r3,-8(fp)
    1184:	e0bfff17 	ldw	r2,-4(fp)
    1188:	18bff51e 	bne	r3,r2,1160 <_gp+0xffff7bcc>
    {
      *to++ = *from++;
    }
  }
}
    118c:	e037883a 	mov	sp,fp
    1190:	df000017 	ldw	fp,0(sp)
    1194:	dec00104 	addi	sp,sp,4
    1198:	f800283a 	ret

0000119c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    119c:	defffe04 	addi	sp,sp,-8
    11a0:	dfc00115 	stw	ra,4(sp)
    11a4:	df000015 	stw	fp,0(sp)
    11a8:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    11ac:	01000034 	movhi	r4,0
    11b0:	21056b04 	addi	r4,r4,5548
    11b4:	01400034 	movhi	r5,0
    11b8:	29454f04 	addi	r5,r5,5436
    11bc:	01800034 	movhi	r6,0
    11c0:	31856b04 	addi	r6,r6,5548
    11c4:	00011380 	call	1138 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    11c8:	01000034 	movhi	r4,0
    11cc:	21040804 	addi	r4,r4,4128
    11d0:	01400034 	movhi	r5,0
    11d4:	29440804 	addi	r5,r5,4128
    11d8:	01800034 	movhi	r6,0
    11dc:	31840804 	addi	r6,r6,4128
    11e0:	00011380 	call	1138 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    11e4:	01000034 	movhi	r4,0
    11e8:	21054604 	addi	r4,r4,5400
    11ec:	01400034 	movhi	r5,0
    11f0:	29454604 	addi	r5,r5,5400
    11f4:	01800034 	movhi	r6,0
    11f8:	31854f04 	addi	r6,r6,5436
    11fc:	00011380 	call	1138 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    1200:	00014780 	call	1478 <alt_dcache_flush_all>
  alt_icache_flush_all();
    1204:	00014c00 	call	14c0 <alt_icache_flush_all>
}
    1208:	e037883a 	mov	sp,fp
    120c:	dfc00117 	ldw	ra,4(sp)
    1210:	df000017 	ldw	fp,0(sp)
    1214:	dec00204 	addi	sp,sp,8
    1218:	f800283a 	ret

0000121c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    121c:	defffe04 	addi	sp,sp,-8
    1220:	dfc00115 	stw	ra,4(sp)
    1224:	df000015 	stw	fp,0(sp)
    1228:	d839883a 	mov	fp,sp
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    122c:	0009883a 	mov	r4,zero
    1230:	00012b00 	call	12b0 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    1234:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    1238:	00012e40 	call	12e4 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    123c:	d1202217 	ldw	r4,-32632(gp)
    1240:	d0e02317 	ldw	r3,-32628(gp)
    1244:	d0a02417 	ldw	r2,-32624(gp)
    1248:	180b883a 	mov	r5,r3
    124c:	100d883a 	mov	r6,r2
    1250:	000105c0 	call	105c <main>
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
    1254:	e037883a 	mov	sp,fp
    1258:	dfc00117 	ldw	ra,4(sp)
    125c:	df000017 	ldw	fp,0(sp)
    1260:	dec00204 	addi	sp,sp,8
    1264:	f800283a 	ret

00001268 <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
    1268:	defffd04 	addi	sp,sp,-12
    126c:	dfc00215 	stw	ra,8(sp)
    1270:	df000115 	stw	fp,4(sp)
    1274:	df000104 	addi	fp,sp,4
    1278:	e13fff15 	stw	r4,-4(fp)
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
    127c:	e13fff17 	ldw	r4,-4(fp)
    1280:	00014fc0 	call	14fc <strlen>
    1284:	01000034 	movhi	r4,0
    1288:	21056504 	addi	r4,r4,5524
    128c:	e17fff17 	ldw	r5,-4(fp)
    1290:	100d883a 	mov	r6,r2
    1294:	000f883a 	mov	r7,zero
    1298:	00013e40 	call	13e4 <altera_avalon_jtag_uart_write>
#else
    return fputs(str, stdout);
#endif
#endif
}
    129c:	e037883a 	mov	sp,fp
    12a0:	dfc00117 	ldw	ra,4(sp)
    12a4:	df000017 	ldw	fp,0(sp)
    12a8:	dec00204 	addi	sp,sp,8
    12ac:	f800283a 	ret

000012b0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    12b0:	defffd04 	addi	sp,sp,-12
    12b4:	dfc00215 	stw	ra,8(sp)
    12b8:	df000115 	stw	fp,4(sp)
    12bc:	df000104 	addi	fp,sp,4
    12c0:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_PROCESSOR, nios2_processor);
    12c4:	00014dc0 	call	14dc <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    12c8:	00800044 	movi	r2,1
    12cc:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    12d0:	e037883a 	mov	sp,fp
    12d4:	dfc00117 	ldw	ra,4(sp)
    12d8:	df000017 	ldw	fp,0(sp)
    12dc:	dec00204 	addi	sp,sp,8
    12e0:	f800283a 	ret

000012e4 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    12e4:	deffff04 	addi	sp,sp,-4
    12e8:	df000015 	stw	fp,0(sp)
    12ec:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
}
    12f0:	e037883a 	mov	sp,fp
    12f4:	df000017 	ldw	fp,0(sp)
    12f8:	dec00104 	addi	sp,sp,4
    12fc:	f800283a 	ret

00001300 <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
    1300:	defff704 	addi	sp,sp,-36
    1304:	df000815 	stw	fp,32(sp)
    1308:	df000804 	addi	fp,sp,32
    130c:	e13ffc15 	stw	r4,-16(fp)
    1310:	e17ffd15 	stw	r5,-12(fp)
    1314:	e1bffe15 	stw	r6,-8(fp)
    1318:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
    131c:	e0bffc17 	ldw	r2,-16(fp)
    1320:	10800017 	ldw	r2,0(r2)
    1324:	e0bff915 	stw	r2,-28(fp)

  char * ptr = buffer;
    1328:	e0bffd17 	ldw	r2,-12(fp)
    132c:	e0bff815 	stw	r2,-32(fp)
  char * end = buffer + space;
    1330:	e0bffe17 	ldw	r2,-8(fp)
    1334:	e0fffd17 	ldw	r3,-12(fp)
    1338:	1885883a 	add	r2,r3,r2
    133c:	e0bffa15 	stw	r2,-24(fp)

  while (ptr < end)
    1340:	00001406 	br	1394 <altera_avalon_jtag_uart_read+0x94>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    1344:	e0bff917 	ldw	r2,-28(fp)
    1348:	10800037 	ldwio	r2,0(r2)
    134c:	e0bffb15 	stw	r2,-20(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
    1350:	e0bffb17 	ldw	r2,-20(fp)
    1354:	10a0000c 	andi	r2,r2,32768
    1358:	10000626 	beq	r2,zero,1374 <altera_avalon_jtag_uart_read+0x74>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    135c:	e0bff817 	ldw	r2,-32(fp)
    1360:	10c00044 	addi	r3,r2,1
    1364:	e0fff815 	stw	r3,-32(fp)
    1368:	e0fffb17 	ldw	r3,-20(fp)
    136c:	10c00005 	stb	r3,0(r2)
    1370:	00000806 	br	1394 <altera_avalon_jtag_uart_read+0x94>
    else if (ptr != buffer)
    1374:	e0fff817 	ldw	r3,-32(fp)
    1378:	e0bffd17 	ldw	r2,-12(fp)
    137c:	18800126 	beq	r3,r2,1384 <altera_avalon_jtag_uart_read+0x84>
      break;
    1380:	00000706 	br	13a0 <altera_avalon_jtag_uart_read+0xa0>
    else if(flags & O_NONBLOCK)
    1384:	e0bfff17 	ldw	r2,-4(fp)
    1388:	1090000c 	andi	r2,r2,16384
    138c:	10000126 	beq	r2,zero,1394 <altera_avalon_jtag_uart_read+0x94>
      break;   
    1390:	00000306 	br	13a0 <altera_avalon_jtag_uart_read+0xa0>
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
    1394:	e0fff817 	ldw	r3,-32(fp)
    1398:	e0bffa17 	ldw	r2,-24(fp)
    139c:	18bfe936 	bltu	r3,r2,1344 <_gp+0xffff7db0>
    else if(flags & O_NONBLOCK)
      break;   
    
  }

  if (ptr != buffer)
    13a0:	e0fff817 	ldw	r3,-32(fp)
    13a4:	e0bffd17 	ldw	r2,-12(fp)
    13a8:	18800426 	beq	r3,r2,13bc <altera_avalon_jtag_uart_read+0xbc>
    return ptr - buffer;
    13ac:	e0fff817 	ldw	r3,-32(fp)
    13b0:	e0bffd17 	ldw	r2,-12(fp)
    13b4:	1885c83a 	sub	r2,r3,r2
    13b8:	00000606 	br	13d4 <altera_avalon_jtag_uart_read+0xd4>
  else if (flags & O_NONBLOCK)
    13bc:	e0bfff17 	ldw	r2,-4(fp)
    13c0:	1090000c 	andi	r2,r2,16384
    13c4:	10000226 	beq	r2,zero,13d0 <altera_avalon_jtag_uart_read+0xd0>
    return -EWOULDBLOCK;
    13c8:	00bffd44 	movi	r2,-11
    13cc:	00000106 	br	13d4 <altera_avalon_jtag_uart_read+0xd4>
  else
    return -EIO;
    13d0:	00bffec4 	movi	r2,-5
}
    13d4:	e037883a 	mov	sp,fp
    13d8:	df000017 	ldw	fp,0(sp)
    13dc:	dec00104 	addi	sp,sp,4
    13e0:	f800283a 	ret

000013e4 <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    13e4:	defff904 	addi	sp,sp,-28
    13e8:	df000615 	stw	fp,24(sp)
    13ec:	df000604 	addi	fp,sp,24
    13f0:	e13ffc15 	stw	r4,-16(fp)
    13f4:	e17ffd15 	stw	r5,-12(fp)
    13f8:	e1bffe15 	stw	r6,-8(fp)
    13fc:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
    1400:	e0bffc17 	ldw	r2,-16(fp)
    1404:	10800017 	ldw	r2,0(r2)
    1408:	e0bffa15 	stw	r2,-24(fp)

  const char * end = ptr + count;
    140c:	e0bffe17 	ldw	r2,-8(fp)
    1410:	e0fffd17 	ldw	r3,-12(fp)
    1414:	1885883a 	add	r2,r3,r2
    1418:	e0bffb15 	stw	r2,-20(fp)

  while (ptr < end)
    141c:	00000e06 	br	1458 <altera_avalon_jtag_uart_write+0x74>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    1420:	e0bffa17 	ldw	r2,-24(fp)
    1424:	10800104 	addi	r2,r2,4
    1428:	10800037 	ldwio	r2,0(r2)
    142c:	10bfffec 	andhi	r2,r2,65535
    1430:	10000926 	beq	r2,zero,1458 <altera_avalon_jtag_uart_write+0x74>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    1434:	e0fffa17 	ldw	r3,-24(fp)
    1438:	e0bffd17 	ldw	r2,-12(fp)
    143c:	11000044 	addi	r4,r2,1
    1440:	e13ffd15 	stw	r4,-12(fp)
    1444:	10800003 	ldbu	r2,0(r2)
    1448:	10803fcc 	andi	r2,r2,255
    144c:	1080201c 	xori	r2,r2,128
    1450:	10bfe004 	addi	r2,r2,-128
    1454:	18800035 	stwio	r2,0(r3)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    1458:	e0fffd17 	ldw	r3,-12(fp)
    145c:	e0bffb17 	ldw	r2,-20(fp)
    1460:	18bfef36 	bltu	r3,r2,1420 <_gp+0xffff7e8c>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
    1464:	e0bffe17 	ldw	r2,-8(fp)
}
    1468:	e037883a 	mov	sp,fp
    146c:	df000017 	ldw	fp,0(sp)
    1470:	dec00104 	addi	sp,sp,4
    1474:	f800283a 	ret

00001478 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    1478:	deffff04 	addi	sp,sp,-4
    147c:	df000015 	stw	fp,0(sp)
    1480:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    1484:	e037883a 	mov	sp,fp
    1488:	df000017 	ldw	fp,0(sp)
    148c:	dec00104 	addi	sp,sp,4
    1490:	f800283a 	ret

00001494 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    1494:	defffc04 	addi	sp,sp,-16
    1498:	df000315 	stw	fp,12(sp)
    149c:	df000304 	addi	fp,sp,12
    14a0:	e13ffd15 	stw	r4,-12(fp)
    14a4:	e17ffe15 	stw	r5,-8(fp)
    14a8:	e1bfff15 	stw	r6,-4(fp)
  return len;
    14ac:	e0bfff17 	ldw	r2,-4(fp)
}
    14b0:	e037883a 	mov	sp,fp
    14b4:	df000017 	ldw	fp,0(sp)
    14b8:	dec00104 	addi	sp,sp,4
    14bc:	f800283a 	ret

000014c0 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    14c0:	deffff04 	addi	sp,sp,-4
    14c4:	df000015 	stw	fp,0(sp)
    14c8:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
    14cc:	e037883a 	mov	sp,fp
    14d0:	df000017 	ldw	fp,0(sp)
    14d4:	dec00104 	addi	sp,sp,4
    14d8:	f800283a 	ret

000014dc <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    14dc:	deffff04 	addi	sp,sp,-4
    14e0:	df000015 	stw	fp,0(sp)
    14e4:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    14e8:	000170fa 	wrctl	ienable,zero
}
    14ec:	e037883a 	mov	sp,fp
    14f0:	df000017 	ldw	fp,0(sp)
    14f4:	dec00104 	addi	sp,sp,4
    14f8:	f800283a 	ret

000014fc <strlen>:
    14fc:	2005883a 	mov	r2,r4
    1500:	10c00007 	ldb	r3,0(r2)
    1504:	18000226 	beq	r3,zero,1510 <strlen+0x14>
    1508:	10800044 	addi	r2,r2,1
    150c:	003ffc06 	br	1500 <_gp+0xffff7f6c>
    1510:	1105c83a 	sub	r2,r2,r4
    1514:	f800283a 	ret
