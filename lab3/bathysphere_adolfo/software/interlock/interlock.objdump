
interlock.elf:     file format elf32-littlenios2
interlock.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00001020

Program Header:
    LOAD off    0x00001000 vaddr 0x00001000 paddr 0x00001000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00001020 paddr 0x00001020 align 2**12
         filesz 0x00000848 memsz 0x00000848 flags r-x
    LOAD off    0x00001868 vaddr 0x00001868 paddr 0x000018d8 align 2**12
         filesz 0x00000070 memsz 0x00000070 flags rw-
    LOAD off    0x00001948 vaddr 0x00001948 paddr 0x00001948 align 2**12
         filesz 0x00000000 memsz 0x0000000c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00001000  00001000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00001020  00001020  000018d8  2**0
                  CONTENTS
  2 .text         00000778  00001020  00001020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000000d0  00001798  00001798  00001798  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000070  00001868  000018d8  00001868  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000000c  00001948  00001948  00001948  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory 00000000  00001954  00001954  000018d8  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  000018d8  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000288  00000000  00000000  00001900  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00001cb4  00000000  00000000  00001b88  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000e0e  00000000  00000000  0000383c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00000e60  00000000  00000000  0000464a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000380  00000000  00000000  000054ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00000a41  00000000  00000000  0000582c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000778  00000000  00000000  0000626d  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  000069e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000000c0  00000000  00000000  00006a28  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00007b8e  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000f  00000000  00000000  00007b91  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00007ba0  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00007ba1  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000009  00000000  00000000  00007ba2  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000009  00000000  00000000  00007bab  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000009  00000000  00000000  00007bb4  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000e  00000000  00000000  00007bbd  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 0000002d  00000000  00000000  00007bcb  2**0
                  CONTENTS, READONLY
 26 .jdi          00004858  00000000  00000000  00007bf8  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     0008cd16  00000000  00000000  0000c450  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00001000 l    d  .entry	00000000 .entry
00001020 l    d  .exceptions	00000000 .exceptions
00001020 l    d  .text	00000000 .text
00001798 l    d  .rodata	00000000 .rodata
00001868 l    d  .rwdata	00000000 .rwdata
00001948 l    d  .bss	00000000 .bss
00001954 l    d  .onchip_memory	00000000 .onchip_memory
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../interlock_bsp//obj/HAL/src/crt0.o
00001058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 alt_getchar.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00001614 l     F .text	00000008 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00001644 l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
000012b8 g     F .text	0000002c alt_main
000018d8 g       *ABS*	00000000 __flash_rwdata_start
00001498 g     F .text	00000038 alt_putstr
000018c0 g     O .rwdata	00000004 jtag_uart
00001620 g     F .text	00000008 altera_nios2_gen2_irq_init
00001000 g     F .entry	0000000c __reset
00001020 g       *ABS*	00000000 __flash_exceptions_start
0000194c g     O .bss	00000004 alt_argv
000098c0 g       *ABS*	00000000 _gp
000014d0 g     F .text	00000004 usleep
00001868 g     O .rwdata	00000030 alt_fd_list
000014f8 g     F .text	0000005c altera_avalon_jtag_uart_read
00001760 g     F .text	00000008 .hidden __udivsi3
000018c4 g     O .rwdata	00000004 alt_max_fd
00001954 g       *ABS*	00000000 __bss_end
0000117c g     F .text	00000044 alt_getchar
00001898 g     O .rwdata	00000028 alt_dev_null
00001610 g     F .text	00000004 alt_dcache_flush_all
000018d8 g       *ABS*	00000000 __ram_rwdata_end
00001000 g       *ABS*	00000000 __alt_mem_onchip_memory
000018c8 g     O .rwdata	00000008 alt_dev_list
00001868 g       *ABS*	00000000 __ram_rodata_end
00001768 g     F .text	00000008 .hidden __umodsi3
00001954 g       *ABS*	00000000 end
00002000 g       *ABS*	00000000 __alt_stack_pointer
00001554 g     F .text	00000034 altera_avalon_jtag_uart_write
000012e4 g     F .text	0000016c alt_printf
00001020 g     F .text	0000003c _start
000014f4 g     F .text	00000004 alt_sys_init
00001770 g     F .text	00000028 .hidden __mulsi3
00001868 g       *ABS*	00000000 __ram_rwdata_start
00001798 g       *ABS*	00000000 __ram_rodata_start
00001588 g     F .text	00000088 alt_busy_sleep
00001954 g       *ABS*	00000000 __alt_stack_base
00001948 g       *ABS*	00000000 __bss_start
0000105c g     F .text	00000120 main
00001948 g     O .bss	00000004 alt_envp
000016b0 g     F .text	00000054 .hidden __divsi3
00001798 g       *ABS*	00000000 __flash_rodata_start
000014d4 g     F .text	00000020 alt_irq_init
00001950 g     O .bss	00000004 alt_argc
000018d0 g     O .rwdata	00000008 alt_fs_list
00001020 g       *ABS*	00000000 __ram_exceptions_start
000018d8 g       *ABS*	00000000 _edata
00001954 g       *ABS*	00000000 _end
00001020 g       *ABS*	00000000 __ram_exceptions_end
00001704 g     F .text	0000005c .hidden __modsi3
00002000 g       *ABS*	00000000 __alt_data_end
0000100c g       .entry	00000000 _exit
00001628 g     F .text	0000001c strlen
00001450 g     F .text	00000048 alt_putchar
0000161c g     F .text	00000004 alt_icache_flush_all
000011c0 g     F .text	000000f8 alt_load



Disassembly of section .entry:

00001000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    1000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    1004:	08440814 	ori	at,at,4128
    jmp r1
    1008:	0800683a 	jmp	at

0000100c <_exit>:
	...

Disassembly of section .text:

00001020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    1020:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    1024:	dec80014 	ori	sp,sp,8192
    movhi gp, %hi(_gp)
    1028:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
    102c:	d6a63014 	ori	gp,gp,39104
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    1030:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    1034:	10865214 	ori	r2,r2,6472

    movhi r3, %hi(__bss_end)
    1038:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    103c:	18c65514 	ori	r3,r3,6484

    beq r2, r3, 1f
    1040:	10c00326 	beq	r2,r3,1050 <_start+0x30>

0:
    stw zero, (r2)
    1044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    1048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    104c:	10fffd36 	bltu	r2,r3,1044 <_gp+0xffff7784>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    1050:	00011c00 	call	11c0 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    1054:	00012b80 	call	12b8 <alt_main>

00001058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    1058:	003fff06 	br	1058 <_gp+0xffff7798>

0000105c <main>:
#define drainFinished (volatile char *) 0x3030 //output
#define fillFinished (volatile char *) 0x3020 //output
#define waitFinished (volatile char *) 0x3010 //output


int main() {
    105c:	defffd04 	addi	sp,sp,-12
    1060:	dfc00215 	stw	ra,8(sp)
    1064:	dc400115 	stw	r17,4(sp)
    1068:	dc000015 	stw	r16,0(sp)
	 *fillFinished = 0;
    106c:	008c0804 	movi	r2,12320
    1070:	10000005 	stb	zero,0(r2)
	 *fillFinished = 0;
    1074:	10000005 	stb	zero,0(r2)
	 *fillFinished = 0;
    1078:	10000005 	stb	zero,0(r2)
	 *fillFinished = 0;
    107c:	10000005 	stb	zero,0(r2)
	 *fillFinished = 0;
    1080:	10000005 	stb	zero,0(r2)
	 *fillFinished = 0;
    1084:	10000005 	stb	zero,0(r2)

	 *bathArriving = 0;
    1088:	00cc2004 	movi	r3,12416
    108c:	18000005 	stb	zero,0(r3)
	 *bathLeaving = 0;
    1090:	00cc2404 	movi	r3,12432
    1094:	18000005 	stb	zero,0(r3)
	 *personCheck = 0;
    1098:	00cc1c04 	movi	r3,12400
    109c:	18000005 	stb	zero,0(r3)
	 *pressureCheck = 0;
    10a0:	00cc1804 	movi	r3,12384
    10a4:	18000005 	stb	zero,0(r3)
	 *innerDoorSwitch = 0;
    10a8:	00cc1404 	movi	r3,12368
    10ac:	18000005 	stb	zero,0(r3)
	 *outerDoorSwitch = 0;
    10b0:	00cc1004 	movi	r3,12352
    10b4:	18000005 	stb	zero,0(r3)
	 *drainFinished = 0;
    10b8:	00cc0c04 	movi	r3,12336
    10bc:	18000005 	stb	zero,0(r3)
	 *fillFinished = 0;
    10c0:	10000005 	stb	zero,0(r2)
	 *waitFinished = 0;

	 int input = 0;

	 alt_putstr("Wassup fool\n");
    10c4:	01000034 	movhi	r4,0
	 *pressureCheck = 0;
	 *innerDoorSwitch = 0;
	 *outerDoorSwitch = 0;
	 *drainFinished = 0;
	 *fillFinished = 0;
	 *waitFinished = 0;
    10c8:	008c0404 	movi	r2,12304

	 int input = 0;

	 alt_putstr("Wassup fool\n");
    10cc:	2105e604 	addi	r4,r4,6040
	 *pressureCheck = 0;
	 *innerDoorSwitch = 0;
	 *outerDoorSwitch = 0;
	 *drainFinished = 0;
	 *fillFinished = 0;
	 *waitFinished = 0;
    10d0:	10000005 	stb	zero,0(r2)

	 int input = 0;

	 alt_putstr("Wassup fool\n");
    10d4:	00014980 	call	1498 <alt_putstr>
	 alt_putstr("This shit is the interlock control system puto\n");
    10d8:	01000034 	movhi	r4,0
    10dc:	2105ea04 	addi	r4,r4,6056
    10e0:	00014980 	call	1498 <alt_putstr>
	 while(1) {
		 *bathArriving = 0;
    10e4:	044c2004 	movi	r17,12416
    10e8:	88000005 	stb	zero,0(r17)
		 *bathLeaving = 0;
    10ec:	040c2404 	movi	r16,12432

		 alt_putstr("The fuck is the bathysphere doing?\n");
    10f0:	01000034 	movhi	r4,0
    10f4:	2105f604 	addi	r4,r4,6104

	 alt_putstr("Wassup fool\n");
	 alt_putstr("This shit is the interlock control system puto\n");
	 while(1) {
		 *bathArriving = 0;
		 *bathLeaving = 0;
    10f8:	80000005 	stb	zero,0(r16)

		 alt_putstr("The fuck is the bathysphere doing?\n");
    10fc:	00014980 	call	1498 <alt_putstr>
		 alt_printf("Arriving? - a\n");
    1100:	01000034 	movhi	r4,0
    1104:	2105ff04 	addi	r4,r4,6140
    1108:	00012e40 	call	12e4 <alt_printf>
		 alt_printf("Departing? - d\n");
    110c:	01000034 	movhi	r4,0
    1110:	21060304 	addi	r4,r4,6156
    1114:	00012e40 	call	12e4 <alt_printf>
		 input = alt_getchar();
    1118:	000117c0 	call	117c <alt_getchar>
		 switch (input) {
    111c:	00c01844 	movi	r3,97
    1120:	10c00726 	beq	r2,r3,1140 <main+0xe4>
    1124:	00c01904 	movi	r3,100
    1128:	10c00e26 	beq	r2,r3,1164 <main+0x108>
    112c:	00c00284 	movi	r3,10
    1130:	10ffed26 	beq	r2,r3,10e8 <_gp+0xffff7828>

		 case '\n' :
			 break;

		 default :
			 alt_printf("Invalid input bitchass\n" );
    1134:	01000034 	movhi	r4,0
    1138:	21061104 	addi	r4,r4,6212
    113c:	00000d06 	br	1174 <main+0x118>
		 alt_printf("Departing? - d\n");
		 input = alt_getchar();
		 switch (input) {
		 case 'a' :
			 //usleep(1000000);
			 *bathArriving = 1;
    1140:	00c00044 	movi	r3,1
    1144:	008c2004 	movi	r2,12416
			 usleep(1000000);
    1148:	010003f4 	movhi	r4,15
    114c:	21109004 	addi	r4,r4,16960
		 alt_printf("Departing? - d\n");
		 input = alt_getchar();
		 switch (input) {
		 case 'a' :
			 //usleep(1000000);
			 *bathArriving = 1;
    1150:	10c00005 	stb	r3,0(r2)
			 usleep(1000000);
    1154:	00014d00 	call	14d0 <usleep>
			 alt_printf("open outer door\n" );
    1158:	01000034 	movhi	r4,0
    115c:	21060704 	addi	r4,r4,6172
    1160:	00000406 	br	1174 <main+0x118>

			 break;

		 case 'd' :
			 *bathLeaving = 1;
    1164:	00800044 	movi	r2,1
			 alt_printf("open inner door\n" );
    1168:	01000034 	movhi	r4,0
			 alt_printf("open outer door\n" );

			 break;

		 case 'd' :
			 *bathLeaving = 1;
    116c:	80800005 	stb	r2,0(r16)
			 alt_printf("open inner door\n" );
    1170:	21060c04 	addi	r4,r4,6192

		 case '\n' :
			 break;

		 default :
			 alt_printf("Invalid input bitchass\n" );
    1174:	00012e40 	call	12e4 <alt_printf>
    1178:	003fda06 	br	10e4 <_gp+0xffff7824>

0000117c <alt_getchar>:
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
    117c:	00800034 	movhi	r2,0
    1180:	10861a04 	addi	r2,r2,6248
    1184:	11c00217 	ldw	r7,8(r2)
 * Uses the ALT_DRIVER_READ() macro to call directly to driver if available.
 * Otherwise, uses newlib provided getchar() routine.
 */
int 
alt_getchar(void)
{
    1188:	defffe04 	addi	sp,sp,-8
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
    118c:	01000034 	movhi	r4,0
    1190:	21063004 	addi	r4,r4,6336
    1194:	d80b883a 	mov	r5,sp
    1198:	01800044 	movi	r6,1
 * Uses the ALT_DRIVER_READ() macro to call directly to driver if available.
 * Otherwise, uses newlib provided getchar() routine.
 */
int 
alt_getchar(void)
{
    119c:	dfc00115 	stw	ra,4(sp)
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
    11a0:	00014f80 	call	14f8 <altera_avalon_jtag_uart_read>
    11a4:	0080020e 	bge	zero,r2,11b0 <alt_getchar+0x34>
        return -1;
    }
    return c;
    11a8:	d8800007 	ldb	r2,0(sp)
    11ac:	00000106 	br	11b4 <alt_getchar+0x38>
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
        return -1;
    11b0:	00bfffc4 	movi	r2,-1
    return c;
#else
    return getchar();
#endif
#endif
}
    11b4:	dfc00117 	ldw	ra,4(sp)
    11b8:	dec00204 	addi	sp,sp,8
    11bc:	f800283a 	ret

000011c0 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    11c0:	deffff04 	addi	sp,sp,-4
    11c4:	01000034 	movhi	r4,0
    11c8:	01400034 	movhi	r5,0
    11cc:	dfc00015 	stw	ra,0(sp)
    11d0:	21061a04 	addi	r4,r4,6248
    11d4:	29463604 	addi	r5,r5,6360

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    11d8:	2140061e 	bne	r4,r5,11f4 <alt_load+0x34>
    11dc:	01000034 	movhi	r4,0
    11e0:	01400034 	movhi	r5,0
    11e4:	21040804 	addi	r4,r4,4128
    11e8:	29440804 	addi	r5,r5,4128
    11ec:	2140141e 	bne	r4,r5,1240 <alt_load+0x80>
    11f0:	00000d06 	br	1228 <alt_load+0x68>
    11f4:	00c00034 	movhi	r3,0
    11f8:	18c63604 	addi	r3,r3,6360
    11fc:	00bfff04 	movi	r2,-4
    1200:	1907c83a 	sub	r3,r3,r4
    1204:	1886703a 	and	r3,r3,r2
    1208:	0005883a 	mov	r2,zero
  {
    while( to != end )
    120c:	10fff326 	beq	r2,r3,11dc <_gp+0xffff791c>
    1210:	114f883a 	add	r7,r2,r5
    {
      *to++ = *from++;
    1214:	39c00017 	ldw	r7,0(r7)
    1218:	110d883a 	add	r6,r2,r4
    121c:	10800104 	addi	r2,r2,4
    1220:	31c00015 	stw	r7,0(r6)
    1224:	003ff906 	br	120c <_gp+0xffff794c>
    1228:	01000034 	movhi	r4,0
    122c:	01400034 	movhi	r5,0
    1230:	2105e604 	addi	r4,r4,6040
    1234:	2945e604 	addi	r5,r5,6040

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    1238:	2140121e 	bne	r4,r5,1284 <alt_load+0xc4>
    123c:	00000d06 	br	1274 <alt_load+0xb4>
    1240:	00c00034 	movhi	r3,0
    1244:	18c40804 	addi	r3,r3,4128
    1248:	00bfff04 	movi	r2,-4
    124c:	1907c83a 	sub	r3,r3,r4
    1250:	1886703a 	and	r3,r3,r2
    1254:	0005883a 	mov	r2,zero
  {
    while( to != end )
    1258:	10fff326 	beq	r2,r3,1228 <_gp+0xffff7968>
    125c:	114f883a 	add	r7,r2,r5
    {
      *to++ = *from++;
    1260:	39c00017 	ldw	r7,0(r7)
    1264:	110d883a 	add	r6,r2,r4
    1268:	10800104 	addi	r2,r2,4
    126c:	31c00015 	stw	r7,0(r6)
    1270:	003ff906 	br	1258 <_gp+0xffff7998>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    1274:	00016100 	call	1610 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
    1278:	dfc00017 	ldw	ra,0(sp)
    127c:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
    1280:	000161c1 	jmpi	161c <alt_icache_flush_all>
    1284:	00c00034 	movhi	r3,0
    1288:	18c61a04 	addi	r3,r3,6248
    128c:	00bfff04 	movi	r2,-4
    1290:	1907c83a 	sub	r3,r3,r4
    1294:	1886703a 	and	r3,r3,r2

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    1298:	0005883a 	mov	r2,zero
  {
    while( to != end )
    129c:	10fff526 	beq	r2,r3,1274 <_gp+0xffff79b4>
    12a0:	114f883a 	add	r7,r2,r5
    {
      *to++ = *from++;
    12a4:	39c00017 	ldw	r7,0(r7)
    12a8:	110d883a 	add	r6,r2,r4
    12ac:	10800104 	addi	r2,r2,4
    12b0:	31c00015 	stw	r7,0(r6)
    12b4:	003ff906 	br	129c <_gp+0xffff79dc>

000012b8 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    12b8:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    12bc:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    12c0:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    12c4:	00014d40 	call	14d4 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    12c8:	00014f40 	call	14f4 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    12cc:	d1202417 	ldw	r4,-32624(gp)
    12d0:	d1602317 	ldw	r5,-32628(gp)
    12d4:	d1a02217 	ldw	r6,-32632(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
    12d8:	dfc00017 	ldw	ra,0(sp)
    12dc:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    12e0:	000105c1 	jmpi	105c <main>

000012e4 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
    12e4:	defff204 	addi	sp,sp,-56
    12e8:	dfc00a15 	stw	ra,40(sp)
    12ec:	df000915 	stw	fp,36(sp)
    12f0:	ddc00815 	stw	r23,32(sp)
    12f4:	dd800715 	stw	r22,28(sp)
    12f8:	dd400615 	stw	r21,24(sp)
    12fc:	dd000515 	stw	r20,20(sp)
    1300:	dcc00415 	stw	r19,16(sp)
    1304:	dc800315 	stw	r18,12(sp)
    1308:	dc400215 	stw	r17,8(sp)
    130c:	dc000115 	stw	r16,4(sp)
    1310:	d9400b15 	stw	r5,44(sp)
    1314:	d9800c15 	stw	r6,48(sp)
    1318:	d9c00d15 	stw	r7,52(sp)
    w = fmt;
    while ((c = *w++) != 0)
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
    131c:	04000944 	movi	r16,37
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
    1320:	2005883a 	mov	r2,r4
	va_list args;
	va_start(args, fmt);
    1324:	dd400b04 	addi	r21,sp,44
                if (c == '%')
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
    1328:	048018c4 	movi	r18,99
                {
                    int v = va_arg(args, int);
                    alt_putchar(v);
                }
                else if (c == 'x')
    132c:	04c01e04 	movi	r19,120
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
    1330:	05001cc4 	movi	r20,115
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
    1334:	11000007 	ldb	r4,0(r2)
    1338:	20003926 	beq	r4,zero,1420 <alt_printf+0x13c>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
    133c:	24000226 	beq	r4,r16,1348 <alt_printf+0x64>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
    1340:	14400044 	addi	r17,r2,1
    1344:	00001106 	br	138c <alt_printf+0xa8>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
    1348:	14400084 	addi	r17,r2,2
    134c:	10800047 	ldb	r2,1(r2)
    1350:	10003326 	beq	r2,zero,1420 <alt_printf+0x13c>
            {
                if (c == '%')
    1354:	1400021e 	bne	r2,r16,1360 <alt_printf+0x7c>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
    1358:	8009883a 	mov	r4,r16
    135c:	00000b06 	br	138c <alt_printf+0xa8>
                } 
                else if (c == 'c')
    1360:	1480051e 	bne	r2,r18,1378 <alt_printf+0x94>
                {
                    int v = va_arg(args, int);
                    alt_putchar(v);
    1364:	a9000017 	ldw	r4,0(r21)
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
                {
                    int v = va_arg(args, int);
    1368:	ad800104 	addi	r22,r21,4
    136c:	b02b883a 	mov	r21,r22
                    alt_putchar(v);
    1370:	00014500 	call	1450 <alt_putchar>
    1374:	00002806 	br	1418 <alt_printf+0x134>
                }
                else if (c == 'x')
    1378:	14c01f1e 	bne	r2,r19,13f8 <alt_printf+0x114>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
    137c:	adc00017 	ldw	r23,0(r21)
    1380:	ad400104 	addi	r21,r21,4
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
    1384:	b800031e 	bne	r23,zero,1394 <alt_printf+0xb0>
                    {
                        alt_putchar('0');
    1388:	01000c04 	movi	r4,48
    138c:	00014500 	call	1450 <alt_putchar>
                        continue;
    1390:	00002106 	br	1418 <alt_printf+0x134>
    1394:	05800704 	movi	r22,28
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
    1398:	00c003c4 	movi	r3,15
    139c:	1d84983a 	sll	r2,r3,r22
    13a0:	15c4703a 	and	r2,r2,r23
    13a4:	1000021e 	bne	r2,zero,13b0 <alt_printf+0xcc>
                        digit_shift -= 4;
    13a8:	b5bfff04 	addi	r22,r22,-4
    13ac:	003ffb06 	br	139c <_gp+0xffff7adc>

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
    13b0:	070003c4 	movi	fp,15
                        if (digit <= 9)
    13b4:	00c00244 	movi	r3,9
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
    13b8:	b0001716 	blt	r22,zero,1418 <alt_printf+0x134>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
    13bc:	e584983a 	sll	r2,fp,r22
    13c0:	15c4703a 	and	r2,r2,r23
    13c4:	1584d83a 	srl	r2,r2,r22
                        if (digit <= 9)
    13c8:	18800236 	bltu	r3,r2,13d4 <alt_printf+0xf0>
                            c = '0' + digit;
    13cc:	11000c04 	addi	r4,r2,48
    13d0:	00000106 	br	13d8 <alt_printf+0xf4>
                        else
                            c = 'a' + digit - 10;
    13d4:	110015c4 	addi	r4,r2,87
                        alt_putchar(c);
    13d8:	21003fcc 	andi	r4,r4,255
    13dc:	2100201c 	xori	r4,r4,128
    13e0:	213fe004 	addi	r4,r4,-128
    13e4:	d8c00015 	stw	r3,0(sp)
    13e8:	00014500 	call	1450 <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
    13ec:	b5bfff04 	addi	r22,r22,-4
    13f0:	d8c00017 	ldw	r3,0(sp)
    13f4:	003ff006 	br	13b8 <_gp+0xffff7af8>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
    13f8:	1500071e 	bne	r2,r20,1418 <alt_printf+0x134>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
    13fc:	ad800017 	ldw	r22,0(r21)
    1400:	ad400104 	addi	r21,r21,4

                    while(*s)
    1404:	b1000007 	ldb	r4,0(r22)
    1408:	20000326 	beq	r4,zero,1418 <alt_printf+0x134>
                      alt_putchar(*s++);
    140c:	b5800044 	addi	r22,r22,1
    1410:	00014500 	call	1450 <alt_putchar>
    1414:	003ffb06 	br	1404 <_gp+0xffff7b44>
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
                {
                    int v = va_arg(args, int);
    1418:	8805883a 	mov	r2,r17
    141c:	003fc506 	br	1334 <_gp+0xffff7a74>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
    1420:	dfc00a17 	ldw	ra,40(sp)
    1424:	df000917 	ldw	fp,36(sp)
    1428:	ddc00817 	ldw	r23,32(sp)
    142c:	dd800717 	ldw	r22,28(sp)
    1430:	dd400617 	ldw	r21,24(sp)
    1434:	dd000517 	ldw	r20,20(sp)
    1438:	dcc00417 	ldw	r19,16(sp)
    143c:	dc800317 	ldw	r18,12(sp)
    1440:	dc400217 	ldw	r17,8(sp)
    1444:	dc000117 	ldw	r16,4(sp)
    1448:	dec00e04 	addi	sp,sp,56
    144c:	f800283a 	ret

00001450 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
    1450:	defffd04 	addi	sp,sp,-12
    1454:	dc000115 	stw	r16,4(sp)
	char        c1 = (char)(c & 0xff);
    return write(STDOUT_FILENO,&c1,1);
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);
    1458:	d9000005 	stb	r4,0(sp)
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
    145c:	2021883a 	mov	r16,r4
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);

    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
    1460:	01000034 	movhi	r4,0
    1464:	21063004 	addi	r4,r4,6336
    1468:	d80b883a 	mov	r5,sp
    146c:	01800044 	movi	r6,1
    1470:	000f883a 	mov	r7,zero
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
    1474:	dfc00215 	stw	ra,8(sp)
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);

    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
    1478:	00015540 	call	1554 <altera_avalon_jtag_uart_write>
    147c:	00ffffc4 	movi	r3,-1
    1480:	10c00126 	beq	r2,r3,1488 <alt_putchar+0x38>
        return -1;
    }
    return c;
    1484:	8005883a 	mov	r2,r16
#else
    return putchar(c);
#endif
#endif
}
    1488:	dfc00217 	ldw	ra,8(sp)
    148c:	dc000117 	ldw	r16,4(sp)
    1490:	dec00304 	addi	sp,sp,12
    1494:	f800283a 	ret

00001498 <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
    1498:	defffe04 	addi	sp,sp,-8
    149c:	dc000015 	stw	r16,0(sp)
    14a0:	dfc00115 	stw	ra,4(sp)
    14a4:	2021883a 	mov	r16,r4
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
    14a8:	00016280 	call	1628 <strlen>
    14ac:	01000034 	movhi	r4,0
    14b0:	21063004 	addi	r4,r4,6336
    14b4:	800b883a 	mov	r5,r16
    14b8:	100d883a 	mov	r6,r2
    14bc:	000f883a 	mov	r7,zero
#else
    return fputs(str, stdout);
#endif
#endif
}
    14c0:	dfc00117 	ldw	ra,4(sp)
    14c4:	dc000017 	ldw	r16,0(sp)
    14c8:	dec00204 	addi	sp,sp,8
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
    14cc:	00015541 	jmpi	1554 <altera_avalon_jtag_uart_write>

000014d0 <usleep>:
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  return alt_busy_sleep(us);
    14d0:	00015881 	jmpi	1588 <alt_busy_sleep>

000014d4 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    14d4:	deffff04 	addi	sp,sp,-4
    14d8:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_PROCESSOR, nios2_processor);
    14dc:	00016200 	call	1620 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    14e0:	00800044 	movi	r2,1
    14e4:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    14e8:	dfc00017 	ldw	ra,0(sp)
    14ec:	dec00104 	addi	sp,sp,4
    14f0:	f800283a 	ret

000014f4 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    14f4:	f800283a 	ret

000014f8 <altera_avalon_jtag_uart_read>:

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
  unsigned int base = sp->base;
    14f8:	21000017 	ldw	r4,0(r4)

  char * ptr = buffer;
  char * end = buffer + space;
    14fc:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    1500:	2805883a 	mov	r2,r5

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
    else if(flags & O_NONBLOCK)
    1504:	3a10000c 	andi	r8,r7,16384
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
    1508:	11800b2e 	bgeu	r2,r6,1538 <altera_avalon_jtag_uart_read+0x40>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    150c:	20c00037 	ldwio	r3,0(r4)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
    1510:	1a60000c 	andi	r9,r3,32768
    1514:	48000326 	beq	r9,zero,1524 <altera_avalon_jtag_uart_read+0x2c>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    1518:	10c00005 	stb	r3,0(r2)
    151c:	10800044 	addi	r2,r2,1
    1520:	003ff906 	br	1508 <_gp+0xffff7c48>
    else if (ptr != buffer)
    1524:	11400226 	beq	r2,r5,1530 <altera_avalon_jtag_uart_read+0x38>
      break;   
    
  }

  if (ptr != buffer)
    return ptr - buffer;
    1528:	1145c83a 	sub	r2,r2,r5
    152c:	f800283a 	ret

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
    else if(flags & O_NONBLOCK)
    1530:	403ff526 	beq	r8,zero,1508 <_gp+0xffff7c48>
    1534:	00000106 	br	153c <altera_avalon_jtag_uart_read+0x44>
      break;   
    
  }

  if (ptr != buffer)
    1538:	117ffb1e 	bne	r2,r5,1528 <_gp+0xffff7c68>
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
    153c:	39d0000c 	andi	r7,r7,16384
    1540:	3800021e 	bne	r7,zero,154c <altera_avalon_jtag_uart_read+0x54>
    return -EWOULDBLOCK;
  else
    return -EIO;
    1544:	00bffec4 	movi	r2,-5
    1548:	f800283a 	ret
  }

  if (ptr != buffer)
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
    154c:	00bffd44 	movi	r2,-11
  else
    return -EIO;
}
    1550:	f800283a 	ret

00001554 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
    1554:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    1558:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
    155c:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    1560:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    1564:	2980072e 	bgeu	r5,r6,1584 <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    1568:	38c00037 	ldwio	r3,0(r7)
    156c:	18ffffec 	andhi	r3,r3,65535
    1570:	183ffc26 	beq	r3,zero,1564 <_gp+0xffff7ca4>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    1574:	28c00007 	ldb	r3,0(r5)
    1578:	20c00035 	stwio	r3,0(r4)
    157c:	29400044 	addi	r5,r5,1
    1580:	003ff806 	br	1564 <_gp+0xffff7ca4>

  return count;
}
    1584:	f800283a 	ret

00001588 <alt_busy_sleep>:
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    1588:	014666b4 	movhi	r5,6554
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    158c:	defffe04 	addi	sp,sp,-8
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    1590:	29666644 	addi	r5,r5,-26215
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    1594:	dc000015 	stw	r16,0(sp)
    1598:	dfc00115 	stw	ra,4(sp)
    159c:	2021883a 	mov	r16,r4
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    15a0:	00017600 	call	1760 <__udivsi3>
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
    15a4:	10001026 	beq	r2,zero,15e8 <alt_busy_sleep+0x60>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    15a8:	01600034 	movhi	r5,32768
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    15ac:	013999b4 	movhi	r4,58982
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
    15b0:	0007883a 	mov	r3,zero
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    15b4:	297fffc4 	addi	r5,r5,-1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    15b8:	211999c4 	addi	r4,r4,26215
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    15bc:	297fffc4 	addi	r5,r5,-1
    15c0:	283ffe1e 	bne	r5,zero,15bc <_gp+0xffff7cfc>
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    15c4:	18c00044 	addi	r3,r3,1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    15c8:	8121883a 	add	r16,r16,r4
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    15cc:	18bffb16 	blt	r3,r2,15bc <_gp+0xffff7cfc>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
    15d0:	8009883a 	mov	r4,r16
    15d4:	01400144 	movi	r5,5
    15d8:	00017700 	call	1770 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    15dc:	10bfffc4 	addi	r2,r2,-1
    15e0:	103ffe1e 	bne	r2,zero,15dc <_gp+0xffff7d1c>
    15e4:	00000506 	br	15fc <alt_busy_sleep+0x74>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
    15e8:	8009883a 	mov	r4,r16
    15ec:	01400144 	movi	r5,5
    15f0:	00017700 	call	1770 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    15f4:	10bfffc4 	addi	r2,r2,-1
    15f8:	00bffe16 	blt	zero,r2,15f4 <_gp+0xffff7d34>
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
}
    15fc:	0005883a 	mov	r2,zero
    1600:	dfc00117 	ldw	ra,4(sp)
    1604:	dc000017 	ldw	r16,0(sp)
    1608:	dec00204 	addi	sp,sp,8
    160c:	f800283a 	ret

00001610 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    1610:	f800283a 	ret

00001614 <alt_dev_null_write>:
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  return len;
}
    1614:	3005883a 	mov	r2,r6
    1618:	f800283a 	ret

0000161c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    161c:	f800283a 	ret

00001620 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    1620:	000170fa 	wrctl	ienable,zero
    1624:	f800283a 	ret

00001628 <strlen>:
    1628:	2005883a 	mov	r2,r4
    162c:	10c00007 	ldb	r3,0(r2)
    1630:	18000226 	beq	r3,zero,163c <strlen+0x14>
    1634:	10800044 	addi	r2,r2,1
    1638:	003ffc06 	br	162c <_gp+0xffff7d6c>
    163c:	1105c83a 	sub	r2,r2,r4
    1640:	f800283a 	ret

00001644 <udivmodsi4>:
    1644:	2900182e 	bgeu	r5,r4,16a8 <udivmodsi4+0x64>
    1648:	28001716 	blt	r5,zero,16a8 <udivmodsi4+0x64>
    164c:	00800804 	movi	r2,32
    1650:	00c00044 	movi	r3,1
    1654:	00000206 	br	1660 <udivmodsi4+0x1c>
    1658:	10001126 	beq	r2,zero,16a0 <udivmodsi4+0x5c>
    165c:	28000516 	blt	r5,zero,1674 <udivmodsi4+0x30>
    1660:	294b883a 	add	r5,r5,r5
    1664:	10bfffc4 	addi	r2,r2,-1
    1668:	18c7883a 	add	r3,r3,r3
    166c:	293ffa36 	bltu	r5,r4,1658 <_gp+0xffff7d98>
    1670:	18000b26 	beq	r3,zero,16a0 <udivmodsi4+0x5c>
    1674:	0005883a 	mov	r2,zero
    1678:	21400236 	bltu	r4,r5,1684 <udivmodsi4+0x40>
    167c:	2149c83a 	sub	r4,r4,r5
    1680:	10c4b03a 	or	r2,r2,r3
    1684:	1806d07a 	srli	r3,r3,1
    1688:	280ad07a 	srli	r5,r5,1
    168c:	183ffa1e 	bne	r3,zero,1678 <_gp+0xffff7db8>
    1690:	3000011e 	bne	r6,zero,1698 <udivmodsi4+0x54>
    1694:	f800283a 	ret
    1698:	2005883a 	mov	r2,r4
    169c:	f800283a 	ret
    16a0:	0005883a 	mov	r2,zero
    16a4:	003ffa06 	br	1690 <_gp+0xffff7dd0>
    16a8:	00c00044 	movi	r3,1
    16ac:	003ff106 	br	1674 <_gp+0xffff7db4>

000016b0 <__divsi3>:
    16b0:	defffe04 	addi	sp,sp,-8
    16b4:	dfc00115 	stw	ra,4(sp)
    16b8:	dc000015 	stw	r16,0(sp)
    16bc:	20000b16 	blt	r4,zero,16ec <__divsi3+0x3c>
    16c0:	0021883a 	mov	r16,zero
    16c4:	28000c16 	blt	r5,zero,16f8 <__divsi3+0x48>
    16c8:	000d883a 	mov	r6,zero
    16cc:	00016440 	call	1644 <udivmodsi4>
    16d0:	0407c83a 	sub	r3,zero,r16
    16d4:	1884f03a 	xor	r2,r3,r2
    16d8:	1405883a 	add	r2,r2,r16
    16dc:	dfc00117 	ldw	ra,4(sp)
    16e0:	dc000017 	ldw	r16,0(sp)
    16e4:	dec00204 	addi	sp,sp,8
    16e8:	f800283a 	ret
    16ec:	0109c83a 	sub	r4,zero,r4
    16f0:	04000044 	movi	r16,1
    16f4:	283ff40e 	bge	r5,zero,16c8 <_gp+0xffff7e08>
    16f8:	014bc83a 	sub	r5,zero,r5
    16fc:	8400005c 	xori	r16,r16,1
    1700:	003ff106 	br	16c8 <_gp+0xffff7e08>

00001704 <__modsi3>:
    1704:	defffd04 	addi	sp,sp,-12
    1708:	dfc00215 	stw	ra,8(sp)
    170c:	dc400115 	stw	r17,4(sp)
    1710:	dc000015 	stw	r16,0(sp)
    1714:	20000c16 	blt	r4,zero,1748 <__modsi3+0x44>
    1718:	0023883a 	mov	r17,zero
    171c:	0021883a 	mov	r16,zero
    1720:	28000d16 	blt	r5,zero,1758 <__modsi3+0x54>
    1724:	01800044 	movi	r6,1
    1728:	00016440 	call	1644 <udivmodsi4>
    172c:	1404f03a 	xor	r2,r2,r16
    1730:	8885883a 	add	r2,r17,r2
    1734:	dfc00217 	ldw	ra,8(sp)
    1738:	dc400117 	ldw	r17,4(sp)
    173c:	dc000017 	ldw	r16,0(sp)
    1740:	dec00304 	addi	sp,sp,12
    1744:	f800283a 	ret
    1748:	0109c83a 	sub	r4,zero,r4
    174c:	04400044 	movi	r17,1
    1750:	043fffc4 	movi	r16,-1
    1754:	283ff30e 	bge	r5,zero,1724 <_gp+0xffff7e64>
    1758:	014bc83a 	sub	r5,zero,r5
    175c:	003ff106 	br	1724 <_gp+0xffff7e64>

00001760 <__udivsi3>:
    1760:	000d883a 	mov	r6,zero
    1764:	00016441 	jmpi	1644 <udivmodsi4>

00001768 <__umodsi3>:
    1768:	01800044 	movi	r6,1
    176c:	00016441 	jmpi	1644 <udivmodsi4>

00001770 <__mulsi3>:
    1770:	0005883a 	mov	r2,zero
    1774:	20000726 	beq	r4,zero,1794 <__mulsi3+0x24>
    1778:	20c0004c 	andi	r3,r4,1
    177c:	2008d07a 	srli	r4,r4,1
    1780:	18000126 	beq	r3,zero,1788 <__mulsi3+0x18>
    1784:	1145883a 	add	r2,r2,r5
    1788:	294b883a 	add	r5,r5,r5
    178c:	203ffa1e 	bne	r4,zero,1778 <_gp+0xffff7eb8>
    1790:	f800283a 	ret
    1794:	f800283a 	ret
