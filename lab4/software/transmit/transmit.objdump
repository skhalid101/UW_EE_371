
transmit.elf:     file format elf32-littlenios2
transmit.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00001020

Program Header:
    LOAD off    0x00001000 vaddr 0x00001000 paddr 0x00001000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00001020 paddr 0x00001020 align 2**12
         filesz 0x00000710 memsz 0x00000710 flags r-x
    LOAD off    0x00001730 vaddr 0x00001730 paddr 0x000017a0 align 2**12
         filesz 0x00000070 memsz 0x00000070 flags rw-
    LOAD off    0x00001810 vaddr 0x00001810 paddr 0x00001810 align 2**12
         filesz 0x00000000 memsz 0x0000000c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00001000  00001000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00001020  00001020  000017a0  2**0
                  CONTENTS
  2 .text         00000704  00001020  00001020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000000c  00001724  00001724  00001724  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000070  00001730  000017a0  00001730  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000000c  00001810  00001810  00001810  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory 00000000  0000181c  0000181c  000017a0  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  000017a0  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000001e8  00000000  00000000  000017c8  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0000148c  00000000  00000000  000019b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000881  00000000  00000000  00002e3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000091a  00000000  00000000  000036bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000378  00000000  00000000  00003fd8  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0000082c  00000000  00000000  00004350  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000324  00000000  00000000  00004b7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  00004ea0  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000030  00000000  00000000  00004ee0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00005e9e  2**0
                  CONTENTS, READONLY
 18 .cpu          00000005  00000000  00000000  00005ea1  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00005ea6  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00005ea7  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000009  00000000  00000000  00005ea8  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000009  00000000  00000000  00005eb1  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000009  00000000  00000000  00005eba  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000e  00000000  00000000  00005ec3  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 0000001a  00000000  00000000  00005ed1  2**0
                  CONTENTS, READONLY
 26 .jdi          000052b6  00000000  00000000  00005eeb  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     00050d1b  00000000  00000000  0000b1a1  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00001000 l    d  .entry	00000000 .entry
00001020 l    d  .exceptions	00000000 .exceptions
00001020 l    d  .text	00000000 .text
00001724 l    d  .rodata	00000000 .rodata
00001730 l    d  .rwdata	00000000 .rwdata
00001810 l    d  .bss	00000000 .bss
0000181c l    d  .onchip_memory	00000000 .onchip_memory
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../transmit_bsp//obj/HAL/src/crt0.o
00001058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 alt_getchar.c
00000000 l    df *ABS*	00000000 alt_load.c
00001160 l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00001568 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
000015d0 l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00001244 g     F .text	0000004c alt_main
000017a0 g       *ABS*	00000000 __flash_rwdata_start
00001788 g     O .rwdata	00000004 jtag_uart
000015b0 g     F .text	00000020 altera_nios2_gen2_irq_init
00001000 g     F .entry	0000000c __reset
00001020 g       *ABS*	00000000 __flash_exceptions_start
00001814 g     O .bss	00000004 alt_argv
00009788 g       *ABS*	00000000 _gp
00001290 g     F .text	00000030 usleep
00001758 g     O .rwdata	00000030 alt_fd_list
00001310 g     F .text	000000e4 altera_avalon_jtag_uart_read
000016ec g     F .text	00000008 .hidden __udivsi3
0000179c g     O .rwdata	00000004 alt_max_fd
0000181c g       *ABS*	00000000 __bss_end
000010fc g     F .text	00000064 alt_getchar
00001730 g     O .rwdata	00000028 alt_dev_null
0000154c g     F .text	0000001c alt_dcache_flush_all
000017a0 g       *ABS*	00000000 __ram_rwdata_end
00001000 g       *ABS*	00000000 __alt_mem_onchip_memory
00001794 g     O .rwdata	00000008 alt_dev_list
00001730 g       *ABS*	00000000 __ram_rodata_end
000016f4 g     F .text	00000008 .hidden __umodsi3
0000181c g       *ABS*	00000000 end
00002000 g       *ABS*	00000000 __alt_stack_pointer
00001020 g     F .text	0000003c _start
000012f4 g     F .text	0000001c alt_sys_init
000016fc g     F .text	00000028 .hidden __mulsi3
00001730 g       *ABS*	00000000 __ram_rwdata_start
00001724 g       *ABS*	00000000 __ram_rodata_start
000013f4 g     F .text	00000158 alt_busy_sleep
0000181c g       *ABS*	00000000 __alt_stack_base
00001810 g       *ABS*	00000000 __bss_start
0000105c g     F .text	000000a0 main
00001818 g     O .bss	00000004 alt_envp
0000163c g     F .text	00000054 .hidden __divsi3
00001724 g       *ABS*	00000000 __flash_rodata_start
000012c0 g     F .text	00000034 alt_irq_init
00001810 g     O .bss	00000004 alt_argc
0000178c g     O .rwdata	00000008 alt_fs_list
00001020 g       *ABS*	00000000 __ram_exceptions_start
000017a0 g       *ABS*	00000000 _edata
0000181c g       *ABS*	00000000 _end
00001020 g       *ABS*	00000000 __ram_exceptions_end
00001690 g     F .text	0000005c .hidden __modsi3
00002000 g       *ABS*	00000000 __alt_data_end
0000100c g       .entry	00000000 _exit
00001594 g     F .text	0000001c alt_icache_flush_all
000011c4 g     F .text	00000080 alt_load



Disassembly of section .entry:

00001000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    1000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    1004:	08440814 	ori	at,at,4128
    jmp r1
    1008:	0800683a 	jmp	at

0000100c <_exit>:
	...

Disassembly of section .text:

00001020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    1020:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    1024:	dec80014 	ori	sp,sp,8192
    movhi gp, %hi(_gp)
    1028:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
    102c:	d6a5e214 	ori	gp,gp,38792
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    1030:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    1034:	10860414 	ori	r2,r2,6160

    movhi r3, %hi(__bss_end)
    1038:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    103c:	18c60714 	ori	r3,r3,6172

    beq r2, r3, 1f
    1040:	10c00326 	beq	r2,r3,1050 <_start+0x30>

0:
    stw zero, (r2)
    1044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    1048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    104c:	10fffd36 	bltu	r2,r3,1044 <_gp+0xffff78bc>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    1050:	00011c40 	call	11c4 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    1054:	00012440 	call	1244 <alt_main>

00001058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    1058:	003fff06 	br	1058 <_gp+0xffff78d0>

0000105c <main>:
#define data_bus (volatile char *) 0x000
#define character_sent (volatile char *) 0x3020
#define load (volatile char *) 0x3000
#define transmit_enable (volatile char *) 0x3030
int main()
{ 
    105c:	defffa04 	addi	sp,sp,-24
    1060:	dfc00515 	stw	ra,20(sp)
    1064:	dd000415 	stw	r20,16(sp)
    1068:	dcc00315 	stw	r19,12(sp)
    106c:	dc800215 	stw	r18,8(sp)
    1070:	dc400115 	stw	r17,4(sp)
    1074:	dc000015 	stw	r16,0(sp)
  //alt_putstr("Hello from Nios II!\n");
  *data_bus = 1;
    1078:	04800044 	movi	r18,1
    107c:	0021883a 	mov	r16,zero
    1080:	84800005 	stb	r18,0(r16)
  int character;

  character = alt_getchar();
    1084:	00010fc0 	call	10fc <alt_getchar>


  *data_bus = character;
    1088:	80800005 	stb	r2,0(r16)




  *load = 1;
    108c:	040c0004 	movi	r16,12288
    1090:	84800005 	stb	r18,0(r16)
  usleep(100);
    1094:	01001904 	movi	r4,100
    1098:	00012900 	call	1290 <usleep>
  *load = 0;
  *transmit_enable = 1;
    109c:	044c0c04 	movi	r17,12336



  *load = 1;
  usleep(100);
  *load = 0;
    10a0:	80000005 	stb	zero,0(r16)
  *transmit_enable = 1;
    10a4:	8c800005 	stb	r18,0(r17)
  while (1){
	 if (*character_sent){
    10a8:	04cc0804 	movi	r19,12320
		 usleep(1000);
		 *transmit_enable = 0;
		 character = alt_getchar();
		 while (character == '\n') {
    10ac:	05000284 	movi	r20,10
  *load = 1;
  usleep(100);
  *load = 0;
  *transmit_enable = 1;
  while (1){
	 if (*character_sent){
    10b0:	98800003 	ldbu	r2,0(r19)
    10b4:	10803fcc 	andi	r2,r2,255
    10b8:	1080201c 	xori	r2,r2,128
    10bc:	10bfe004 	addi	r2,r2,-128
    10c0:	103ffb26 	beq	r2,zero,10b0 <_gp+0xffff7928>
		 usleep(1000);
    10c4:	0100fa04 	movi	r4,1000
    10c8:	00012900 	call	1290 <usleep>
		 *transmit_enable = 0;
    10cc:	88000005 	stb	zero,0(r17)
		 character = alt_getchar();
		 while (character == '\n') {
			 character = alt_getchar();
    10d0:	00010fc0 	call	10fc <alt_getchar>
  while (1){
	 if (*character_sent){
		 usleep(1000);
		 *transmit_enable = 0;
		 character = alt_getchar();
		 while (character == '\n') {
    10d4:	153ffe26 	beq	r2,r20,10d0 <_gp+0xffff7948>
			 character = alt_getchar();
		 }
		 *data_bus = character;
    10d8:	0007883a 	mov	r3,zero
    10dc:	18800005 	stb	r2,0(r3)
		 *load = 1;
    10e0:	04800044 	movi	r18,1
    10e4:	84800005 	stb	r18,0(r16)
		  usleep(10);
    10e8:	01000284 	movi	r4,10
    10ec:	00012900 	call	1290 <usleep>

		 *load = 0;
    10f0:	80000005 	stb	zero,0(r16)
		 *transmit_enable = 1;
    10f4:	8c800005 	stb	r18,0(r17)
    10f8:	003fed06 	br	10b0 <_gp+0xffff7928>

000010fc <alt_getchar>:
 * Uses the ALT_DRIVER_READ() macro to call directly to driver if available.
 * Otherwise, uses newlib provided getchar() routine.
 */
int 
alt_getchar(void)
{
    10fc:	defffd04 	addi	sp,sp,-12
    1100:	dfc00215 	stw	ra,8(sp)
    1104:	df000115 	stw	fp,4(sp)
    1108:	df000104 	addi	fp,sp,4
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
    110c:	00800034 	movhi	r2,0
    1110:	1085d604 	addi	r2,r2,5976
    1114:	10800217 	ldw	r2,8(r2)
    1118:	01000034 	movhi	r4,0
    111c:	2105e204 	addi	r4,r4,6024
    1120:	e17fff04 	addi	r5,fp,-4
    1124:	01800044 	movi	r6,1
    1128:	100f883a 	mov	r7,r2
    112c:	00013100 	call	1310 <altera_avalon_jtag_uart_read>
    1130:	00800216 	blt	zero,r2,113c <alt_getchar+0x40>
        return -1;
    1134:	00bfffc4 	movi	r2,-1
    1138:	00000406 	br	114c <alt_getchar+0x50>
    }
    return c;
    113c:	e0bfff03 	ldbu	r2,-4(fp)
    1140:	10803fcc 	andi	r2,r2,255
    1144:	1080201c 	xori	r2,r2,128
    1148:	10bfe004 	addi	r2,r2,-128
#else
    return getchar();
#endif
#endif
}
    114c:	e037883a 	mov	sp,fp
    1150:	dfc00117 	ldw	ra,4(sp)
    1154:	df000017 	ldw	fp,0(sp)
    1158:	dec00204 	addi	sp,sp,8
    115c:	f800283a 	ret

00001160 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    1160:	defffc04 	addi	sp,sp,-16
    1164:	df000315 	stw	fp,12(sp)
    1168:	df000304 	addi	fp,sp,12
    116c:	e13ffd15 	stw	r4,-12(fp)
    1170:	e17ffe15 	stw	r5,-8(fp)
    1174:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    1178:	e0fffe17 	ldw	r3,-8(fp)
    117c:	e0bffd17 	ldw	r2,-12(fp)
    1180:	18800c26 	beq	r3,r2,11b4 <alt_load_section+0x54>
  {
    while( to != end )
    1184:	00000806 	br	11a8 <alt_load_section+0x48>
    {
      *to++ = *from++;
    1188:	e0bffe17 	ldw	r2,-8(fp)
    118c:	10c00104 	addi	r3,r2,4
    1190:	e0fffe15 	stw	r3,-8(fp)
    1194:	e0fffd17 	ldw	r3,-12(fp)
    1198:	19000104 	addi	r4,r3,4
    119c:	e13ffd15 	stw	r4,-12(fp)
    11a0:	18c00017 	ldw	r3,0(r3)
    11a4:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    11a8:	e0fffe17 	ldw	r3,-8(fp)
    11ac:	e0bfff17 	ldw	r2,-4(fp)
    11b0:	18bff51e 	bne	r3,r2,1188 <_gp+0xffff7a00>
    {
      *to++ = *from++;
    }
  }
}
    11b4:	e037883a 	mov	sp,fp
    11b8:	df000017 	ldw	fp,0(sp)
    11bc:	dec00104 	addi	sp,sp,4
    11c0:	f800283a 	ret

000011c4 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    11c4:	defffe04 	addi	sp,sp,-8
    11c8:	dfc00115 	stw	ra,4(sp)
    11cc:	df000015 	stw	fp,0(sp)
    11d0:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    11d4:	01000034 	movhi	r4,0
    11d8:	2105e804 	addi	r4,r4,6048
    11dc:	01400034 	movhi	r5,0
    11e0:	2945cc04 	addi	r5,r5,5936
    11e4:	01800034 	movhi	r6,0
    11e8:	3185e804 	addi	r6,r6,6048
    11ec:	00011600 	call	1160 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    11f0:	01000034 	movhi	r4,0
    11f4:	21040804 	addi	r4,r4,4128
    11f8:	01400034 	movhi	r5,0
    11fc:	29440804 	addi	r5,r5,4128
    1200:	01800034 	movhi	r6,0
    1204:	31840804 	addi	r6,r6,4128
    1208:	00011600 	call	1160 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    120c:	01000034 	movhi	r4,0
    1210:	2105c904 	addi	r4,r4,5924
    1214:	01400034 	movhi	r5,0
    1218:	2945c904 	addi	r5,r5,5924
    121c:	01800034 	movhi	r6,0
    1220:	3185cc04 	addi	r6,r6,5936
    1224:	00011600 	call	1160 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    1228:	000154c0 	call	154c <alt_dcache_flush_all>
  alt_icache_flush_all();
    122c:	00015940 	call	1594 <alt_icache_flush_all>
}
    1230:	e037883a 	mov	sp,fp
    1234:	dfc00117 	ldw	ra,4(sp)
    1238:	df000017 	ldw	fp,0(sp)
    123c:	dec00204 	addi	sp,sp,8
    1240:	f800283a 	ret

00001244 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    1244:	defffe04 	addi	sp,sp,-8
    1248:	dfc00115 	stw	ra,4(sp)
    124c:	df000015 	stw	fp,0(sp)
    1250:	d839883a 	mov	fp,sp
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    1254:	0009883a 	mov	r4,zero
    1258:	00012c00 	call	12c0 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    125c:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    1260:	00012f40 	call	12f4 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    1264:	d1202217 	ldw	r4,-32632(gp)
    1268:	d0e02317 	ldw	r3,-32628(gp)
    126c:	d0a02417 	ldw	r2,-32624(gp)
    1270:	180b883a 	mov	r5,r3
    1274:	100d883a 	mov	r6,r2
    1278:	000105c0 	call	105c <main>
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
    127c:	e037883a 	mov	sp,fp
    1280:	dfc00117 	ldw	ra,4(sp)
    1284:	df000017 	ldw	fp,0(sp)
    1288:	dec00204 	addi	sp,sp,8
    128c:	f800283a 	ret

00001290 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
    1290:	defffd04 	addi	sp,sp,-12
    1294:	dfc00215 	stw	ra,8(sp)
    1298:	df000115 	stw	fp,4(sp)
    129c:	df000104 	addi	fp,sp,4
    12a0:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
    12a4:	e13fff17 	ldw	r4,-4(fp)
    12a8:	00013f40 	call	13f4 <alt_busy_sleep>
}
    12ac:	e037883a 	mov	sp,fp
    12b0:	dfc00117 	ldw	ra,4(sp)
    12b4:	df000017 	ldw	fp,0(sp)
    12b8:	dec00204 	addi	sp,sp,8
    12bc:	f800283a 	ret

000012c0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    12c0:	defffd04 	addi	sp,sp,-12
    12c4:	dfc00215 	stw	ra,8(sp)
    12c8:	df000115 	stw	fp,4(sp)
    12cc:	df000104 	addi	fp,sp,4
    12d0:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2, nios2);
    12d4:	00015b00 	call	15b0 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    12d8:	00800044 	movi	r2,1
    12dc:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    12e0:	e037883a 	mov	sp,fp
    12e4:	dfc00117 	ldw	ra,4(sp)
    12e8:	df000017 	ldw	fp,0(sp)
    12ec:	dec00204 	addi	sp,sp,8
    12f0:	f800283a 	ret

000012f4 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    12f4:	deffff04 	addi	sp,sp,-4
    12f8:	df000015 	stw	fp,0(sp)
    12fc:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
}
    1300:	e037883a 	mov	sp,fp
    1304:	df000017 	ldw	fp,0(sp)
    1308:	dec00104 	addi	sp,sp,4
    130c:	f800283a 	ret

00001310 <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
    1310:	defff704 	addi	sp,sp,-36
    1314:	df000815 	stw	fp,32(sp)
    1318:	df000804 	addi	fp,sp,32
    131c:	e13ffc15 	stw	r4,-16(fp)
    1320:	e17ffd15 	stw	r5,-12(fp)
    1324:	e1bffe15 	stw	r6,-8(fp)
    1328:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
    132c:	e0bffc17 	ldw	r2,-16(fp)
    1330:	10800017 	ldw	r2,0(r2)
    1334:	e0bff915 	stw	r2,-28(fp)

  char * ptr = buffer;
    1338:	e0bffd17 	ldw	r2,-12(fp)
    133c:	e0bff815 	stw	r2,-32(fp)
  char * end = buffer + space;
    1340:	e0bffe17 	ldw	r2,-8(fp)
    1344:	e0fffd17 	ldw	r3,-12(fp)
    1348:	1885883a 	add	r2,r3,r2
    134c:	e0bffa15 	stw	r2,-24(fp)

  while (ptr < end)
    1350:	00001406 	br	13a4 <altera_avalon_jtag_uart_read+0x94>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    1354:	e0bff917 	ldw	r2,-28(fp)
    1358:	10800037 	ldwio	r2,0(r2)
    135c:	e0bffb15 	stw	r2,-20(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
    1360:	e0bffb17 	ldw	r2,-20(fp)
    1364:	10a0000c 	andi	r2,r2,32768
    1368:	10000626 	beq	r2,zero,1384 <altera_avalon_jtag_uart_read+0x74>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    136c:	e0bff817 	ldw	r2,-32(fp)
    1370:	10c00044 	addi	r3,r2,1
    1374:	e0fff815 	stw	r3,-32(fp)
    1378:	e0fffb17 	ldw	r3,-20(fp)
    137c:	10c00005 	stb	r3,0(r2)
    1380:	00000806 	br	13a4 <altera_avalon_jtag_uart_read+0x94>
    else if (ptr != buffer)
    1384:	e0fff817 	ldw	r3,-32(fp)
    1388:	e0bffd17 	ldw	r2,-12(fp)
    138c:	18800126 	beq	r3,r2,1394 <altera_avalon_jtag_uart_read+0x84>
      break;
    1390:	00000706 	br	13b0 <altera_avalon_jtag_uart_read+0xa0>
    else if(flags & O_NONBLOCK)
    1394:	e0bfff17 	ldw	r2,-4(fp)
    1398:	1090000c 	andi	r2,r2,16384
    139c:	10000126 	beq	r2,zero,13a4 <altera_avalon_jtag_uart_read+0x94>
      break;   
    13a0:	00000306 	br	13b0 <altera_avalon_jtag_uart_read+0xa0>
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
    13a4:	e0fff817 	ldw	r3,-32(fp)
    13a8:	e0bffa17 	ldw	r2,-24(fp)
    13ac:	18bfe936 	bltu	r3,r2,1354 <_gp+0xffff7bcc>
    else if(flags & O_NONBLOCK)
      break;   
    
  }

  if (ptr != buffer)
    13b0:	e0fff817 	ldw	r3,-32(fp)
    13b4:	e0bffd17 	ldw	r2,-12(fp)
    13b8:	18800426 	beq	r3,r2,13cc <altera_avalon_jtag_uart_read+0xbc>
    return ptr - buffer;
    13bc:	e0fff817 	ldw	r3,-32(fp)
    13c0:	e0bffd17 	ldw	r2,-12(fp)
    13c4:	1885c83a 	sub	r2,r3,r2
    13c8:	00000606 	br	13e4 <altera_avalon_jtag_uart_read+0xd4>
  else if (flags & O_NONBLOCK)
    13cc:	e0bfff17 	ldw	r2,-4(fp)
    13d0:	1090000c 	andi	r2,r2,16384
    13d4:	10000226 	beq	r2,zero,13e0 <altera_avalon_jtag_uart_read+0xd0>
    return -EWOULDBLOCK;
    13d8:	00bffd44 	movi	r2,-11
    13dc:	00000106 	br	13e4 <altera_avalon_jtag_uart_read+0xd4>
  else
    return -EIO;
    13e0:	00bffec4 	movi	r2,-5
}
    13e4:	e037883a 	mov	sp,fp
    13e8:	df000017 	ldw	fp,0(sp)
    13ec:	dec00104 	addi	sp,sp,4
    13f0:	f800283a 	ret

000013f4 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    13f4:	defffa04 	addi	sp,sp,-24
    13f8:	dfc00515 	stw	ra,20(sp)
    13fc:	df000415 	stw	fp,16(sp)
    1400:	df000404 	addi	fp,sp,16
    1404:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
    1408:	00800244 	movi	r2,9
    140c:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
    1410:	e13ffd17 	ldw	r4,-12(fp)
    1414:	014003f4 	movhi	r5,15
    1418:	29509004 	addi	r5,r5,16960
    141c:	00016fc0 	call	16fc <__mulsi3>
    1420:	0100bef4 	movhi	r4,763
    1424:	213c2004 	addi	r4,r4,-3968
    1428:	100b883a 	mov	r5,r2
    142c:	00016ec0 	call	16ec <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    1430:	01200034 	movhi	r4,32768
    1434:	213fffc4 	addi	r4,r4,-1
    1438:	100b883a 	mov	r5,r2
    143c:	00016ec0 	call	16ec <__udivsi3>
    1440:	e13fff17 	ldw	r4,-4(fp)
    1444:	100b883a 	mov	r5,r2
    1448:	00016ec0 	call	16ec <__udivsi3>
    144c:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
    1450:	e0bffe17 	ldw	r2,-8(fp)
    1454:	10002a26 	beq	r2,zero,1500 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
    1458:	e03ffc15 	stw	zero,-16(fp)
    145c:	00001706 	br	14bc <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    1460:	00a00034 	movhi	r2,32768
    1464:	10bfffc4 	addi	r2,r2,-1
    1468:	10bfffc4 	addi	r2,r2,-1
    146c:	103ffe1e 	bne	r2,zero,1468 <_gp+0xffff7ce0>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
    1470:	e13ffd17 	ldw	r4,-12(fp)
    1474:	014003f4 	movhi	r5,15
    1478:	29509004 	addi	r5,r5,16960
    147c:	00016fc0 	call	16fc <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    1480:	0100bef4 	movhi	r4,763
    1484:	213c2004 	addi	r4,r4,-3968
    1488:	100b883a 	mov	r5,r2
    148c:	00016ec0 	call	16ec <__udivsi3>
    1490:	01200034 	movhi	r4,32768
    1494:	213fffc4 	addi	r4,r4,-1
    1498:	100b883a 	mov	r5,r2
    149c:	00016ec0 	call	16ec <__udivsi3>
    14a0:	1007883a 	mov	r3,r2
    14a4:	e0bfff17 	ldw	r2,-4(fp)
    14a8:	10c5c83a 	sub	r2,r2,r3
    14ac:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    14b0:	e0bffc17 	ldw	r2,-16(fp)
    14b4:	10800044 	addi	r2,r2,1
    14b8:	e0bffc15 	stw	r2,-16(fp)
    14bc:	e0fffc17 	ldw	r3,-16(fp)
    14c0:	e0bffe17 	ldw	r2,-8(fp)
    14c4:	18bfe616 	blt	r3,r2,1460 <_gp+0xffff7cd8>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
    14c8:	e13ffd17 	ldw	r4,-12(fp)
    14cc:	014003f4 	movhi	r5,15
    14d0:	29509004 	addi	r5,r5,16960
    14d4:	00016fc0 	call	16fc <__mulsi3>
    14d8:	0100bef4 	movhi	r4,763
    14dc:	213c2004 	addi	r4,r4,-3968
    14e0:	100b883a 	mov	r5,r2
    14e4:	00016ec0 	call	16ec <__udivsi3>
    14e8:	1009883a 	mov	r4,r2
    14ec:	e17fff17 	ldw	r5,-4(fp)
    14f0:	00016fc0 	call	16fc <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    14f4:	10bfffc4 	addi	r2,r2,-1
    14f8:	103ffe1e 	bne	r2,zero,14f4 <_gp+0xffff7d6c>
    14fc:	00000d06 	br	1534 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
    1500:	e13ffd17 	ldw	r4,-12(fp)
    1504:	014003f4 	movhi	r5,15
    1508:	29509004 	addi	r5,r5,16960
    150c:	00016fc0 	call	16fc <__mulsi3>
    1510:	0100bef4 	movhi	r4,763
    1514:	213c2004 	addi	r4,r4,-3968
    1518:	100b883a 	mov	r5,r2
    151c:	00016ec0 	call	16ec <__udivsi3>
    1520:	1009883a 	mov	r4,r2
    1524:	e17fff17 	ldw	r5,-4(fp)
    1528:	00016fc0 	call	16fc <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    152c:	10bfffc4 	addi	r2,r2,-1
    1530:	00bffe16 	blt	zero,r2,152c <_gp+0xffff7da4>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
    1534:	0005883a 	mov	r2,zero
}
    1538:	e037883a 	mov	sp,fp
    153c:	dfc00117 	ldw	ra,4(sp)
    1540:	df000017 	ldw	fp,0(sp)
    1544:	dec00204 	addi	sp,sp,8
    1548:	f800283a 	ret

0000154c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    154c:	deffff04 	addi	sp,sp,-4
    1550:	df000015 	stw	fp,0(sp)
    1554:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    1558:	e037883a 	mov	sp,fp
    155c:	df000017 	ldw	fp,0(sp)
    1560:	dec00104 	addi	sp,sp,4
    1564:	f800283a 	ret

00001568 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    1568:	defffc04 	addi	sp,sp,-16
    156c:	df000315 	stw	fp,12(sp)
    1570:	df000304 	addi	fp,sp,12
    1574:	e13ffd15 	stw	r4,-12(fp)
    1578:	e17ffe15 	stw	r5,-8(fp)
    157c:	e1bfff15 	stw	r6,-4(fp)
  return len;
    1580:	e0bfff17 	ldw	r2,-4(fp)
}
    1584:	e037883a 	mov	sp,fp
    1588:	df000017 	ldw	fp,0(sp)
    158c:	dec00104 	addi	sp,sp,4
    1590:	f800283a 	ret

00001594 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    1594:	deffff04 	addi	sp,sp,-4
    1598:	df000015 	stw	fp,0(sp)
    159c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
    15a0:	e037883a 	mov	sp,fp
    15a4:	df000017 	ldw	fp,0(sp)
    15a8:	dec00104 	addi	sp,sp,4
    15ac:	f800283a 	ret

000015b0 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    15b0:	deffff04 	addi	sp,sp,-4
    15b4:	df000015 	stw	fp,0(sp)
    15b8:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    15bc:	000170fa 	wrctl	ienable,zero
}
    15c0:	e037883a 	mov	sp,fp
    15c4:	df000017 	ldw	fp,0(sp)
    15c8:	dec00104 	addi	sp,sp,4
    15cc:	f800283a 	ret

000015d0 <udivmodsi4>:
    15d0:	2900182e 	bgeu	r5,r4,1634 <udivmodsi4+0x64>
    15d4:	28001716 	blt	r5,zero,1634 <udivmodsi4+0x64>
    15d8:	00800804 	movi	r2,32
    15dc:	00c00044 	movi	r3,1
    15e0:	00000206 	br	15ec <udivmodsi4+0x1c>
    15e4:	10001126 	beq	r2,zero,162c <udivmodsi4+0x5c>
    15e8:	28000516 	blt	r5,zero,1600 <udivmodsi4+0x30>
    15ec:	294b883a 	add	r5,r5,r5
    15f0:	10bfffc4 	addi	r2,r2,-1
    15f4:	18c7883a 	add	r3,r3,r3
    15f8:	293ffa36 	bltu	r5,r4,15e4 <_gp+0xffff7e5c>
    15fc:	18000b26 	beq	r3,zero,162c <udivmodsi4+0x5c>
    1600:	0005883a 	mov	r2,zero
    1604:	21400236 	bltu	r4,r5,1610 <udivmodsi4+0x40>
    1608:	2149c83a 	sub	r4,r4,r5
    160c:	10c4b03a 	or	r2,r2,r3
    1610:	1806d07a 	srli	r3,r3,1
    1614:	280ad07a 	srli	r5,r5,1
    1618:	183ffa1e 	bne	r3,zero,1604 <_gp+0xffff7e7c>
    161c:	3000011e 	bne	r6,zero,1624 <udivmodsi4+0x54>
    1620:	f800283a 	ret
    1624:	2005883a 	mov	r2,r4
    1628:	f800283a 	ret
    162c:	0005883a 	mov	r2,zero
    1630:	003ffa06 	br	161c <_gp+0xffff7e94>
    1634:	00c00044 	movi	r3,1
    1638:	003ff106 	br	1600 <_gp+0xffff7e78>

0000163c <__divsi3>:
    163c:	defffe04 	addi	sp,sp,-8
    1640:	dfc00115 	stw	ra,4(sp)
    1644:	dc000015 	stw	r16,0(sp)
    1648:	20000b16 	blt	r4,zero,1678 <__divsi3+0x3c>
    164c:	0021883a 	mov	r16,zero
    1650:	28000c16 	blt	r5,zero,1684 <__divsi3+0x48>
    1654:	000d883a 	mov	r6,zero
    1658:	00015d00 	call	15d0 <udivmodsi4>
    165c:	0407c83a 	sub	r3,zero,r16
    1660:	1884f03a 	xor	r2,r3,r2
    1664:	1405883a 	add	r2,r2,r16
    1668:	dfc00117 	ldw	ra,4(sp)
    166c:	dc000017 	ldw	r16,0(sp)
    1670:	dec00204 	addi	sp,sp,8
    1674:	f800283a 	ret
    1678:	0109c83a 	sub	r4,zero,r4
    167c:	04000044 	movi	r16,1
    1680:	283ff40e 	bge	r5,zero,1654 <_gp+0xffff7ecc>
    1684:	014bc83a 	sub	r5,zero,r5
    1688:	8400005c 	xori	r16,r16,1
    168c:	003ff106 	br	1654 <_gp+0xffff7ecc>

00001690 <__modsi3>:
    1690:	defffd04 	addi	sp,sp,-12
    1694:	dfc00215 	stw	ra,8(sp)
    1698:	dc400115 	stw	r17,4(sp)
    169c:	dc000015 	stw	r16,0(sp)
    16a0:	20000c16 	blt	r4,zero,16d4 <__modsi3+0x44>
    16a4:	0023883a 	mov	r17,zero
    16a8:	0021883a 	mov	r16,zero
    16ac:	28000d16 	blt	r5,zero,16e4 <__modsi3+0x54>
    16b0:	01800044 	movi	r6,1
    16b4:	00015d00 	call	15d0 <udivmodsi4>
    16b8:	1404f03a 	xor	r2,r2,r16
    16bc:	8885883a 	add	r2,r17,r2
    16c0:	dfc00217 	ldw	ra,8(sp)
    16c4:	dc400117 	ldw	r17,4(sp)
    16c8:	dc000017 	ldw	r16,0(sp)
    16cc:	dec00304 	addi	sp,sp,12
    16d0:	f800283a 	ret
    16d4:	0109c83a 	sub	r4,zero,r4
    16d8:	04400044 	movi	r17,1
    16dc:	043fffc4 	movi	r16,-1
    16e0:	283ff30e 	bge	r5,zero,16b0 <_gp+0xffff7f28>
    16e4:	014bc83a 	sub	r5,zero,r5
    16e8:	003ff106 	br	16b0 <_gp+0xffff7f28>

000016ec <__udivsi3>:
    16ec:	000d883a 	mov	r6,zero
    16f0:	00015d01 	jmpi	15d0 <udivmodsi4>

000016f4 <__umodsi3>:
    16f4:	01800044 	movi	r6,1
    16f8:	00015d01 	jmpi	15d0 <udivmodsi4>

000016fc <__mulsi3>:
    16fc:	0005883a 	mov	r2,zero
    1700:	20000726 	beq	r4,zero,1720 <__mulsi3+0x24>
    1704:	20c0004c 	andi	r3,r4,1
    1708:	2008d07a 	srli	r4,r4,1
    170c:	18000126 	beq	r3,zero,1714 <__mulsi3+0x18>
    1710:	1145883a 	add	r2,r2,r5
    1714:	294b883a 	add	r5,r5,r5
    1718:	203ffa1e 	bne	r4,zero,1704 <_gp+0xffff7f7c>
    171c:	f800283a 	ret
    1720:	f800283a 	ret
